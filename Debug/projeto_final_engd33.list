
projeto_final_engd33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009278  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e58  08009418  08009418  0000a418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b270  0800b270  0000de78  2**0
                  CONTENTS
  4 .ARM          00000008  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b278  0800b278  0000de78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b27c  0800b27c  0000c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000e78  20000000  0800b280  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c58  20000e78  0800c0f8  0000de78  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ad0  0800c0f8  0000ead0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000de78  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181b6  00000000  00000000  0000dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d0  00000000  00000000  0002605e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00029930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a2  00000000  00000000  0002aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018393  00000000  00000000  0002bf72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bef  00000000  00000000  00044305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000996c9  00000000  00000000  0005aef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f45bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006340  00000000  00000000  000f4600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fa940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000e78 	.word	0x20000e78
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009400 	.word	0x08009400

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000e7c 	.word	0x20000e7c
 80001dc:	08009400 	.word	0x08009400

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c30:	f000 b96a 	b.w	8000f08 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	460c      	mov	r4, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14e      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c58:	4694      	mov	ip, r2
 8000c5a:	458c      	cmp	ip, r1
 8000c5c:	4686      	mov	lr, r0
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	d962      	bls.n	8000d2a <__udivmoddi4+0xde>
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0320 	rsb	r3, r2, #32
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c74:	4319      	orrs	r1, r3
 8000c76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f f68c 	uxth.w	r6, ip
 8000c82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb04 f106 	mul.w	r1, r4, r6
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ca2:	f080 8112 	bcs.w	8000eca <__udivmoddi4+0x27e>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 810f 	bls.w	8000eca <__udivmoddi4+0x27e>
 8000cac:	3c02      	subs	r4, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a59      	subs	r1, r3, r1
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cba:	fb07 1110 	mls	r1, r7, r0, r1
 8000cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc2:	fb00 f606 	mul.w	r6, r0, r6
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x94>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cd2:	f080 80fc 	bcs.w	8000ece <__udivmoddi4+0x282>
 8000cd6:	429e      	cmp	r6, r3
 8000cd8:	f240 80f9 	bls.w	8000ece <__udivmoddi4+0x282>
 8000cdc:	4463      	add	r3, ip
 8000cde:	3802      	subs	r0, #2
 8000ce0:	1b9b      	subs	r3, r3, r6
 8000ce2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	b11d      	cbz	r5, 8000cf2 <__udivmoddi4+0xa6>
 8000cea:	40d3      	lsrs	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d905      	bls.n	8000d06 <__udivmoddi4+0xba>
 8000cfa:	b10d      	cbz	r5, 8000d00 <__udivmoddi4+0xb4>
 8000cfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000d00:	2100      	movs	r1, #0
 8000d02:	4608      	mov	r0, r1
 8000d04:	e7f5      	b.n	8000cf2 <__udivmoddi4+0xa6>
 8000d06:	fab3 f183 	clz	r1, r3
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d146      	bne.n	8000d9c <__udivmoddi4+0x150>
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xcc>
 8000d12:	4290      	cmp	r0, r2
 8000d14:	f0c0 80f0 	bcc.w	8000ef8 <__udivmoddi4+0x2ac>
 8000d18:	1a86      	subs	r6, r0, r2
 8000d1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d0e6      	beq.n	8000cf2 <__udivmoddi4+0xa6>
 8000d24:	e9c5 6300 	strd	r6, r3, [r5]
 8000d28:	e7e3      	b.n	8000cf2 <__udivmoddi4+0xa6>
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	f040 8090 	bne.w	8000e50 <__udivmoddi4+0x204>
 8000d30:	eba1 040c 	sub.w	r4, r1, ip
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa1f f78c 	uxth.w	r7, ip
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d46:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4e:	fb07 f006 	mul.w	r0, r7, r6
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x11c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x11a>
 8000d60:	4298      	cmp	r0, r3
 8000d62:	f200 80cd 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d66:	4626      	mov	r6, r4
 8000d68:	1a1c      	subs	r4, r3, r0
 8000d6a:	fa1f f38e 	uxth.w	r3, lr
 8000d6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d72:	fb08 4410 	mls	r4, r8, r0, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb00 f707 	mul.w	r7, r0, r7
 8000d7e:	429f      	cmp	r7, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x148>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x146>
 8000d8c:	429f      	cmp	r7, r3
 8000d8e:	f200 80b0 	bhi.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d92:	4620      	mov	r0, r4
 8000d94:	1bdb      	subs	r3, r3, r7
 8000d96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0x9c>
 8000d9c:	f1c1 0620 	rsb	r6, r1, #32
 8000da0:	408b      	lsls	r3, r1
 8000da2:	fa22 f706 	lsr.w	r7, r2, r6
 8000da6:	431f      	orrs	r7, r3
 8000da8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dac:	fa04 f301 	lsl.w	r3, r4, r1
 8000db0:	ea43 030c 	orr.w	r3, r3, ip
 8000db4:	40f4      	lsrs	r4, r6
 8000db6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dba:	0c38      	lsrs	r0, r7, #16
 8000dbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dcc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd4:	45a1      	cmp	r9, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	d90a      	bls.n	8000df2 <__udivmoddi4+0x1a6>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000de2:	f080 8084 	bcs.w	8000eee <__udivmoddi4+0x2a2>
 8000de6:	45a1      	cmp	r9, r4
 8000de8:	f240 8081 	bls.w	8000eee <__udivmoddi4+0x2a2>
 8000dec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	eba4 0409 	sub.w	r4, r4, r9
 8000df6:	fa1f f983 	uxth.w	r9, r3
 8000dfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000e02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0a:	45a4      	cmp	ip, r4
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x1d2>
 8000e0e:	193c      	adds	r4, r7, r4
 8000e10:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e14:	d267      	bcs.n	8000ee6 <__udivmoddi4+0x29a>
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0x29a>
 8000e1a:	3b02      	subs	r3, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e22:	fba0 9302 	umull	r9, r3, r0, r2
 8000e26:	eba4 040c 	sub.w	r4, r4, ip
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	46ce      	mov	lr, r9
 8000e2e:	469c      	mov	ip, r3
 8000e30:	d351      	bcc.n	8000ed6 <__udivmoddi4+0x28a>
 8000e32:	d04e      	beq.n	8000ed2 <__udivmoddi4+0x286>
 8000e34:	b155      	cbz	r5, 8000e4c <__udivmoddi4+0x200>
 8000e36:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e42:	40cb      	lsrs	r3, r1
 8000e44:	431e      	orrs	r6, r3
 8000e46:	40cc      	lsrs	r4, r1
 8000e48:	e9c5 6400 	strd	r6, r4, [r5]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	e750      	b.n	8000cf2 <__udivmoddi4+0xa6>
 8000e50:	f1c2 0320 	rsb	r3, r2, #32
 8000e54:	fa20 f103 	lsr.w	r1, r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e60:	4094      	lsls	r4, r2
 8000e62:	430c      	orrs	r4, r1
 8000e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6c:	fa1f f78c 	uxth.w	r7, ip
 8000e70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e74:	fb08 3110 	mls	r1, r8, r0, r3
 8000e78:	0c23      	lsrs	r3, r4, #16
 8000e7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7e:	fb00 f107 	mul.w	r1, r0, r7
 8000e82:	4299      	cmp	r1, r3
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x24c>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e8e:	d22c      	bcs.n	8000eea <__udivmoddi4+0x29e>
 8000e90:	4299      	cmp	r1, r3
 8000e92:	d92a      	bls.n	8000eea <__udivmoddi4+0x29e>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1a5b      	subs	r3, r3, r1
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea8:	fb01 f307 	mul.w	r3, r1, r7
 8000eac:	42a3      	cmp	r3, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x276>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000eb8:	d213      	bcs.n	8000ee2 <__udivmoddi4+0x296>
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	d911      	bls.n	8000ee2 <__udivmoddi4+0x296>
 8000ebe:	3902      	subs	r1, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	1ae4      	subs	r4, r4, r3
 8000ec4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec8:	e739      	b.n	8000d3e <__udivmoddi4+0xf2>
 8000eca:	4604      	mov	r4, r0
 8000ecc:	e6f0      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e706      	b.n	8000ce0 <__udivmoddi4+0x94>
 8000ed2:	45c8      	cmp	r8, r9
 8000ed4:	d2ae      	bcs.n	8000e34 <__udivmoddi4+0x1e8>
 8000ed6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ede:	3801      	subs	r0, #1
 8000ee0:	e7a8      	b.n	8000e34 <__udivmoddi4+0x1e8>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	e7ed      	b.n	8000ec2 <__udivmoddi4+0x276>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	e799      	b.n	8000e1e <__udivmoddi4+0x1d2>
 8000eea:	4630      	mov	r0, r6
 8000eec:	e7d4      	b.n	8000e98 <__udivmoddi4+0x24c>
 8000eee:	46d6      	mov	lr, sl
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1a6>
 8000ef2:	4463      	add	r3, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e74d      	b.n	8000d94 <__udivmoddi4+0x148>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	4623      	mov	r3, r4
 8000efc:	4608      	mov	r0, r1
 8000efe:	e70f      	b.n	8000d20 <__udivmoddi4+0xd4>
 8000f00:	3e02      	subs	r6, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	e730      	b.n	8000d68 <__udivmoddi4+0x11c>
 8000f06:	bf00      	nop

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08d      	sub	sp, #52	@ 0x34
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	4611      	mov	r1, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	81bb      	strh	r3, [r7, #12]
 8000f20:	4613      	mov	r3, r2
 8000f22:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b1e      	cmp	r3, #30
 8000f28:	d964      	bls.n	8000ff4 <ILI9341_DrawChar+0xe8>
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db60      	blt.n	8000ff4 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3302      	adds	r3, #2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3b20      	subs	r3, #32
 8000f54:	7ffa      	ldrb	r2, [r7, #31]
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	4413      	add	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000f62:	7fbb      	ldrb	r3, [r7, #30]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	7f7b      	ldrb	r3, [r7, #29]
 8000f68:	b29c      	uxth	r4, r3
 8000f6a:	88f9      	ldrh	r1, [r7, #6]
 8000f6c:	89b8      	ldrh	r0, [r7, #12]
 8000f6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	f000 fbf4 	bl	8001760 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7c:	e035      	b.n	8000fea <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	e02b      	b.n	8000fdc <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000f84:	7f3b      	ldrb	r3, [r7, #28]
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	fb03 f202 	mul.w	r2, r3, r2
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	10db      	asrs	r3, r3, #3
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	4413      	add	r3, r2
 8000f96:	3301      	adds	r3, #1
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000fae:	7dfa      	ldrb	r2, [r7, #23]
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b298      	uxth	r0, r3
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f000 fb5f 	bl	8001694 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
 8000fdc:	7fbb      	ldrb	r3, [r7, #30]
 8000fde:	6a3a      	ldr	r2, [r7, #32]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbcf      	blt.n	8000f84 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fea:	7f7b      	ldrb	r3, [r7, #29]
 8000fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbc5      	blt.n	8000f7e <ILI9341_DrawChar+0x72>
 8000ff2:	e000      	b.n	8000ff6 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000ff4:	bf00      	nop
			}
		}
	}
}
 8000ff6:	372c      	adds	r7, #44	@ 0x2c
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}

08000ffc <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4611      	mov	r1, r2
 8001008:	461a      	mov	r2, r3
 800100a:	460b      	mov	r3, r1
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	4613      	mov	r3, r2
 8001010:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3301      	adds	r3, #1
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001020:	e02d      	b.n	800107e <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	7818      	ldrb	r0, [r3, #0]
 8001026:	88b9      	ldrh	r1, [r7, #4]
 8001028:	88fa      	ldrh	r2, [r7, #6]
 800102a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	460b      	mov	r3, r1
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	f7ff ff69 	bl	8000f0c <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	3b20      	subs	r3, #32
 8001040:	7ffa      	ldrb	r2, [r7, #31]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	3304      	adds	r3, #4
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	1c9a      	adds	r2, r3, #2
 8001058:	7fbb      	ldrb	r3, [r7, #30]
 800105a:	429a      	cmp	r2, r3
 800105c:	da07      	bge.n	800106e <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	b29a      	uxth	r2, r3
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4413      	add	r3, r2
 8001066:	b29b      	uxth	r3, r3
 8001068:	3302      	adds	r3, #2
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	e004      	b.n	8001078 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800106e:	7fbb      	ldrb	r3, [r7, #30]
 8001070:	b29a      	uxth	r2, r3
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	4413      	add	r3, r2
 8001076:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1cd      	bne.n	8001022 <ILI9341_DrawText+0x26>
	}
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <HAL_SPI_TxCpltCallback+0x24>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d104      	bne.n	80010aa <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <HAL_SPI_TxCpltCallback+0x28>)
 80010a6:	f002 f82f 	bl	8003108 <HAL_GPIO_WritePin>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000ef4 	.word	0x20000ef4
 80010b8:	40020000 	.word	0x40020000

080010bc <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80010c6:	bf00      	nop
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <ILI9341_SPI_Tx+0x30>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d1f8      	bne.n	80010c8 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <ILI9341_SPI_Tx+0x30>)
 80010de:	f002 fe6f 	bl	8003dc0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000ef4 	.word	0x20000ef4

080010f0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80010fc:	bf00      	nop
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <ILI9341_SPI_TxBuffer+0x30>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b02      	cmp	r3, #2
 800110a:	d1f8      	bne.n	80010fe <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	461a      	mov	r2, r3
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <ILI9341_SPI_TxBuffer+0x30>)
 8001114:	f002 fe54 	bl	8003dc0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000ef4 	.word	0x20000ef4

08001124 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	4808      	ldr	r0, [pc, #32]	@ (8001154 <ILI9341_WriteCommand+0x30>)
 8001134:	f001 ffe8 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001138:	2200      	movs	r2, #0
 800113a:	2108      	movs	r1, #8
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <ILI9341_WriteCommand+0x30>)
 800113e:	f001 ffe3 	bl	8003108 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffb9 	bl	80010bc <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020000 	.word	0x40020000

08001158 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001162:	2201      	movs	r2, #1
 8001164:	2104      	movs	r1, #4
 8001166:	4808      	ldr	r0, [pc, #32]	@ (8001188 <ILI9341_WriteData+0x30>)
 8001168:	f001 ffce 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800116c:	2200      	movs	r2, #0
 800116e:	2108      	movs	r1, #8
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <ILI9341_WriteData+0x30>)
 8001172:	f001 ffc9 	bl	8003108 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff9f 	bl	80010bc <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	4808      	ldr	r0, [pc, #32]	@ (80011c0 <ILI9341_WriteBuffer+0x34>)
 800119e:	f001 ffb3 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80011a2:	2200      	movs	r2, #0
 80011a4:	2108      	movs	r1, #8
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <ILI9341_WriteBuffer+0x34>)
 80011a8:	f001 ffae 	bl	8003108 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff9d 	bl	80010f0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020000 	.word	0x40020000

080011c4 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4604      	mov	r4, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	4623      	mov	r3, r4
 80011d4:	80fb      	strh	r3, [r7, #6]
 80011d6:	4603      	mov	r3, r0
 80011d8:	80bb      	strh	r3, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]
 80011de:	4613      	mov	r3, r2
 80011e0:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8001202:	202a      	movs	r0, #42	@ 0x2a
 8001204:	f7ff ff8e 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2104      	movs	r1, #4
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffbc 	bl	800118c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001224:	883b      	ldrh	r3, [r7, #0]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800122e:	883b      	ldrh	r3, [r7, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001234:	202b      	movs	r0, #43	@ 0x2b
 8001236:	f7ff ff75 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffa3 	bl	800118c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001246:	202c      	movs	r0, #44	@ 0x2c
 8001248:	f7ff ff6c 	bl	8001124 <ILI9341_WriteCommand>
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}

08001254 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001258:	2200      	movs	r2, #0
 800125a:	2110      	movs	r1, #16
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <ILI9341_Reset+0x3c>)
 800125e:	f001 ff53 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f001 fc40 	bl	8002ae8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001268:	2200      	movs	r2, #0
 800126a:	2108      	movs	r1, #8
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <ILI9341_Reset+0x3c>)
 800126e:	f001 ff4b 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f001 fc38 	bl	8002ae8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001278:	2201      	movs	r2, #1
 800127a:	2110      	movs	r1, #16
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ILI9341_Reset+0x3c>)
 800127e:	f001 ff43 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001282:	2201      	movs	r2, #1
 8001284:	2108      	movs	r1, #8
 8001286:	4802      	ldr	r0, [pc, #8]	@ (8001290 <ILI9341_Reset+0x3c>)
 8001288:	f001 ff3e 	bl	8003108 <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020000 	.word	0x40020000

08001294 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001298:	2201      	movs	r2, #1
 800129a:	2110      	movs	r1, #16
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <ILI9341_Enable+0x14>)
 800129e:	f001 ff33 	bl	8003108 <HAL_GPIO_WritePin>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000

080012ac <ILI9341_Init>:

void ILI9341_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80012b0:	f7ff fff0 	bl	8001294 <ILI9341_Enable>
	ILI9341_Reset();
 80012b4:	f7ff ffce 	bl	8001254 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff ff33 	bl	8001124 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f001 fc12 	bl	8002ae8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80012c4:	20cb      	movs	r0, #203	@ 0xcb
 80012c6:	f7ff ff2d 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80012ca:	2039      	movs	r0, #57	@ 0x39
 80012cc:	f7ff ff44 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80012d0:	202c      	movs	r0, #44	@ 0x2c
 80012d2:	f7ff ff41 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ff3e 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80012dc:	2034      	movs	r0, #52	@ 0x34
 80012de:	f7ff ff3b 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff ff38 	bl	8001158 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80012e8:	20cf      	movs	r0, #207	@ 0xcf
 80012ea:	f7ff ff1b 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff ff32 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80012f4:	20c1      	movs	r0, #193	@ 0xc1
 80012f6:	f7ff ff2f 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80012fa:	2030      	movs	r0, #48	@ 0x30
 80012fc:	f7ff ff2c 	bl	8001158 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001300:	20e8      	movs	r0, #232	@ 0xe8
 8001302:	f7ff ff0f 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001306:	2085      	movs	r0, #133	@ 0x85
 8001308:	f7ff ff26 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff23 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8001312:	2078      	movs	r0, #120	@ 0x78
 8001314:	f7ff ff20 	bl	8001158 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001318:	20ea      	movs	r0, #234	@ 0xea
 800131a:	f7ff ff03 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ff1a 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ff17 	bl	8001158 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800132a:	20ed      	movs	r0, #237	@ 0xed
 800132c:	f7ff fefa 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001330:	2064      	movs	r0, #100	@ 0x64
 8001332:	f7ff ff11 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff ff0e 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 800133c:	2012      	movs	r0, #18
 800133e:	f7ff ff0b 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001342:	2081      	movs	r0, #129	@ 0x81
 8001344:	f7ff ff08 	bl	8001158 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001348:	20f7      	movs	r0, #247	@ 0xf7
 800134a:	f7ff feeb 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800134e:	2020      	movs	r0, #32
 8001350:	f7ff ff02 	bl	8001158 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001354:	20c0      	movs	r0, #192	@ 0xc0
 8001356:	f7ff fee5 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800135a:	2023      	movs	r0, #35	@ 0x23
 800135c:	f7ff fefc 	bl	8001158 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001360:	20c1      	movs	r0, #193	@ 0xc1
 8001362:	f7ff fedf 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001366:	2010      	movs	r0, #16
 8001368:	f7ff fef6 	bl	8001158 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800136c:	20c5      	movs	r0, #197	@ 0xc5
 800136e:	f7ff fed9 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001372:	203e      	movs	r0, #62	@ 0x3e
 8001374:	f7ff fef0 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001378:	2028      	movs	r0, #40	@ 0x28
 800137a:	f7ff feed 	bl	8001158 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800137e:	20c7      	movs	r0, #199	@ 0xc7
 8001380:	f7ff fed0 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001384:	2086      	movs	r0, #134	@ 0x86
 8001386:	f7ff fee7 	bl	8001158 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800138a:	2036      	movs	r0, #54	@ 0x36
 800138c:	f7ff feca 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001390:	2048      	movs	r0, #72	@ 0x48
 8001392:	f7ff fee1 	bl	8001158 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001396:	203a      	movs	r0, #58	@ 0x3a
 8001398:	f7ff fec4 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800139c:	2055      	movs	r0, #85	@ 0x55
 800139e:	f7ff fedb 	bl	8001158 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80013a2:	20b1      	movs	r0, #177	@ 0xb1
 80013a4:	f7ff febe 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fed5 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80013ae:	2018      	movs	r0, #24
 80013b0:	f7ff fed2 	bl	8001158 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80013b4:	20b6      	movs	r0, #182	@ 0xb6
 80013b6:	f7ff feb5 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80013ba:	2008      	movs	r0, #8
 80013bc:	f7ff fecc 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80013c0:	2082      	movs	r0, #130	@ 0x82
 80013c2:	f7ff fec9 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80013c6:	2027      	movs	r0, #39	@ 0x27
 80013c8:	f7ff fec6 	bl	8001158 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80013cc:	20f2      	movs	r0, #242	@ 0xf2
 80013ce:	f7ff fea9 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fec0 	bl	8001158 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80013d8:	2026      	movs	r0, #38	@ 0x26
 80013da:	f7ff fea3 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff feba 	bl	8001158 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80013e4:	20e0      	movs	r0, #224	@ 0xe0
 80013e6:	f7ff fe9d 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f7ff feb4 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80013f0:	2031      	movs	r0, #49	@ 0x31
 80013f2:	f7ff feb1 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80013f6:	202b      	movs	r0, #43	@ 0x2b
 80013f8:	f7ff feae 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80013fc:	200c      	movs	r0, #12
 80013fe:	f7ff feab 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001402:	200e      	movs	r0, #14
 8001404:	f7ff fea8 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001408:	2008      	movs	r0, #8
 800140a:	f7ff fea5 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800140e:	204e      	movs	r0, #78	@ 0x4e
 8001410:	f7ff fea2 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001414:	20f1      	movs	r0, #241	@ 0xf1
 8001416:	f7ff fe9f 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800141a:	2037      	movs	r0, #55	@ 0x37
 800141c:	f7ff fe9c 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001420:	2007      	movs	r0, #7
 8001422:	f7ff fe99 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001426:	2010      	movs	r0, #16
 8001428:	f7ff fe96 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800142c:	2003      	movs	r0, #3
 800142e:	f7ff fe93 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001432:	200e      	movs	r0, #14
 8001434:	f7ff fe90 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001438:	2009      	movs	r0, #9
 800143a:	f7ff fe8d 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fe8a 	bl	8001158 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001444:	20e1      	movs	r0, #225	@ 0xe1
 8001446:	f7ff fe6d 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fe84 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001450:	200e      	movs	r0, #14
 8001452:	f7ff fe81 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001456:	2014      	movs	r0, #20
 8001458:	f7ff fe7e 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800145c:	2003      	movs	r0, #3
 800145e:	f7ff fe7b 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001462:	2011      	movs	r0, #17
 8001464:	f7ff fe78 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001468:	2007      	movs	r0, #7
 800146a:	f7ff fe75 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800146e:	2031      	movs	r0, #49	@ 0x31
 8001470:	f7ff fe72 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001474:	20c1      	movs	r0, #193	@ 0xc1
 8001476:	f7ff fe6f 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800147a:	2048      	movs	r0, #72	@ 0x48
 800147c:	f7ff fe6c 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001480:	2008      	movs	r0, #8
 8001482:	f7ff fe69 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001486:	200f      	movs	r0, #15
 8001488:	f7ff fe66 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800148c:	200c      	movs	r0, #12
 800148e:	f7ff fe63 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001492:	2031      	movs	r0, #49	@ 0x31
 8001494:	f7ff fe60 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001498:	2036      	movs	r0, #54	@ 0x36
 800149a:	f7ff fe5d 	bl	8001158 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800149e:	200f      	movs	r0, #15
 80014a0:	f7ff fe5a 	bl	8001158 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80014a4:	2011      	movs	r0, #17
 80014a6:	f7ff fe3d 	bl	8001124 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80014aa:	2064      	movs	r0, #100	@ 0x64
 80014ac:	f001 fb1c 	bl	8002ae8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80014b0:	2029      	movs	r0, #41	@ 0x29
 80014b2:	f7ff fe37 	bl	8001124 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f802 	bl	80014c0 <ILI9341_SetRotation>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80014ca:	2036      	movs	r0, #54	@ 0x36
 80014cc:	f7ff fe2a 	bl	8001124 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 fb09 	bl	8002ae8 <HAL_Delay>

	switch(rotation)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d837      	bhi.n	800154c <ILI9341_SetRotation+0x8c>
 80014dc:	a201      	add	r2, pc, #4	@ (adr r2, 80014e4 <ILI9341_SetRotation+0x24>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	0800150b 	.word	0x0800150b
 80014ec:	08001521 	.word	0x08001521
 80014f0:	08001537 	.word	0x08001537
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80014f4:	2048      	movs	r0, #72	@ 0x48
 80014f6:	f7ff fe2f 	bl	8001158 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <ILI9341_SetRotation+0x98>)
 80014fc:	22f0      	movs	r2, #240	@ 0xf0
 80014fe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <ILI9341_SetRotation+0x9c>)
 8001502:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001506:	801a      	strh	r2, [r3, #0]
		break;
 8001508:	e021      	b.n	800154e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800150a:	2028      	movs	r0, #40	@ 0x28
 800150c:	f7ff fe24 	bl	8001158 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <ILI9341_SetRotation+0x98>)
 8001512:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001516:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <ILI9341_SetRotation+0x9c>)
 800151a:	22f0      	movs	r2, #240	@ 0xf0
 800151c:	801a      	strh	r2, [r3, #0]
		break;
 800151e:	e016      	b.n	800154e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001520:	2088      	movs	r0, #136	@ 0x88
 8001522:	f7ff fe19 	bl	8001158 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <ILI9341_SetRotation+0x98>)
 8001528:	22f0      	movs	r2, #240	@ 0xf0
 800152a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <ILI9341_SetRotation+0x9c>)
 800152e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001532:	801a      	strh	r2, [r3, #0]
		break;
 8001534:	e00b      	b.n	800154e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001536:	20e8      	movs	r0, #232	@ 0xe8
 8001538:	f7ff fe0e 	bl	8001158 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <ILI9341_SetRotation+0x98>)
 800153e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001542:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <ILI9341_SetRotation+0x9c>)
 8001546:	22f0      	movs	r2, #240	@ 0xf0
 8001548:	801a      	strh	r2, [r3, #0]
		break;
 800154a:	e000      	b.n	800154e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800154c:	bf00      	nop
	}
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000002 	.word	0x20000002
 800155c:	20000000 	.word	0x20000000

08001560 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	b08d      	sub	sp, #52	@ 0x34
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	6039      	str	r1, [r7, #0]
 800156c:	80fb      	strh	r3, [r7, #6]
 800156e:	466b      	mov	r3, sp
 8001570:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800157e:	d202      	bcs.n	8001586 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001584:	e002      	b.n	800158c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001586:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2104      	movs	r1, #4
 8001590:	483e      	ldr	r0, [pc, #248]	@ (800168c <ILI9341_DrawColorBurst+0x12c>)
 8001592:	f001 fdb9 	bl	8003108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2108      	movs	r1, #8
 800159a:	483c      	ldr	r0, [pc, #240]	@ (800168c <ILI9341_DrawColorBurst+0x12c>)
 800159c:	f001 fdb4 	bl	8003108 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80015aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015ac:	460b      	mov	r3, r1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	2300      	movs	r3, #0
 80015b4:	4688      	mov	r8, r1
 80015b6:	4699      	mov	r9, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015cc:	2300      	movs	r3, #0
 80015ce:	460c      	mov	r4, r1
 80015d0:	461d      	mov	r5, r3
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	00eb      	lsls	r3, r5, #3
 80015dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015e0:	00e2      	lsls	r2, r4, #3
 80015e2:	1dcb      	adds	r3, r1, #7
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	ebad 0d03 	sub.w	sp, sp, r3
 80015ec:	466b      	mov	r3, sp
 80015ee:	3300      	adds	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f6:	e00e      	b.n	8001616 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	4413      	add	r3, r2
 80015fe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001602:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001606:	3301      	adds	r3, #1
 8001608:	88fa      	ldrh	r2, [r7, #6]
 800160a:	b2d1      	uxtb	r1, r2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001612:	3302      	adds	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800161a:	429a      	cmp	r2, r3
 800161c:	d3ec      	bcc.n	80015f8 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001632:	fbb3 f2f2 	udiv	r2, r3, r2
 8001636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001638:	fb01 f202 	mul.w	r2, r1, r2
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d010      	beq.n	8001668 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
 800164a:	e009      	b.n	8001660 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164e:	b29a      	uxth	r2, r3
 8001650:	230a      	movs	r3, #10
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	480e      	ldr	r0, [pc, #56]	@ (8001690 <ILI9341_DrawColorBurst+0x130>)
 8001656:	f002 fa70 	bl	8003b3a <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	3301      	adds	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3f1      	bcc.n	800164c <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	b29a      	uxth	r2, r3
 800166c:	230a      	movs	r3, #10
 800166e:	69b9      	ldr	r1, [r7, #24]
 8001670:	4807      	ldr	r0, [pc, #28]	@ (8001690 <ILI9341_DrawColorBurst+0x130>)
 8001672:	f002 fa62 	bl	8003b3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2108      	movs	r1, #8
 800167a:	4804      	ldr	r0, [pc, #16]	@ (800168c <ILI9341_DrawColorBurst+0x12c>)
 800167c:	f001 fd44 	bl	8003108 <HAL_GPIO_WritePin>
 8001680:	46b5      	mov	sp, r6
}
 8001682:	bf00      	nop
 8001684:	3734      	adds	r7, #52	@ 0x34
 8001686:	46bd      	mov	sp, r7
 8001688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800168c:	40020000 	.word	0x40020000
 8001690:	20000ef4 	.word	0x20000ef4

08001694 <ILI9341_DrawPixel>:
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
}

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
 800169e:	460b      	mov	r3, r1
 80016a0:	80bb      	strh	r3, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <ILI9341_DrawPixel+0xc4>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	88fa      	ldrh	r2, [r7, #6]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d24d      	bcs.n	800174e <ILI9341_DrawPixel+0xba>
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <ILI9341_DrawPixel+0xc8>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	88ba      	ldrh	r2, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d247      	bcs.n	800174e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	753b      	strb	r3, [r7, #20]
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	757b      	strb	r3, [r7, #21]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	3301      	adds	r3, #1
 80016d2:	121b      	asrs	r3, r3, #8
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	75bb      	strb	r3, [r7, #22]
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	743b      	strb	r3, [r7, #16]
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	747b      	strb	r3, [r7, #17]
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	3301      	adds	r3, #1
 80016f6:	121b      	asrs	r3, r3, #8
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	74bb      	strb	r3, [r7, #18]
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	733b      	strb	r3, [r7, #12]
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001716:	202a      	movs	r0, #42	@ 0x2a
 8001718:	f7ff fd04 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2104      	movs	r1, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd32 	bl	800118c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001728:	202b      	movs	r0, #43	@ 0x2b
 800172a:	f7ff fcfb 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2104      	movs	r1, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fd29 	bl	800118c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800173a:	202c      	movs	r0, #44	@ 0x2c
 800173c:	f7ff fcf2 	bl	8001124 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2102      	movs	r1, #2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fd20 	bl	800118c <ILI9341_WriteBuffer>
 800174c:	e000      	b.n	8001750 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800174e:	bf00      	nop
}
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000002 	.word	0x20000002
 800175c:	20000000 	.word	0x20000000

08001760 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	4603      	mov	r3, r0
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <ILI9341_DrawRectangle+0xb0>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	429a      	cmp	r2, r3
 8001788:	d23d      	bcs.n	8001806 <ILI9341_DrawRectangle+0xa6>
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <ILI9341_DrawRectangle+0xb4>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	88ba      	ldrh	r2, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d237      	bcs.n	8001806 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	4413      	add	r3, r2
 800179c:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <ILI9341_DrawRectangle+0xb0>)
 800179e:	8812      	ldrh	r2, [r2, #0]
 80017a0:	b292      	uxth	r2, r2
 80017a2:	4293      	cmp	r3, r2
 80017a4:	dd05      	ble.n	80017b2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <ILI9341_DrawRectangle+0xb0>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80017b2:	88ba      	ldrh	r2, [r7, #4]
 80017b4:	883b      	ldrh	r3, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <ILI9341_DrawRectangle+0xb4>)
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	b292      	uxth	r2, r2
 80017be:	4293      	cmp	r3, r2
 80017c0:	dd05      	ble.n	80017ce <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <ILI9341_DrawRectangle+0xb4>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29c      	uxth	r4, r3
 80017da:	88ba      	ldrh	r2, [r7, #4]
 80017dc:	883b      	ldrh	r3, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	88b9      	ldrh	r1, [r7, #4]
 80017e8:	88f8      	ldrh	r0, [r7, #6]
 80017ea:	4622      	mov	r2, r4
 80017ec:	f7ff fcea 	bl	80011c4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80017f0:	883b      	ldrh	r3, [r7, #0]
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	8b3b      	ldrh	r3, [r7, #24]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff feae 	bl	8001560 <ILI9341_DrawColorBurst>
 8001804:	e000      	b.n	8001808 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001806:	bf00      	nop
}
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bd90      	pop	{r4, r7, pc}
 800180e:	bf00      	nop
 8001810:	20000002 	.word	0x20000002
 8001814:	20000000 	.word	0x20000000

08001818 <userRTOS>:


/* =====================INICIALIZAÇÃO DO RTOS===================== */

// Função de inicialização
void userRTOS(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af02      	add	r7, sp, #8

	xMutexVelLinearAtual = xSemaphoreCreateMutex();
 800181e:	2001      	movs	r0, #1
 8001820:	f003 fae9 	bl	8004df6 <xQueueCreateMutex>
 8001824:	4603      	mov	r3, r0
 8001826:	4a3a      	ldr	r2, [pc, #232]	@ (8001910 <userRTOS+0xf8>)
 8001828:	6013      	str	r3, [r2, #0]
	xMutexVelAngularAtual = xSemaphoreCreateMutex();
 800182a:	2001      	movs	r0, #1
 800182c:	f003 fae3 	bl	8004df6 <xQueueCreateMutex>
 8001830:	4603      	mov	r3, r0
 8001832:	4a38      	ldr	r2, [pc, #224]	@ (8001914 <userRTOS+0xfc>)
 8001834:	6013      	str	r3, [r2, #0]
	xMutexPosicaoAtual = xSemaphoreCreateMutex();
 8001836:	2001      	movs	r0, #1
 8001838:	f003 fadd 	bl	8004df6 <xQueueCreateMutex>
 800183c:	4603      	mov	r3, r0
 800183e:	4a36      	ldr	r2, [pc, #216]	@ (8001918 <userRTOS+0x100>)
 8001840:	6013      	str	r3, [r2, #0]

	xQueueCorrente = xQueueCreate(50, sizeof(dataset));
 8001842:	2200      	movs	r2, #0
 8001844:	2110      	movs	r1, #16
 8001846:	2032      	movs	r0, #50	@ 0x32
 8001848:	f003 fa5d 	bl	8004d06 <xQueueGenericCreate>
 800184c:	4603      	mov	r3, r0
 800184e:	4a33      	ldr	r2, [pc, #204]	@ (800191c <userRTOS+0x104>)
 8001850:	6013      	str	r3, [r2, #0]
	xQueueVelAngular = xQueueCreate(30, sizeof(dataset));
 8001852:	2200      	movs	r2, #0
 8001854:	2110      	movs	r1, #16
 8001856:	201e      	movs	r0, #30
 8001858:	f003 fa55 	bl	8004d06 <xQueueGenericCreate>
 800185c:	4603      	mov	r3, r0
 800185e:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <userRTOS+0x108>)
 8001860:	6013      	str	r3, [r2, #0]
	xQueuePosicao = xQueueCreate(5, sizeof(dataset));
 8001862:	2200      	movs	r2, #0
 8001864:	2110      	movs	r1, #16
 8001866:	2005      	movs	r0, #5
 8001868:	f003 fa4d 	bl	8004d06 <xQueueGenericCreate>
 800186c:	4603      	mov	r3, r0
 800186e:	4a2d      	ldr	r2, [pc, #180]	@ (8001924 <userRTOS+0x10c>)
 8001870:	6013      	str	r3, [r2, #0]

	xTaskCreate(vDisplayManager,
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <userRTOS+0x110>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001880:	492a      	ldr	r1, [pc, #168]	@ (800192c <userRTOS+0x114>)
 8001882:	482b      	ldr	r0, [pc, #172]	@ (8001930 <userRTOS+0x118>)
 8001884:	f004 f848 	bl	8005918 <xTaskCreate>
				2048,
				(void*) 0,
				1,
				&xHandlerDisplayManager);

	xTaskCreate(vTaskGerarQueueCorrente,
 8001888:	2300      	movs	r3, #0
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	2305      	movs	r3, #5
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	2280      	movs	r2, #128	@ 0x80
 8001894:	4927      	ldr	r1, [pc, #156]	@ (8001934 <userRTOS+0x11c>)
 8001896:	4828      	ldr	r0, [pc, #160]	@ (8001938 <userRTOS+0x120>)
 8001898:	f004 f83e 	bl	8005918 <xTaskCreate>
				128,
				(void*) 0,
				5,
				NULL);

	xTaskCreate(vTaskGerarQueueVelAngular,
 800189c:	2300      	movs	r3, #0
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2304      	movs	r3, #4
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	2280      	movs	r2, #128	@ 0x80
 80018a8:	4924      	ldr	r1, [pc, #144]	@ (800193c <userRTOS+0x124>)
 80018aa:	4825      	ldr	r0, [pc, #148]	@ (8001940 <userRTOS+0x128>)
 80018ac:	f004 f834 	bl	8005918 <xTaskCreate>
				128,
				(void*) 0,
				4,
				NULL);

	xTaskCreate(vTaskGerarQueuePosicao,
 80018b0:	2300      	movs	r3, #0
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	2303      	movs	r3, #3
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	2280      	movs	r2, #128	@ 0x80
 80018bc:	4921      	ldr	r1, [pc, #132]	@ (8001944 <userRTOS+0x12c>)
 80018be:	4822      	ldr	r0, [pc, #136]	@ (8001948 <userRTOS+0x130>)
 80018c0:	f004 f82a 	bl	8005918 <xTaskCreate>
				128,
				(void*) 0,
				3,
				NULL);

	xTaskCreate(vTaskQueueCorrenteReader,
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d2:	491e      	ldr	r1, [pc, #120]	@ (800194c <userRTOS+0x134>)
 80018d4:	481e      	ldr	r0, [pc, #120]	@ (8001950 <userRTOS+0x138>)
 80018d6:	f004 f81f 	bl	8005918 <xTaskCreate>
				256,
				(void*) 0,
				2,
				NULL);

	xTaskCreate(vTaskQueueVelAngularReader,
 80018da:	2300      	movs	r3, #0
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2302      	movs	r3, #2
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e8:	491a      	ldr	r1, [pc, #104]	@ (8001954 <userRTOS+0x13c>)
 80018ea:	481b      	ldr	r0, [pc, #108]	@ (8001958 <userRTOS+0x140>)
 80018ec:	f004 f814 	bl	8005918 <xTaskCreate>
				256,
				(void*) 0,
				2,
				NULL);

	xTaskCreate(vTaskQueuePosicaoReader,
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2300      	movs	r3, #0
 80018fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018fe:	4917      	ldr	r1, [pc, #92]	@ (800195c <userRTOS+0x144>)
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <userRTOS+0x148>)
 8001902:	f004 f809 	bl	8005918 <xTaskCreate>
				256,
				(void*) 0,
				2,
				NULL);

	vTaskStartScheduler();
 8001906:	f004 fa1b 	bl	8005d40 <vTaskStartScheduler>

    while(1);
 800190a:	bf00      	nop
 800190c:	e7fd      	b.n	800190a <userRTOS+0xf2>
 800190e:	bf00      	nop
 8001910:	20000ee8 	.word	0x20000ee8
 8001914:	20000eec 	.word	0x20000eec
 8001918:	20000ef0 	.word	0x20000ef0
 800191c:	20000ed8 	.word	0x20000ed8
 8001920:	20000edc 	.word	0x20000edc
 8001924:	20000ee0 	.word	0x20000ee0
 8001928:	20000ed4 	.word	0x20000ed4
 800192c:	08009418 	.word	0x08009418
 8001930:	08001965 	.word	0x08001965
 8001934:	08009428 	.word	0x08009428
 8001938:	080019e5 	.word	0x080019e5
 800193c:	0800943c 	.word	0x0800943c
 8001940:	08001a79 	.word	0x08001a79
 8001944:	08009454 	.word	0x08009454
 8001948:	08001b0d 	.word	0x08001b0d
 800194c:	08009468 	.word	0x08009468
 8001950:	08001ba1 	.word	0x08001ba1
 8001954:	0800947c 	.word	0x0800947c
 8001958:	08001c19 	.word	0x08001c19
 800195c:	08009494 	.word	0x08009494
 8001960:	08001ee5 	.word	0x08001ee5

08001964 <vDisplayManager>:


/* =========================TASKS DO RTOS========================= */

// Gerenciamento da tela
void vDisplayManager(void *p){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;;
	uint16_t sIndice = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	81fb      	strh	r3, [r7, #14]
	while(1){
		xLastWakeTime = xTaskGetTickCount();
 8001970:	f004 fb02 	bl	8005f78 <xTaskGetTickCount>
 8001974:	4603      	mov	r3, r0
 8001976:	60bb      	str	r3, [r7, #8]
		if(sIndice >= 9){
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d91f      	bls.n	80019be <vDisplayManager+0x5a>
			switch(sTelaAtual) {
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <vDisplayManager+0x7c>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d00e      	beq.n	80019a4 <vDisplayManager+0x40>
 8001986:	2b03      	cmp	r3, #3
 8001988:	dc10      	bgt.n	80019ac <vDisplayManager+0x48>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d002      	beq.n	8001994 <vDisplayManager+0x30>
 800198e:	2b02      	cmp	r3, #2
 8001990:	d004      	beq.n	800199c <vDisplayManager+0x38>
    		        break;
    		    case TELA3:
    		       	sTelaAtual = TELA1;
    		        break;
    		    default:
    		        break;
 8001992:	e00b      	b.n	80019ac <vDisplayManager+0x48>
    		        sTelaAtual = TELA2;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <vDisplayManager+0x7c>)
 8001996:	2202      	movs	r2, #2
 8001998:	801a      	strh	r2, [r3, #0]
    		        break;
 800199a:	e008      	b.n	80019ae <vDisplayManager+0x4a>
    		        sTelaAtual = TELA3;
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <vDisplayManager+0x7c>)
 800199e:	2203      	movs	r2, #3
 80019a0:	801a      	strh	r2, [r3, #0]
    		        break;
 80019a2:	e004      	b.n	80019ae <vDisplayManager+0x4a>
    		       	sTelaAtual = TELA1;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <vDisplayManager+0x7c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	801a      	strh	r2, [r3, #0]
    		        break;
 80019aa:	e000      	b.n	80019ae <vDisplayManager+0x4a>
    		        break;
 80019ac:	bf00      	nop
    		}
			baseTela(sTelaAtual);
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <vDisplayManager+0x7c>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fbb6 	bl	8002124 <baseTela>
			sIndice = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	81fb      	strh	r3, [r7, #14]
 80019bc:	e002      	b.n	80019c4 <vDisplayManager+0x60>
		}else{
			sIndice++;
 80019be:	89fb      	ldrh	r3, [r7, #14]
 80019c0:	3301      	adds	r3, #1
 80019c2:	81fb      	strh	r3, [r7, #14]
		}
		dadosTela(sTelaAtual);
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <vDisplayManager+0x7c>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fd71 	bl	80024b0 <dadosTela>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(REFRESH_TELA));
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	f240 21bb 	movw	r1, #699	@ 0x2bb
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 f8fc 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 80019dc:	e7c8      	b.n	8001970 <vDisplayManager+0xc>
 80019de:	bf00      	nop
 80019e0:	20000e14 	.word	0x20000e14

080019e4 <vTaskGerarQueueCorrente>:
	}
}

// Geração de dados de corrente e envio para queue
void vTaskGerarQueueCorrente(void *p) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	dataset correntes;
	uint16_t sIndice = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	83fb      	strh	r3, [r7, #30]
	while(1) {
		xLastWakeTime = xTaskGetTickCount();
 80019f0:	f004 fac2 	bl	8005f78 <xTaskGetTickCount>
 80019f4:	4603      	mov	r3, r0
 80019f6:	61bb      	str	r3, [r7, #24]
		correntes.x = vetorCorrenteX[sIndice];
 80019f8:	8bfb      	ldrh	r3, [r7, #30]
 80019fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <vTaskGerarQueueCorrente+0x80>)
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60bb      	str	r3, [r7, #8]
		correntes.y = vetorCorrenteY[sIndice];
 8001a04:	8bfb      	ldrh	r3, [r7, #30]
 8001a06:	4a18      	ldr	r2, [pc, #96]	@ (8001a68 <vTaskGerarQueueCorrente+0x84>)
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]
		correntes.z = vetorCorrenteZ[sIndice];
 8001a10:	8bfb      	ldrh	r3, [r7, #30]
 8001a12:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <vTaskGerarQueueCorrente+0x88>)
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
		correntes.timestamp = xLastWakeTime;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	617b      	str	r3, [r7, #20]
		if(sIndice >= LENGTH_LUT - 1){
 8001a20:	8bfb      	ldrh	r3, [r7, #30]
 8001a22:	2b62      	cmp	r3, #98	@ 0x62
 8001a24:	d902      	bls.n	8001a2c <vTaskGerarQueueCorrente+0x48>
			sIndice = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e002      	b.n	8001a32 <vTaskGerarQueueCorrente+0x4e>
		}else{
			sIndice++;
 8001a2c:	8bfb      	ldrh	r3, [r7, #30]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	83fb      	strh	r3, [r7, #30]
		}
		if(xQueueSendToBack(xQueueCorrente, &correntes, 0) == errQUEUE_FULL){
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <vTaskGerarQueueCorrente+0x8c>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f003 f9f3 	bl	8004e28 <xQueueGenericSend>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <vTaskGerarQueueCorrente+0x70>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a4e:	4809      	ldr	r0, [pc, #36]	@ (8001a74 <vTaskGerarQueueCorrente+0x90>)
 8001a50:	f001 fb5a 	bl	8003108 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1));
 8001a54:	f107 0318 	add.w	r3, r7, #24
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 f8ba 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001a60:	e7c6      	b.n	80019f0 <vTaskGerarQueueCorrente+0xc>
 8001a62:	bf00      	nop
 8001a64:	20000004 	.word	0x20000004
 8001a68:	20000194 	.word	0x20000194
 8001a6c:	20000324 	.word	0x20000324
 8001a70:	20000ed8 	.word	0x20000ed8
 8001a74:	40020800 	.word	0x40020800

08001a78 <vTaskGerarQueueVelAngular>:
	}
}

// Geração de dados de velocidade angular e envio para queue
void vTaskGerarQueueVelAngular(void *p) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	dataset velAngular;
	uint16_t sIndice = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	83fb      	strh	r3, [r7, #30]
	while(1) {
		xLastWakeTime = xTaskGetTickCount();
 8001a84:	f004 fa78 	bl	8005f78 <xTaskGetTickCount>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
		velAngular.x = vetorVelAngX[sIndice];
 8001a8c:	8bfb      	ldrh	r3, [r7, #30]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <vTaskGerarQueueVelAngular+0x80>)
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60bb      	str	r3, [r7, #8]
		velAngular.y = vetorVelAngY[sIndice];
 8001a98:	8bfb      	ldrh	r3, [r7, #30]
 8001a9a:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <vTaskGerarQueueVelAngular+0x84>)
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
		velAngular.z = vetorVelAngZ[sIndice];
 8001aa4:	8bfb      	ldrh	r3, [r7, #30]
 8001aa6:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <vTaskGerarQueueVelAngular+0x88>)
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
		velAngular.timestamp = xLastWakeTime;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	617b      	str	r3, [r7, #20]
		if(sIndice >= LENGTH_LUT - 1){
 8001ab4:	8bfb      	ldrh	r3, [r7, #30]
 8001ab6:	2b62      	cmp	r3, #98	@ 0x62
 8001ab8:	d902      	bls.n	8001ac0 <vTaskGerarQueueVelAngular+0x48>
			sIndice = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	83fb      	strh	r3, [r7, #30]
 8001abe:	e002      	b.n	8001ac6 <vTaskGerarQueueVelAngular+0x4e>
		}else{
			sIndice++;
 8001ac0:	8bfb      	ldrh	r3, [r7, #30]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	83fb      	strh	r3, [r7, #30]
		}
		if(xQueueSendToBack(xQueueVelAngular, &velAngular, 0) == errQUEUE_FULL){
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <vTaskGerarQueueVelAngular+0x8c>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f107 0108 	add.w	r1, r7, #8
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f003 f9a9 	bl	8004e28 <xQueueGenericSend>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <vTaskGerarQueueVelAngular+0x70>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ae2:	4809      	ldr	r0, [pc, #36]	@ (8001b08 <vTaskGerarQueueVelAngular+0x90>)
 8001ae4:	f001 fb10 	bl	8003108 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(10));
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	210a      	movs	r1, #10
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 f870 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001af4:	e7c6      	b.n	8001a84 <vTaskGerarQueueVelAngular+0xc>
 8001af6:	bf00      	nop
 8001af8:	200004b4 	.word	0x200004b4
 8001afc:	20000644 	.word	0x20000644
 8001b00:	200007d4 	.word	0x200007d4
 8001b04:	20000edc 	.word	0x20000edc
 8001b08:	40020800 	.word	0x40020800

08001b0c <vTaskGerarQueuePosicao>:
	}
}

// Geração de dados de GPS e envio para queue
void vTaskGerarQueuePosicao(void *p) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	dataset posicao;
	uint16_t sIndice = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	83fb      	strh	r3, [r7, #30]
	while(1) {
		xLastWakeTime = xTaskGetTickCount();
 8001b18:	f004 fa2e 	bl	8005f78 <xTaskGetTickCount>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
		posicao.x = vetorPosicaoX[sIndice];
 8001b20:	8bfb      	ldrh	r3, [r7, #30]
 8001b22:	4a1a      	ldr	r2, [pc, #104]	@ (8001b8c <vTaskGerarQueuePosicao+0x80>)
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60bb      	str	r3, [r7, #8]
		posicao.y = vetorPosicaoY[sIndice];
 8001b2c:	8bfb      	ldrh	r3, [r7, #30]
 8001b2e:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <vTaskGerarQueuePosicao+0x84>)
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]
		posicao.z = vetorPosicaoZ[sIndice];
 8001b38:	8bfb      	ldrh	r3, [r7, #30]
 8001b3a:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <vTaskGerarQueuePosicao+0x88>)
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
		posicao.timestamp = xLastWakeTime;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	617b      	str	r3, [r7, #20]
		if(sIndice >= LENGTH_LUT - 1){
 8001b48:	8bfb      	ldrh	r3, [r7, #30]
 8001b4a:	2b62      	cmp	r3, #98	@ 0x62
 8001b4c:	d902      	bls.n	8001b54 <vTaskGerarQueuePosicao+0x48>
			sIndice = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	83fb      	strh	r3, [r7, #30]
 8001b52:	e002      	b.n	8001b5a <vTaskGerarQueuePosicao+0x4e>
		}else{
			sIndice++;
 8001b54:	8bfb      	ldrh	r3, [r7, #30]
 8001b56:	3301      	adds	r3, #1
 8001b58:	83fb      	strh	r3, [r7, #30]
		}
		if(xQueueSendToBack(xQueuePosicao, &posicao, 0) == errQUEUE_FULL){
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <vTaskGerarQueuePosicao+0x8c>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	f107 0108 	add.w	r1, r7, #8
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	f003 f95f 	bl	8004e28 <xQueueGenericSend>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <vTaskGerarQueuePosicao+0x70>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <vTaskGerarQueuePosicao+0x90>)
 8001b78:	f001 fac6 	bl	8003108 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8001b7c:	f107 0318 	add.w	r3, r7, #24
 8001b80:	2164      	movs	r1, #100	@ 0x64
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f826 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001b88:	e7c6      	b.n	8001b18 <vTaskGerarQueuePosicao+0xc>
 8001b8a:	bf00      	nop
 8001b8c:	20000964 	.word	0x20000964
 8001b90:	20000af4 	.word	0x20000af4
 8001b94:	20000c84 	.word	0x20000c84
 8001b98:	20000ee0 	.word	0x20000ee0
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <vTaskQueueCorrenteReader>:
	}
}

// Leitura de dados de corrente da queue
void vTaskQueueCorrenteReader(void *p) {
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;
	dataset corrente;
	while (1) {
		xLastWakeTime = xTaskGetTickCount();
 8001bac:	f004 f9e4 	bl	8005f78 <xTaskGetTickCount>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]
		while(xQueueReceive(xQueueCorrente, &corrente, 0) != errQUEUE_EMPTY){
 8001bb4:	e016      	b.n	8001be4 <vTaskQueueCorrenteReader+0x44>
			if(xSemaphoreTake(xMutexCorrenteAtual, xMaxMutexDelay) == pdPASS){
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <vTaskQueueCorrenteReader+0x68>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69f9      	ldr	r1, [r7, #28]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fbb5 	bl	800532c <xQueueSemaphoreTake>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d10d      	bne.n	8001be4 <vTaskQueueCorrenteReader+0x44>
				xCorrenteAtual = corrente;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <vTaskQueueCorrenteReader+0x6c>)
 8001bca:	461c      	mov	r4, r3
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexCorrenteAtual);
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <vTaskQueueCorrenteReader+0x68>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	f003 f922 	bl	8004e28 <xQueueGenericSend>
		while(xQueueReceive(xQueueCorrente, &corrente, 0) != errQUEUE_EMPTY){
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <vTaskQueueCorrenteReader+0x70>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	2200      	movs	r2, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 faba 	bl	8005168 <xQueueReceive>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1dd      	bne.n	8001bb6 <vTaskQueueCorrenteReader+0x16>
			}
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(125));
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	217d      	movs	r1, #125	@ 0x7d
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 ffe7 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001c06:	e7d1      	b.n	8001bac <vTaskQueueCorrenteReader+0xc>
 8001c08:	20000ee4 	.word	0x20000ee4
 8001c0c:	20000ec4 	.word	0x20000ec4
 8001c10:	20000ed8 	.word	0x20000ed8
 8001c14:	00000000 	.word	0x00000000

08001c18 <vTaskQueueVelAngularReader>:
	}
}

// Leitura de dados de velocidade angular da queue
void vTaskQueueVelAngularReader(void *p) {
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b09a      	sub	sp, #104	@ 0x68
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8001c20:	2301      	movs	r3, #1
 8001c22:	667b      	str	r3, [r7, #100]	@ 0x64
	const uint16_t L_cm = 20;
 8001c24:	2314      	movs	r3, #20
 8001c26:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	const uint16_t r_cm = 15;
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	const float alpha1 = 0;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const float alpha2 = 2*M_PI/3;
 8001c36:	4ba4      	ldr	r3, [pc, #656]	@ (8001ec8 <vTaskQueueVelAngularReader+0x2b0>)
 8001c38:	65bb      	str	r3, [r7, #88]	@ 0x58
	const float alpha3 = 4*M_PI/3;
 8001c3a:	4ba4      	ldr	r3, [pc, #656]	@ (8001ecc <vTaskQueueVelAngularReader+0x2b4>)
 8001c3c:	657b      	str	r3, [r7, #84]	@ 0x54
	const float sin_alpha1 = sin(alpha1);
 8001c3e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001c40:	f7fe fc82 	bl	8000548 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	ec43 2b10 	vmov	d0, r2, r3
 8001c4c:	f006 fba8 	bl	80083a0 <sin>
 8001c50:	ec53 2b10 	vmov	r2, r3, d0
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7fe ff90 	bl	8000b7c <__aeabi_d2f>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	653b      	str	r3, [r7, #80]	@ 0x50
	const float sin_alpha2 = sin(alpha2);
 8001c60:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c62:	f7fe fc71 	bl	8000548 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	ec43 2b10 	vmov	d0, r2, r3
 8001c6e:	f006 fb97 	bl	80083a0 <sin>
 8001c72:	ec53 2b10 	vmov	r2, r3, d0
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff7f 	bl	8000b7c <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const float sin_alpha3 = sin(alpha3);
 8001c82:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001c84:	f7fe fc60 	bl	8000548 <__aeabi_f2d>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	ec43 2b10 	vmov	d0, r2, r3
 8001c90:	f006 fb86 	bl	80083a0 <sin>
 8001c94:	ec53 2b10 	vmov	r2, r3, d0
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff6e 	bl	8000b7c <__aeabi_d2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
	const float cos_alpha1 = cos(alpha1);
 8001ca4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ca6:	f7fe fc4f 	bl	8000548 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	ec43 2b10 	vmov	d0, r2, r3
 8001cb2:	f006 fb21 	bl	80082f8 <cos>
 8001cb6:	ec53 2b10 	vmov	r2, r3, d0
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff5d 	bl	8000b7c <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	647b      	str	r3, [r7, #68]	@ 0x44
	const float cos_alpha2 = cos(alpha2);
 8001cc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cc8:	f7fe fc3e 	bl	8000548 <__aeabi_f2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	ec43 2b10 	vmov	d0, r2, r3
 8001cd4:	f006 fb10 	bl	80082f8 <cos>
 8001cd8:	ec53 2b10 	vmov	r2, r3, d0
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe ff4c 	bl	8000b7c <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	643b      	str	r3, [r7, #64]	@ 0x40
	const float cos_alpha3 = cos(alpha3);
 8001ce8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001cea:	f7fe fc2d 	bl	8000548 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ec43 2b10 	vmov	d0, r2, r3
 8001cf6:	f006 faff 	bl	80082f8 <cos>
 8001cfa:	ec53 2b10 	vmov	r2, r3, d0
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff3b 	bl	8000b7c <__aeabi_d2f>
 8001d06:	4603      	mov	r3, r0
 8001d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TickType_t xLastWakeTime;
	float linearVX, linearVY, linearW;
	dataset velAngular, velLinear;
	while (1) {
		xLastWakeTime = xTaskGetTickCount();
 8001d0a:	f004 f935 	bl	8005f78 <xTaskGetTickCount>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		while(xQueueReceive(xQueueVelAngular, &velAngular, 0) != errQUEUE_EMPTY) {
 8001d12:	e0c0      	b.n	8001e96 <vTaskQueueVelAngularReader+0x27e>
			linearVX = r_cm*(2.0/3.0)*(-(sin_alpha1*velAngular.x)-(sin_alpha2*velAngular.y)-(sin_alpha3*velAngular.z));
 8001d14:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc03 	bl	8000524 <__aeabi_i2d>
 8001d1e:	a368      	add	r3, pc, #416	@ (adr r3, 8001ec0 <vTaskQueueVelAngularReader+0x2a8>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc68 	bl	80005f8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d34:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d40:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d44:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d50:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001d54:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	ee17 0a90 	vmov	r0, s15
 8001d64:	f7fe fbf0 	bl	8000548 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fc42 	bl	80005f8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe fefe 	bl	8000b7c <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	63bb      	str	r3, [r7, #56]	@ 0x38
			linearVY = r_cm*(2.0/3.0)*((cos_alpha1*velAngular.x)+(cos_alpha2*velAngular.y)+(cos_alpha3*velAngular.z));
 8001d84:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbcb 	bl	8000524 <__aeabi_i2d>
 8001d8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001ec0 <vTaskQueueVelAngularReader+0x2a8>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fc30 	bl	80005f8 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	461d      	mov	r5, r3
 8001da0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001da4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dac:	edd7 6a08 	vldr	s13, [r7, #32]
 8001db0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001dc0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	ee17 0a90 	vmov	r0, s15
 8001dd0:	f7fe fbba 	bl	8000548 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe fc0c 	bl	80005f8 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fec8 	bl	8000b7c <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
			linearW = (r_cm*(velAngular.x+velAngular.y+velAngular.z))/(3*L_cm);
 8001df0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e10:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e14:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			velLinear.x = linearVX;
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	60fb      	str	r3, [r7, #12]
			velLinear.y = linearVY;
 8001e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e34:	613b      	str	r3, [r7, #16]
			velLinear.z = linearW;
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	617b      	str	r3, [r7, #20]

			if(xSemaphoreTake(xMutexVelLinearAtual, xMaxMutexDelay) == pdPASS){
 8001e3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <vTaskQueueVelAngularReader+0x2b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fa73 	bl	800532c <xQueueSemaphoreTake>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10d      	bne.n	8001e68 <vTaskQueueVelAngularReader+0x250>
				xVelLinearAtual = velLinear;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <vTaskQueueVelAngularReader+0x2bc>)
 8001e4e:	461c      	mov	r4, r3
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexVelLinearAtual);
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <vTaskQueueVelAngularReader+0x2b8>)
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	f002 ffe0 	bl	8004e28 <xQueueGenericSend>
			}

			if(xSemaphoreTake(xMutexVelAngularAtual, xMaxMutexDelay) == pdPASS){
 8001e68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <vTaskQueueVelAngularReader+0x2c0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fa5c 	bl	800532c <xQueueSemaphoreTake>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10d      	bne.n	8001e96 <vTaskQueueVelAngularReader+0x27e>
				xVelAngularAtual = velAngular;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <vTaskQueueVelAngularReader+0x2c4>)
 8001e7c:	461c      	mov	r4, r3
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexVelAngularAtual);
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <vTaskQueueVelAngularReader+0x2c0>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	f002 ffc9 	bl	8004e28 <xQueueGenericSend>
		while(xQueueReceive(xQueueVelAngular, &velAngular, 0) != errQUEUE_EMPTY) {
 8001e96:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <vTaskQueueVelAngularReader+0x2c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f107 011c 	add.w	r1, r7, #28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 f961 	bl	8005168 <xQueueReceive>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f47f af33 	bne.w	8001d14 <vTaskQueueVelAngularReader+0xfc>
			}
		}

		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8001eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb2:	2164      	movs	r1, #100	@ 0x64
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fe8d 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001eba:	e726      	b.n	8001d0a <vTaskQueueVelAngularReader+0xf2>
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	55555555 	.word	0x55555555
 8001ec4:	3fe55555 	.word	0x3fe55555
 8001ec8:	40060a92 	.word	0x40060a92
 8001ecc:	40860a92 	.word	0x40860a92
 8001ed0:	20000ee8 	.word	0x20000ee8
 8001ed4:	20000e94 	.word	0x20000e94
 8001ed8:	20000eec 	.word	0x20000eec
 8001edc:	20000eb4 	.word	0x20000eb4
 8001ee0:	20000edc 	.word	0x20000edc

08001ee4 <vTaskQueuePosicaoReader>:
	}
}

// Leitura de dados de GPS da queue
void vTaskQueuePosicaoReader(void *p) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8001eec:	2301      	movs	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;
	dataset posicao;
	while (1) {
		xLastWakeTime = xTaskGetTickCount();
 8001ef0:	f004 f842 	bl	8005f78 <xTaskGetTickCount>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	61bb      	str	r3, [r7, #24]
		while(xQueueReceive(xQueuePosicao, &posicao, 0) != errQUEUE_EMPTY){
 8001ef8:	e016      	b.n	8001f28 <vTaskQueuePosicaoReader+0x44>
			if(xSemaphoreTake(xMutexPosicaoAtual, xMaxMutexDelay) == pdPASS){
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <vTaskQueuePosicaoReader+0x68>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69f9      	ldr	r1, [r7, #28]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa13 	bl	800532c <xQueueSemaphoreTake>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10d      	bne.n	8001f28 <vTaskQueuePosicaoReader+0x44>
				xPosicaoAtual = posicao;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <vTaskQueuePosicaoReader+0x6c>)
 8001f0e:	461c      	mov	r4, r3
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexPosicaoAtual);
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <vTaskQueuePosicaoReader+0x68>)
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	f002 ff80 	bl	8004e28 <xQueueGenericSend>
		while(xQueueReceive(xQueuePosicao, &posicao, 0) != errQUEUE_EMPTY){
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <vTaskQueuePosicaoReader+0x70>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f107 0108 	add.w	r1, r7, #8
 8001f30:	2200      	movs	r2, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f918 	bl	8005168 <xQueueReceive>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1dd      	bne.n	8001efa <vTaskQueuePosicaoReader+0x16>
			}
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(125));
 8001f3e:	f107 0318 	add.w	r3, r7, #24
 8001f42:	217d      	movs	r1, #125	@ 0x7d
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fe45 	bl	8005bd4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001f4a:	e7d1      	b.n	8001ef0 <vTaskQueuePosicaoReader+0xc>
 8001f4c:	20000ef0 	.word	0x20000ef0
 8001f50:	20000ea4 	.word	0x20000ea4
 8001f54:	20000ee0 	.word	0x20000ee0

08001f58 <inicializar>:
}

/* ======================FUNÇÕES AUXILIARES======================= */

// Inicialização da tela executada antes da inicialização do RTOS
void inicializar(void){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8001f5c:	f7ff f9a6 	bl	80012ac <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f7ff faad 	bl	80014c0 <ILI9341_SetRotation>
	baseTela(sTelaAtual);
 8001f66:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <inicializar+0x1c>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f8da 	bl	8002124 <baseTela>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000e14 	.word	0x20000e14

08001f78 <funcBaseTela1>:
		ILI9341_DrawText(textBuffer, FONT1, 31+(i*59), 202, WHITE, BLACK);
	}
}

// Base da Tela 1
void funcBaseTela1(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af02      	add	r7, sp, #8
	ILI9341_DrawText("Vel. Linear e Posicao", FONT4, 25, 11, WHITE, NAVY);
 8001f7e:	230f      	movs	r3, #15
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	230b      	movs	r3, #11
 8001f8a:	2219      	movs	r2, #25
 8001f8c:	4919      	ldr	r1, [pc, #100]	@ (8001ff4 <funcBaseTela1+0x7c>)
 8001f8e:	481a      	ldr	r0, [pc, #104]	@ (8001ff8 <funcBaseTela1+0x80>)
 8001f90:	f7ff f834 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Vel. X (cm/s):", FONT3, 25, 60, LIGHTBLUE, BLACK);
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	f248 63de 	movw	r3, #34526	@ 0x86de
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	233c      	movs	r3, #60	@ 0x3c
 8001fa0:	2219      	movs	r2, #25
 8001fa2:	4916      	ldr	r1, [pc, #88]	@ (8001ffc <funcBaseTela1+0x84>)
 8001fa4:	4816      	ldr	r0, [pc, #88]	@ (8002000 <funcBaseTela1+0x88>)
 8001fa6:	f7ff f829 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Vel. Y (cm/s)", FONT3, 25, 120, MAGENTA, BLACK);
 8001faa:	2300      	movs	r3, #0
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2378      	movs	r3, #120	@ 0x78
 8001fb6:	2219      	movs	r2, #25
 8001fb8:	4910      	ldr	r1, [pc, #64]	@ (8001ffc <funcBaseTela1+0x84>)
 8001fba:	4812      	ldr	r0, [pc, #72]	@ (8002004 <funcBaseTela1+0x8c>)
 8001fbc:	f7ff f81e 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Pos. X (cm):", FONT3, 165, 60, GREEN, BLACK);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	233c      	movs	r3, #60	@ 0x3c
 8001fcc:	22a5      	movs	r2, #165	@ 0xa5
 8001fce:	490b      	ldr	r1, [pc, #44]	@ (8001ffc <funcBaseTela1+0x84>)
 8001fd0:	480d      	ldr	r0, [pc, #52]	@ (8002008 <funcBaseTela1+0x90>)
 8001fd2:	f7ff f813 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Pos. Y (cm):", FONT3, 165, 120, DARKORANGE, BLACK);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	f64d 3384 	movw	r3, #56196	@ 0xdb84
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2378      	movs	r3, #120	@ 0x78
 8001fe2:	22a5      	movs	r2, #165	@ 0xa5
 8001fe4:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <funcBaseTela1+0x84>)
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <funcBaseTela1+0x94>)
 8001fe8:	f7ff f808 	bl	8000ffc <ILI9341_DrawText>
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	08009ee4 	.word	0x08009ee4
 8001ff8:	080094b0 	.word	0x080094b0
 8001ffc:	08009580 	.word	0x08009580
 8002000:	080094c8 	.word	0x080094c8
 8002004:	080094d8 	.word	0x080094d8
 8002008:	080094e8 	.word	0x080094e8
 800200c:	080094f8 	.word	0x080094f8

08002010 <funcBaseTela2>:

// Base da Tela 2
void funcBaseTela2(void){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
	ILI9341_DrawText("Velocidade Angular", FONT4, 25, 11, WHITE, NAVY);
 8002016:	230f      	movs	r3, #15
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	230b      	movs	r3, #11
 8002022:	2219      	movs	r2, #25
 8002024:	4919      	ldr	r1, [pc, #100]	@ (800208c <funcBaseTela2+0x7c>)
 8002026:	481a      	ldr	r0, [pc, #104]	@ (8002090 <funcBaseTela2+0x80>)
 8002028:	f7fe ffe8 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Motor 1:", FONT3, 25, 60, LIGHTBLUE, BLACK);
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	f248 63de 	movw	r3, #34526	@ 0x86de
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	233c      	movs	r3, #60	@ 0x3c
 8002038:	2219      	movs	r2, #25
 800203a:	4916      	ldr	r1, [pc, #88]	@ (8002094 <funcBaseTela2+0x84>)
 800203c:	4816      	ldr	r0, [pc, #88]	@ (8002098 <funcBaseTela2+0x88>)
 800203e:	f7fe ffdd 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Motor 2:", FONT3, 25, 120, MAGENTA, BLACK);
 8002042:	2300      	movs	r3, #0
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2378      	movs	r3, #120	@ 0x78
 800204e:	2219      	movs	r2, #25
 8002050:	4910      	ldr	r1, [pc, #64]	@ (8002094 <funcBaseTela2+0x84>)
 8002052:	4812      	ldr	r0, [pc, #72]	@ (800209c <funcBaseTela2+0x8c>)
 8002054:	f7fe ffd2 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Motor 3:", FONT3, 165, 60, GREEN, BLACK);
 8002058:	2300      	movs	r3, #0
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	233c      	movs	r3, #60	@ 0x3c
 8002064:	22a5      	movs	r2, #165	@ 0xa5
 8002066:	490b      	ldr	r1, [pc, #44]	@ (8002094 <funcBaseTela2+0x84>)
 8002068:	480d      	ldr	r0, [pc, #52]	@ (80020a0 <funcBaseTela2+0x90>)
 800206a:	f7fe ffc7 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("W:", FONT3, 165, 120, DARKORANGE, BLACK);
 800206e:	2300      	movs	r3, #0
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	f64d 3384 	movw	r3, #56196	@ 0xdb84
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2378      	movs	r3, #120	@ 0x78
 800207a:	22a5      	movs	r2, #165	@ 0xa5
 800207c:	4905      	ldr	r1, [pc, #20]	@ (8002094 <funcBaseTela2+0x84>)
 800207e:	4809      	ldr	r0, [pc, #36]	@ (80020a4 <funcBaseTela2+0x94>)
 8002080:	f7fe ffbc 	bl	8000ffc <ILI9341_DrawText>
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	08009ee4 	.word	0x08009ee4
 8002090:	08009508 	.word	0x08009508
 8002094:	08009580 	.word	0x08009580
 8002098:	0800951c 	.word	0x0800951c
 800209c:	08009528 	.word	0x08009528
 80020a0:	08009534 	.word	0x08009534
 80020a4:	08009540 	.word	0x08009540

080020a8 <funcBaseTela3>:

// Base da Tela 3
void funcBaseTela3(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af02      	add	r7, sp, #8
	ILI9341_DrawText("Velocidade Angular", FONT4, 25, 11, WHITE, NAVY);
 80020ae:	230f      	movs	r3, #15
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	230b      	movs	r3, #11
 80020ba:	2219      	movs	r2, #25
 80020bc:	4913      	ldr	r1, [pc, #76]	@ (800210c <funcBaseTela3+0x64>)
 80020be:	4814      	ldr	r0, [pc, #80]	@ (8002110 <funcBaseTela3+0x68>)
 80020c0:	f7fe ff9c 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Motor 1:", FONT3, 25, 60, LIGHTBLUE, BLACK);
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	f248 63de 	movw	r3, #34526	@ 0x86de
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	233c      	movs	r3, #60	@ 0x3c
 80020d0:	2219      	movs	r2, #25
 80020d2:	4910      	ldr	r1, [pc, #64]	@ (8002114 <funcBaseTela3+0x6c>)
 80020d4:	4810      	ldr	r0, [pc, #64]	@ (8002118 <funcBaseTela3+0x70>)
 80020d6:	f7fe ff91 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Motor 2:", FONT3, 25, 120, MAGENTA, BLACK);
 80020da:	2300      	movs	r3, #0
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2378      	movs	r3, #120	@ 0x78
 80020e6:	2219      	movs	r2, #25
 80020e8:	490a      	ldr	r1, [pc, #40]	@ (8002114 <funcBaseTela3+0x6c>)
 80020ea:	480c      	ldr	r0, [pc, #48]	@ (800211c <funcBaseTela3+0x74>)
 80020ec:	f7fe ff86 	bl	8000ffc <ILI9341_DrawText>
	ILI9341_DrawText("Motor 3:", FONT3, 165, 60, GREEN, BLACK);
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	233c      	movs	r3, #60	@ 0x3c
 80020fc:	22a5      	movs	r2, #165	@ 0xa5
 80020fe:	4905      	ldr	r1, [pc, #20]	@ (8002114 <funcBaseTela3+0x6c>)
 8002100:	4807      	ldr	r0, [pc, #28]	@ (8002120 <funcBaseTela3+0x78>)
 8002102:	f7fe ff7b 	bl	8000ffc <ILI9341_DrawText>
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	08009ee4 	.word	0x08009ee4
 8002110:	08009508 	.word	0x08009508
 8002114:	08009580 	.word	0x08009580
 8002118:	0800951c 	.word	0x0800951c
 800211c:	08009528 	.word	0x08009528
 8002120:	08009534 	.word	0x08009534

08002124 <baseTela>:

// Seleção de base de tela
void baseTela(uint16_t sNumTela){
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af02      	add	r7, sp, #8
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
	ILI9341_DrawRectangle(0, 36, 320, 204, BLACK);
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	23cc      	movs	r3, #204	@ 0xcc
 8002134:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002138:	2124      	movs	r1, #36	@ 0x24
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fb10 	bl	8001760 <ILI9341_DrawRectangle>
	ILI9341_DrawRectangle(0, 0, 320, 36, NAVY);
 8002140:	230f      	movs	r3, #15
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2324      	movs	r3, #36	@ 0x24
 8002146:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800214a:	2100      	movs	r1, #0
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fb07 	bl	8001760 <ILI9341_DrawRectangle>
	switch(sNumTela){
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d00c      	beq.n	8002172 <baseTela+0x4e>
 8002158:	2b03      	cmp	r3, #3
 800215a:	dc0d      	bgt.n	8002178 <baseTela+0x54>
 800215c:	2b01      	cmp	r3, #1
 800215e:	d002      	beq.n	8002166 <baseTela+0x42>
 8002160:	2b02      	cmp	r3, #2
 8002162:	d003      	beq.n	800216c <baseTela+0x48>
			break;
		case TELA3:
			funcBaseTela3();
			break;
		default:
			break;
 8002164:	e008      	b.n	8002178 <baseTela+0x54>
			funcBaseTela1();
 8002166:	f7ff ff07 	bl	8001f78 <funcBaseTela1>
			break;
 800216a:	e006      	b.n	800217a <baseTela+0x56>
			funcBaseTela2();
 800216c:	f7ff ff50 	bl	8002010 <funcBaseTela2>
			break;
 8002170:	e003      	b.n	800217a <baseTela+0x56>
			funcBaseTela3();
 8002172:	f7ff ff99 	bl	80020a8 <funcBaseTela3>
			break;
 8002176:	e000      	b.n	800217a <baseTela+0x56>
			break;
 8002178:	bf00      	nop
	}
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <funcDadosTela1>:

// Exibição de valores da tela 1
void funcDadosTela1(void){
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b091      	sub	sp, #68	@ 0x44
 8002188:	af02      	add	r7, sp, #8
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 800218a:	2301      	movs	r3, #1
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
	dataset velLinear;
	dataset posicao;
	char textBuffer[20];

	if(xSemaphoreTake(xMutexVelLinearAtual, xMaxMutexDelay) == pdPASS){
 800218e:	4b42      	ldr	r3, [pc, #264]	@ (8002298 <funcDadosTela1+0x114>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002194:	4618      	mov	r0, r3
 8002196:	f003 f8c9 	bl	800532c <xQueueSemaphoreTake>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d10c      	bne.n	80021ba <funcDadosTela1+0x36>
		velLinear = xVelLinearAtual;
 80021a0:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <funcDadosTela1+0x118>)
 80021a2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexVelLinearAtual);
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <funcDadosTela1+0x114>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	f002 fe37 	bl	8004e28 <xQueueGenericSend>
	}
	if(xSemaphoreTake(xMutexPosicaoAtual, xMaxMutexDelay) == pdPASS){
 80021ba:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <funcDadosTela1+0x11c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 f8b3 	bl	800532c <xQueueSemaphoreTake>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10c      	bne.n	80021e6 <funcDadosTela1+0x62>
		posicao = xPosicaoAtual;
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <funcDadosTela1+0x120>)
 80021ce:	f107 0414 	add.w	r4, r7, #20
 80021d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexPosicaoAtual);
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <funcDadosTela1+0x11c>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	2300      	movs	r3, #0
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	f002 fe21 	bl	8004e28 <xQueueGenericSend>
	}

	sprintf(textBuffer, "%.1f    ", velLinear.x);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f9ad 	bl	8000548 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4638      	mov	r0, r7
 80021f4:	492c      	ldr	r1, [pc, #176]	@ (80022a8 <funcDadosTela1+0x124>)
 80021f6:	f005 fb87 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 80, LIGHTBLUE, BLACK);
 80021fa:	4638      	mov	r0, r7
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	f248 63de 	movw	r3, #34526	@ 0x86de
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2350      	movs	r3, #80	@ 0x50
 8002208:	2219      	movs	r2, #25
 800220a:	4928      	ldr	r1, [pc, #160]	@ (80022ac <funcDadosTela1+0x128>)
 800220c:	f7fe fef6 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", velLinear.y);
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f998 	bl	8000548 <__aeabi_f2d>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4638      	mov	r0, r7
 800221e:	4922      	ldr	r1, [pc, #136]	@ (80022a8 <funcDadosTela1+0x124>)
 8002220:	f005 fb72 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 140, MAGENTA, BLACK);
 8002224:	4638      	mov	r0, r7
 8002226:	2300      	movs	r3, #0
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	238c      	movs	r3, #140	@ 0x8c
 8002232:	2219      	movs	r2, #25
 8002234:	491d      	ldr	r1, [pc, #116]	@ (80022ac <funcDadosTela1+0x128>)
 8002236:	f7fe fee1 	bl	8000ffc <ILI9341_DrawText>

	sprintf(textBuffer, "%.2f    ", posicao.x);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f983 	bl	8000548 <__aeabi_f2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4638      	mov	r0, r7
 8002248:	4919      	ldr	r1, [pc, #100]	@ (80022b0 <funcDadosTela1+0x12c>)
 800224a:	f005 fb5d 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 80, GREEN, BLACK);
 800224e:	4638      	mov	r0, r7
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2350      	movs	r3, #80	@ 0x50
 800225c:	22a5      	movs	r2, #165	@ 0xa5
 800225e:	4913      	ldr	r1, [pc, #76]	@ (80022ac <funcDadosTela1+0x128>)
 8002260:	f7fe fecc 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.2f    ", posicao.y);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f96e 	bl	8000548 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4638      	mov	r0, r7
 8002272:	490f      	ldr	r1, [pc, #60]	@ (80022b0 <funcDadosTela1+0x12c>)
 8002274:	f005 fb48 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 140, DARKORANGE, BLACK);
 8002278:	4638      	mov	r0, r7
 800227a:	2300      	movs	r3, #0
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	f64d 3384 	movw	r3, #56196	@ 0xdb84
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	238c      	movs	r3, #140	@ 0x8c
 8002286:	22a5      	movs	r2, #165	@ 0xa5
 8002288:	4908      	ldr	r1, [pc, #32]	@ (80022ac <funcDadosTela1+0x128>)
 800228a:	f7fe feb7 	bl	8000ffc <ILI9341_DrawText>
}
 800228e:	bf00      	nop
 8002290:	373c      	adds	r7, #60	@ 0x3c
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
 8002296:	bf00      	nop
 8002298:	20000ee8 	.word	0x20000ee8
 800229c:	20000e94 	.word	0x20000e94
 80022a0:	20000ef0 	.word	0x20000ef0
 80022a4:	20000ea4 	.word	0x20000ea4
 80022a8:	08009544 	.word	0x08009544
 80022ac:	08009ee4 	.word	0x08009ee4
 80022b0:	08009550 	.word	0x08009550

080022b4 <funcDadosTela2>:

// Exibição do gráfico da tela 2

void funcDadosTela2(void){
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b091      	sub	sp, #68	@ 0x44
 80022b8:	af02      	add	r7, sp, #8
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 80022ba:	2301      	movs	r3, #1
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
	dataset velAngular;
	dataset velLinear;
	char textBuffer[20];

	if(xSemaphoreTake(xMutexVelLinearAtual, xMaxMutexDelay) == pdPASS){
 80022be:	4b42      	ldr	r3, [pc, #264]	@ (80023c8 <funcDadosTela2+0x114>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f831 	bl	800532c <xQueueSemaphoreTake>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10c      	bne.n	80022ea <funcDadosTela2+0x36>
		velLinear = xVelLinearAtual;
 80022d0:	4b3e      	ldr	r3, [pc, #248]	@ (80023cc <funcDadosTela2+0x118>)
 80022d2:	f107 0414 	add.w	r4, r7, #20
 80022d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexVelLinearAtual);
 80022dc:	4b3a      	ldr	r3, [pc, #232]	@ (80023c8 <funcDadosTela2+0x114>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	2300      	movs	r3, #0
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	f002 fd9f 	bl	8004e28 <xQueueGenericSend>
	}
	if(xSemaphoreTake(xMutexVelAngularAtual, xMaxMutexDelay) == pdPASS){
 80022ea:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <funcDadosTela2+0x11c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f81b 	bl	800532c <xQueueSemaphoreTake>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10c      	bne.n	8002316 <funcDadosTela2+0x62>
		velAngular = xVelAngularAtual;
 80022fc:	4b35      	ldr	r3, [pc, #212]	@ (80023d4 <funcDadosTela2+0x120>)
 80022fe:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexVelAngularAtual);
 8002308:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <funcDadosTela2+0x11c>)
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	f002 fd89 	bl	8004e28 <xQueueGenericSend>
	}

	sprintf(textBuffer, "%.1f    ", velAngular.x);
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f915 	bl	8000548 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4638      	mov	r0, r7
 8002324:	492c      	ldr	r1, [pc, #176]	@ (80023d8 <funcDadosTela2+0x124>)
 8002326:	f005 faef 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 80, LIGHTBLUE, BLACK);
 800232a:	4638      	mov	r0, r7
 800232c:	2300      	movs	r3, #0
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	f248 63de 	movw	r3, #34526	@ 0x86de
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2350      	movs	r3, #80	@ 0x50
 8002338:	2219      	movs	r2, #25
 800233a:	4928      	ldr	r1, [pc, #160]	@ (80023dc <funcDadosTela2+0x128>)
 800233c:	f7fe fe5e 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", velAngular.y);
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe f900 	bl	8000548 <__aeabi_f2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4638      	mov	r0, r7
 800234e:	4922      	ldr	r1, [pc, #136]	@ (80023d8 <funcDadosTela2+0x124>)
 8002350:	f005 fada 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 140, MAGENTA, BLACK);
 8002354:	4638      	mov	r0, r7
 8002356:	2300      	movs	r3, #0
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	238c      	movs	r3, #140	@ 0x8c
 8002362:	2219      	movs	r2, #25
 8002364:	491d      	ldr	r1, [pc, #116]	@ (80023dc <funcDadosTela2+0x128>)
 8002366:	f7fe fe49 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", velAngular.z);
 800236a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f8eb 	bl	8000548 <__aeabi_f2d>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4638      	mov	r0, r7
 8002378:	4917      	ldr	r1, [pc, #92]	@ (80023d8 <funcDadosTela2+0x124>)
 800237a:	f005 fac5 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 80, YELLOW, BLACK);
 800237e:	4638      	mov	r0, r7
 8002380:	2300      	movs	r3, #0
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2350      	movs	r3, #80	@ 0x50
 800238c:	22a5      	movs	r2, #165	@ 0xa5
 800238e:	4913      	ldr	r1, [pc, #76]	@ (80023dc <funcDadosTela2+0x128>)
 8002390:	f7fe fe34 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.2f    ", velLinear.z);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_f2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4638      	mov	r0, r7
 80023a2:	490f      	ldr	r1, [pc, #60]	@ (80023e0 <funcDadosTela2+0x12c>)
 80023a4:	f005 fab0 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 140, GREEN, BLACK);
 80023a8:	4638      	mov	r0, r7
 80023aa:	2300      	movs	r3, #0
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	238c      	movs	r3, #140	@ 0x8c
 80023b6:	22a5      	movs	r2, #165	@ 0xa5
 80023b8:	4908      	ldr	r1, [pc, #32]	@ (80023dc <funcDadosTela2+0x128>)
 80023ba:	f7fe fe1f 	bl	8000ffc <ILI9341_DrawText>

}
 80023be:	bf00      	nop
 80023c0:	373c      	adds	r7, #60	@ 0x3c
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000ee8 	.word	0x20000ee8
 80023cc:	20000e94 	.word	0x20000e94
 80023d0:	20000eec 	.word	0x20000eec
 80023d4:	20000eb4 	.word	0x20000eb4
 80023d8:	08009544 	.word	0x08009544
 80023dc:	08009ee4 	.word	0x08009ee4
 80023e0:	08009550 	.word	0x08009550

080023e4 <funcDadosTela3>:

// Exibição do gráfico da tela 3
void funcDadosTela3(void){
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b08d      	sub	sp, #52	@ 0x34
 80023e8:	af02      	add	r7, sp, #8
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
	dataset corrente;
	char textBuffer[20];

	if(xSemaphoreTake(xMutexCorrenteAtual, xMaxMutexDelay) == pdPASS){
 80023ee:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <funcDadosTela3+0xbc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 ff99 	bl	800532c <xQueueSemaphoreTake>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10c      	bne.n	800241a <funcDadosTela3+0x36>
		corrente = xCorrenteAtual;
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <funcDadosTela3+0xc0>)
 8002402:	f107 0414 	add.w	r4, r7, #20
 8002406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexCorrenteAtual);
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <funcDadosTela3+0xbc>)
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	f002 fd07 	bl	8004e28 <xQueueGenericSend>
	}

	sprintf(textBuffer, "%.1f    ", corrente.x);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f893 	bl	8000548 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4638      	mov	r0, r7
 8002428:	491f      	ldr	r1, [pc, #124]	@ (80024a8 <funcDadosTela3+0xc4>)
 800242a:	f005 fa6d 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 80, LIGHTBLUE, BLACK);
 800242e:	4638      	mov	r0, r7
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	f248 63de 	movw	r3, #34526	@ 0x86de
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2350      	movs	r3, #80	@ 0x50
 800243c:	2219      	movs	r2, #25
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <funcDadosTela3+0xc8>)
 8002440:	f7fe fddc 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", corrente.y);
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f87e 	bl	8000548 <__aeabi_f2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4638      	mov	r0, r7
 8002452:	4915      	ldr	r1, [pc, #84]	@ (80024a8 <funcDadosTela3+0xc4>)
 8002454:	f005 fa58 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 140, MAGENTA, BLACK);
 8002458:	4638      	mov	r0, r7
 800245a:	2300      	movs	r3, #0
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	238c      	movs	r3, #140	@ 0x8c
 8002466:	2219      	movs	r2, #25
 8002468:	4910      	ldr	r1, [pc, #64]	@ (80024ac <funcDadosTela3+0xc8>)
 800246a:	f7fe fdc7 	bl	8000ffc <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", corrente.z);
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f869 	bl	8000548 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4638      	mov	r0, r7
 800247c:	490a      	ldr	r1, [pc, #40]	@ (80024a8 <funcDadosTela3+0xc4>)
 800247e:	f005 fa43 	bl	8007908 <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 80, YELLOW, BLACK);
 8002482:	4638      	mov	r0, r7
 8002484:	2300      	movs	r3, #0
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2350      	movs	r3, #80	@ 0x50
 8002490:	22a5      	movs	r2, #165	@ 0xa5
 8002492:	4906      	ldr	r1, [pc, #24]	@ (80024ac <funcDadosTela3+0xc8>)
 8002494:	f7fe fdb2 	bl	8000ffc <ILI9341_DrawText>
}
 8002498:	bf00      	nop
 800249a:	372c      	adds	r7, #44	@ 0x2c
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	20000ee4 	.word	0x20000ee4
 80024a4:	20000ec4 	.word	0x20000ec4
 80024a8:	08009544 	.word	0x08009544
 80024ac:	08009ee4 	.word	0x08009ee4

080024b0 <dadosTela>:

// Exibição de dados na tela
void dadosTela(uint16_t sNumTela){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
	switch(sNumTela){
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d00c      	beq.n	80024da <dadosTela+0x2a>
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	dc0d      	bgt.n	80024e0 <dadosTela+0x30>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d002      	beq.n	80024ce <dadosTela+0x1e>
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d003      	beq.n	80024d4 <dadosTela+0x24>
			break;
		case TELA3:
			funcDadosTela3();
			break;
		default:
			break;
 80024cc:	e008      	b.n	80024e0 <dadosTela+0x30>
			funcDadosTela1();
 80024ce:	f7ff fe59 	bl	8002184 <funcDadosTela1>
			break;
 80024d2:	e006      	b.n	80024e2 <dadosTela+0x32>
			funcDadosTela2();
 80024d4:	f7ff feee 	bl	80022b4 <funcDadosTela2>
			break;
 80024d8:	e003      	b.n	80024e2 <dadosTela+0x32>
			funcDadosTela3();
 80024da:	f7ff ff83 	bl	80023e4 <funcDadosTela3>
			break;
 80024de:	e000      	b.n	80024e2 <dadosTela+0x32>
			break;
 80024e0:	bf00      	nop
	}
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024f0:	f000 fab8 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f4:	f000 f81c 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f8:	f000 f8ae 	bl	8002658 <MX_GPIO_Init>
  MX_SPI1_Init();
 80024fc:	f000 f876 	bl	80025ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  inicializar();
 8002500:	f7ff fd2a 	bl	8001f58 <inicializar>
  userRTOS();
 8002504:	f7ff f988 	bl	8001818 <userRTOS>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002508:	f002 f936 	bl	8004778 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800250c:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <main+0x38>)
 800250e:	2100      	movs	r1, #0
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <main+0x3c>)
 8002512:	f002 f97b 	bl	800480c <osThreadNew>
 8002516:	4603      	mov	r3, r0
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <main+0x40>)
 800251a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800251c:	f002 f950 	bl	80047c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <main+0x34>
 8002524:	0800b028 	.word	0x0800b028
 8002528:	08002729 	.word	0x08002729
 800252c:	20000f4c 	.word	0x20000f4c

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b094      	sub	sp, #80	@ 0x50
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	f107 0320 	add.w	r3, r7, #32
 800253a:	2230      	movs	r2, #48	@ 0x30
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fa02 	bl	8007948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <SystemClock_Config+0xb4>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4a21      	ldr	r2, [pc, #132]	@ (80025e4 <SystemClock_Config+0xb4>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002562:	6413      	str	r3, [r2, #64]	@ 0x40
 8002564:	4b1f      	ldr	r3, [pc, #124]	@ (80025e4 <SystemClock_Config+0xb4>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002570:	2300      	movs	r3, #0
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <SystemClock_Config+0xb8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <SystemClock_Config+0xb8>)
 800257a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <SystemClock_Config+0xb8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258c:	2302      	movs	r3, #2
 800258e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002594:	2310      	movs	r3, #16
 8002596:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002598:	2300      	movs	r3, #0
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259c:	f107 0320 	add.w	r3, r7, #32
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fdcb 	bl	800313c <HAL_RCC_OscConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80025ac:	f000 f8d6 	bl	800275c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b0:	230f      	movs	r3, #15
 80025b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 f82e 	bl	800362c <HAL_RCC_ClockConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80025d6:	f000 f8c1 	bl	800275c <Error_Handler>
  }
}
 80025da:	bf00      	nop
 80025dc:	3750      	adds	r7, #80	@ 0x50
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000

080025ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_SPI1_Init+0x64>)
 80025f2:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <MX_SPI1_Init+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f6:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <MX_SPI1_Init+0x64>)
 80025f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <MX_SPI1_Init+0x64>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800261c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002620:	2200      	movs	r2, #0
 8002622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <MX_SPI1_Init+0x64>)
 800262c:	2200      	movs	r2, #0
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <MX_SPI1_Init+0x64>)
 8002638:	220a      	movs	r2, #10
 800263a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <MX_SPI1_Init+0x64>)
 800263e:	f001 f9f3 	bl	8003a28 <HAL_SPI_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002648:	f000 f888 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000ef4 	.word	0x20000ef4
 8002654:	40013000 	.word	0x40013000

08002658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <MX_GPIO_Init+0xc4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a29      	ldr	r2, [pc, #164]	@ (800271c <MX_GPIO_Init+0xc4>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b27      	ldr	r3, [pc, #156]	@ (800271c <MX_GPIO_Init+0xc4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	4b23      	ldr	r3, [pc, #140]	@ (800271c <MX_GPIO_Init+0xc4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a22      	ldr	r2, [pc, #136]	@ (800271c <MX_GPIO_Init+0xc4>)
 8002694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <MX_GPIO_Init+0xc4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <MX_GPIO_Init+0xc4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <MX_GPIO_Init+0xc4>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b19      	ldr	r3, [pc, #100]	@ (800271c <MX_GPIO_Init+0xc4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026c8:	4815      	ldr	r0, [pc, #84]	@ (8002720 <MX_GPIO_Init+0xc8>)
 80026ca:	f000 fd1d 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 80026ce:	2201      	movs	r2, #1
 80026d0:	211c      	movs	r1, #28
 80026d2:	4814      	ldr	r0, [pc, #80]	@ (8002724 <MX_GPIO_Init+0xcc>)
 80026d4:	f000 fd18 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	4619      	mov	r1, r3
 80026f0:	480b      	ldr	r0, [pc, #44]	@ (8002720 <MX_GPIO_Init+0xc8>)
 80026f2:	f000 fb85 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin;
 80026f6:	231c      	movs	r3, #28
 80026f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	@ (8002724 <MX_GPIO_Init+0xcc>)
 800270e:	f000 fb77 	bl	8002e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40020800 	.word	0x40020800
 8002724:	40020000 	.word	0x40020000

08002728 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002730:	2001      	movs	r0, #1
 8002732:	f002 f8fd 	bl	8004930 <osDelay>
 8002736:	e7fb      	b.n	8002730 <StartDefaultTask+0x8>

08002738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800274a:	f000 f9ad 	bl	8002aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000

0800275c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002760:	b672      	cpsid	i
}
 8002762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <Error_Handler+0x8>

08002768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_MspInit+0x54>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	4a11      	ldr	r2, [pc, #68]	@ (80027bc <HAL_MspInit+0x54>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800277c:	6453      	str	r3, [r2, #68]	@ 0x44
 800277e:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <HAL_MspInit+0x54>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_MspInit+0x54>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <HAL_MspInit+0x54>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	@ 0x40
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <HAL_MspInit+0x54>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	210f      	movs	r1, #15
 80027aa:	f06f 0001 	mvn.w	r0, #1
 80027ae:	f000 fa77 	bl	8002ca0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <HAL_SPI_MspInit+0x84>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d12b      	bne.n	800283a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <HAL_SPI_MspInit+0x88>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	4a17      	ldr	r2, [pc, #92]	@ (8002848 <HAL_SPI_MspInit+0x88>)
 80027ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <HAL_SPI_MspInit+0x88>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <HAL_SPI_MspInit+0x88>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a10      	ldr	r2, [pc, #64]	@ (8002848 <HAL_SPI_MspInit+0x88>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_SPI_MspInit+0x88>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800281a:	23e0      	movs	r3, #224	@ 0xe0
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800282a:	2305      	movs	r3, #5
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	@ (800284c <HAL_SPI_MspInit+0x8c>)
 8002836:	f000 fae3 	bl	8002e00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	@ 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40013000 	.word	0x40013000
 8002848:	40023800 	.word	0x40023800
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	@ 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <HAL_InitTick+0xd0>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	4a2d      	ldr	r2, [pc, #180]	@ (8002920 <HAL_InitTick+0xd0>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002870:	4b2b      	ldr	r3, [pc, #172]	@ (8002920 <HAL_InitTick+0xd0>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800287c:	f107 020c 	add.w	r2, r7, #12
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f89c 	bl	80039c4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800288c:	f001 f886 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8002890:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002894:	4a23      	ldr	r2, [pc, #140]	@ (8002924 <HAL_InitTick+0xd4>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	3b01      	subs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028a0:	4b21      	ldr	r3, [pc, #132]	@ (8002928 <HAL_InitTick+0xd8>)
 80028a2:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_InitTick+0xdc>)
 80028a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028a6:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_InitTick+0xd8>)
 80028a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002928 <HAL_InitTick+0xd8>)
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <HAL_InitTick+0xd8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <HAL_InitTick+0xd8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <HAL_InitTick+0xd8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028c6:	4818      	ldr	r0, [pc, #96]	@ (8002928 <HAL_InitTick+0xd8>)
 80028c8:	f001 fc9e 	bl	8004208 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80028d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11b      	bne.n	8002912 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028da:	4813      	ldr	r0, [pc, #76]	@ (8002928 <HAL_InitTick+0xd8>)
 80028dc:	f001 fcee 	bl	80042bc <HAL_TIM_Base_Start_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80028e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d111      	bne.n	8002912 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028ee:	2019      	movs	r0, #25
 80028f0:	f000 f9f2 	bl	8002cd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	d808      	bhi.n	800290c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80028fa:	2200      	movs	r2, #0
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	2019      	movs	r0, #25
 8002900:	f000 f9ce 	bl	8002ca0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_InitTick+0xe0>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e002      	b.n	8002912 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002916:	4618      	mov	r0, r3
 8002918:	3730      	adds	r7, #48	@ 0x30
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	431bde83 	.word	0x431bde83
 8002928:	20000f50 	.word	0x20000f50
 800292c:	40010000 	.word	0x40010000
 8002930:	20000e1c 	.word	0x20000e1c

08002934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <NMI_Handler+0x4>

0800293c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <MemManage_Handler+0x4>

0800294c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <UsageFault_Handler+0x4>

0800295c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002972:	f001 fd05 	bl	8004380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000f50 	.word	0x20000f50

08002980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <_sbrk+0x5c>)
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <_sbrk+0x60>)
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <_sbrk+0x64>)
 800299e:	4a12      	ldr	r2, [pc, #72]	@ (80029e8 <_sbrk+0x68>)
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b0:	f005 f828 	bl	8007a04 <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	220c      	movs	r2, #12
 80029b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029be:	e009      	b.n	80029d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <_sbrk+0x64>)
 80029d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20020000 	.word	0x20020000
 80029e0:	00000400 	.word	0x00000400
 80029e4:	20000f98 	.word	0x20000f98
 80029e8:	20005ad0 	.word	0x20005ad0

080029ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <SystemInit+0x20>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <SystemInit+0x20>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a14:	f7ff ffea 	bl	80029ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480c      	ldr	r0, [pc, #48]	@ (8002a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a1a:	490d      	ldr	r1, [pc, #52]	@ (8002a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a30:	4c0a      	ldr	r4, [pc, #40]	@ (8002a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f004 ffe7 	bl	8007a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7ff fd53 	bl	80024ec <main>
  bx  lr    
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	20000e78 	.word	0x20000e78
  ldr r2, =_sidata
 8002a54:	0800b280 	.word	0x0800b280
  ldr r2, =_sbss
 8002a58:	20000e78 	.word	0x20000e78
  ldr r4, =_ebss
 8002a5c:	20005ad0 	.word	0x20005ad0

08002a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <HAL_Init+0x40>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <HAL_Init+0x40>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	@ (8002aa4 <HAL_Init+0x40>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 f8fc 	bl	8002c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	200f      	movs	r0, #15
 8002a94:	f7ff fedc 	bl	8002850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fe66 	bl	8002768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000e20 	.word	0x20000e20
 8002acc:	20000f9c 	.word	0x20000f9c

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	@ (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000f9c 	.word	0x20000f9c

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000e20 	.word	0x20000e20

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	@ (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	@ (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff4c 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb2:	f7ff ff61 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	6978      	ldr	r0, [r7, #20]
 8002cbe:	f7ff ffb1 	bl	8002c24 <NVIC_EncodePriority>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff80 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff54 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_DMA_Start_IT+0x26>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e040      	b.n	8002d9c <HAL_DMA_Start_IT+0xa8>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d12f      	bne.n	8002d8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f82e 	bl	8002da4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	223f      	movs	r2, #63	@ 0x3f
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0216 	orr.w	r2, r2, #22
 8002d62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0208 	orr.w	r2, r2, #8
 8002d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e005      	b.n	8002d9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b40      	cmp	r3, #64	@ 0x40
 8002dd0:	d108      	bne.n	8002de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002de2:	e007      	b.n	8002df4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	@ 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e159      	b.n	80030d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	f040 8148 	bne.w	80030ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d005      	beq.n	8002e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d130      	bne.n	8002eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 0201 	and.w	r2, r3, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d017      	beq.n	8002ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d123      	bne.n	8002f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3208      	adds	r2, #8
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	08da      	lsrs	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3208      	adds	r2, #8
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a2 	beq.w	80030ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f96:	4b54      	ldr	r3, [pc, #336]	@ (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fa2:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_GPIO_Init+0x2ec>)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a49      	ldr	r2, [pc, #292]	@ (80030f0 <HAL_GPIO_Init+0x2f0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x202>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a48      	ldr	r2, [pc, #288]	@ (80030f4 <HAL_GPIO_Init+0x2f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x1fe>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a47      	ldr	r2, [pc, #284]	@ (80030f8 <HAL_GPIO_Init+0x2f8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a46      	ldr	r2, [pc, #280]	@ (80030fc <HAL_GPIO_Init+0x2fc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x1f6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	@ (8003100 <HAL_GPIO_Init+0x300>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x1f2>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	e008      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e004      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8003002:	2300      	movs	r3, #0
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f002 0203 	and.w	r2, r2, #3
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	4093      	lsls	r3, r2
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003014:	4935      	ldr	r1, [pc, #212]	@ (80030ec <HAL_GPIO_Init+0x2ec>)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003046:	4a2f      	ldr	r2, [pc, #188]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800304c:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_GPIO_Init+0x304>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003070:	4a24      	ldr	r2, [pc, #144]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003076:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800309a:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <HAL_GPIO_Init+0x304>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a0:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <HAL_GPIO_Init+0x304>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003104 <HAL_GPIO_Init+0x304>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	f67f aea2 	bls.w	8002e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40013800 	.word	0x40013800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40020400 	.word	0x40020400
 80030f8:	40020800 	.word	0x40020800
 80030fc:	40020c00 	.word	0x40020c00
 8003100:	40021000 	.word	0x40021000
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e267      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	4b88      	ldr	r3, [pc, #544]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d00c      	beq.n	8003180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b85      	ldr	r3, [pc, #532]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316e:	2b08      	cmp	r3, #8
 8003170:	d112      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05b      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d157      	bne.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e242      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x74>
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a75      	ldr	r2, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6f      	ldr	r2, [pc, #444]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031d4:	4b69      	ldr	r3, [pc, #420]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b66      	ldr	r3, [pc, #408]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7ff fc6c 	bl	8002ad0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7ff fc68 	bl	8002ad0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	@ 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e207      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xc0>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff fc58 	bl	8002ad0 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003224:	f7ff fc54 	bl	8002ad0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1f3      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c7      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	e03a      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7ff fc0d 	bl	8002ad0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7ff fc09 	bl	8002ad0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1a8      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4925      	ldr	r1, [pc, #148]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff fbec 	bl	8002ad0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fc:	f7ff fbe8 	bl	8002ad0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e187      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d036      	beq.n	8003394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff fbcc 	bl	8002ad0 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff fbc8 	bl	8002ad0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e167      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x200>
 800335a:	e01b      	b.n	8003394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7ff fbb5 	bl	8002ad0 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	e00e      	b.n	8003388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336a:	f7ff fbb1 	bl	8002ad0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e150      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ea      	bne.n	800336a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8097 	beq.w	80034d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b81      	ldr	r3, [pc, #516]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a7c      	ldr	r2, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b77      	ldr	r3, [pc, #476]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b74      	ldr	r3, [pc, #464]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7ff fb71 	bl	8002ad0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7ff fb6d 	bl	8002ad0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e10c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x2ea>
 8003418:	4b64      	ldr	r3, [pc, #400]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x30c>
 800342e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5e      	ldr	r2, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003448:	4b58      	ldr	r3, [pc, #352]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a54      	ldr	r2, [pc, #336]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff fb32 	bl	8002ad0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff fb2e 	bl	8002ad0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0cb      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ee      	beq.n	8003470 <HAL_RCC_OscConfig+0x334>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7ff fb1c 	bl	8002ad0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7ff fb18 	bl	8002ad0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0b5      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a1 	beq.w	800361c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d05c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d141      	bne.n	8003572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff faec 	bl	8002ad0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff fae8 	bl	8002ad0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e087      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	491b      	ldr	r1, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7ff fac1 	bl	8002ad0 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003552:	f7ff fabd 	bl	8002ad0 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e05c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x416>
 8003570:	e054      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7ff faaa 	bl	8002ad0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7ff faa6 	bl	8002ad0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e045      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x444>
 800359e:	e03d      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e038      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x4ec>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11a      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cc      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d044      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e067      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4934      	ldr	r1, [pc, #208]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7ff f9d8 	bl	8002ad0 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7ff f9d4 	bl	8002ad0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e04f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d20c      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f83c 	bl	8002850 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	0800b04c 	.word	0x0800b04c
 80037f0:	20000e18 	.word	0x20000e18
 80037f4:	20000e1c 	.word	0x20000e1c

080037f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037fc:	b090      	sub	sp, #64	@ 0x40
 80037fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
 8003804:	2300      	movs	r3, #0
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003808:	2300      	movs	r3, #0
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003810:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d00d      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 800381c:	2b08      	cmp	r3, #8
 800381e:	f200 80a1 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x16c>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x34>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x3a>
 800382a:	e09b      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_GetSysClockFreq+0x184>)
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003830:	e09b      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003836:	e098      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b4f      	ldr	r3, [pc, #316]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003840:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003842:	4b4d      	ldr	r3, [pc, #308]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b4a      	ldr	r3, [pc, #296]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	2200      	movs	r2, #0
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	627a      	str	r2, [r7, #36]	@ 0x24
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003860:	2100      	movs	r1, #0
 8003862:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003864:	fb03 f201 	mul.w	r2, r3, r1
 8003868:	2300      	movs	r3, #0
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	4413      	add	r3, r2
 8003870:	4a43      	ldr	r2, [pc, #268]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x188>)
 8003872:	fba0 1202 	umull	r1, r2, r0, r2
 8003876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003878:	460a      	mov	r2, r1
 800387a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800387c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387e:	4413      	add	r3, r2
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	2200      	movs	r2, #0
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	61fa      	str	r2, [r7, #28]
 800388a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003892:	f7fd f9c3 	bl	8000c1c <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4613      	mov	r3, r2
 800389c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800389e:	e053      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a0:	4b35      	ldr	r3, [pc, #212]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	2200      	movs	r2, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	617a      	str	r2, [r7, #20]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038b2:	f04f 0b00 	mov.w	fp, #0
 80038b6:	4652      	mov	r2, sl
 80038b8:	465b      	mov	r3, fp
 80038ba:	f04f 0000 	mov.w	r0, #0
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	0159      	lsls	r1, r3, #5
 80038c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c8:	0150      	lsls	r0, r2, #5
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	ebb2 080a 	subs.w	r8, r2, sl
 80038d2:	eb63 090b 	sbc.w	r9, r3, fp
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ea:	ebb2 0408 	subs.w	r4, r2, r8
 80038ee:	eb63 0509 	sbc.w	r5, r3, r9
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	00eb      	lsls	r3, r5, #3
 80038fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003900:	00e2      	lsls	r2, r4, #3
 8003902:	4614      	mov	r4, r2
 8003904:	461d      	mov	r5, r3
 8003906:	eb14 030a 	adds.w	r3, r4, sl
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	eb45 030b 	adc.w	r3, r5, fp
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391e:	4629      	mov	r1, r5
 8003920:	028b      	lsls	r3, r1, #10
 8003922:	4621      	mov	r1, r4
 8003924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003928:	4621      	mov	r1, r4
 800392a:	028a      	lsls	r2, r1, #10
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003932:	2200      	movs	r2, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	60fa      	str	r2, [r7, #12]
 8003938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800393c:	f7fd f96e 	bl	8000c1c <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x180>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetSysClockFreq+0x184>)
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800396c:	4618      	mov	r0, r3
 800396e:	3740      	adds	r7, #64	@ 0x40
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	017d7840 	.word	0x017d7840

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000e18 	.word	0x20000e18

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0b5b      	lsrs	r3, r3, #13
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	0800b05c 	.word	0x0800b05c

080039c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	220f      	movs	r2, #15
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039d4:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039f8:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a06:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <HAL_RCC_GetClockConfig+0x60>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0207 	and.w	r2, r3, #7
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40023c00 	.word	0x40023c00

08003a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07b      	b.n	8003b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
 8003a52:	e005      	b.n	8003a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe fea0 	bl	80027c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 0104 	and.w	r1, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	f003 0210 	and.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b088      	sub	sp, #32
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_SPI_Transmit+0x22>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e12d      	b.n	8003db8 <HAL_SPI_Transmit+0x27e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b64:	f7fe ffb4 	bl	8002ad0 <HAL_GetTick>
 8003b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b7e:	e116      	b.n	8003dae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Transmit+0x52>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b90:	e10d      	b.n	8003dae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd8:	d10f      	bne.n	8003bfa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b40      	cmp	r3, #64	@ 0x40
 8003c06:	d007      	beq.n	8003c18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c20:	d14f      	bne.n	8003cc2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0xf6>
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d142      	bne.n	8003cb6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c54:	e02f      	b.n	8003cb6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d112      	bne.n	8003c8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c88:	e015      	b.n	8003cb6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8a:	f7fe ff21 	bl	8002ad0 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d803      	bhi.n	8003ca2 <HAL_SPI_Transmit+0x168>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ca0:	d102      	bne.n	8003ca8 <HAL_SPI_Transmit+0x16e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003cb4:	e07b      	b.n	8003dae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ca      	bne.n	8003c56 <HAL_SPI_Transmit+0x11c>
 8003cc0:	e050      	b.n	8003d64 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x196>
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d144      	bne.n	8003d5a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cf6:	e030      	b.n	8003d5a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d113      	bne.n	8003d2e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	7812      	ldrb	r2, [r2, #0]
 8003d12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d2c:	e015      	b.n	8003d5a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2e:	f7fe fecf 	bl	8002ad0 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d803      	bhi.n	8003d46 <HAL_SPI_Transmit+0x20c>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d44:	d102      	bne.n	8003d4c <HAL_SPI_Transmit+0x212>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d58:	e029      	b.n	8003dae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1c9      	bne.n	8003cf8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	6839      	ldr	r1, [r7, #0]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9f9 	bl	8004160 <SPI_EndRxTxTransaction>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e003      	b.n	8003dae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003db6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_SPI_Transmit_DMA+0x20>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e097      	b.n	8003f10 <HAL_SPI_Transmit_DMA+0x150>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003df8:	e085      	b.n	8003f06 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_SPI_Transmit_DMA+0x46>
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e0a:	e07c      	b.n	8003f06 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2203      	movs	r2, #3
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e52:	d10f      	bne.n	8003e74 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e78:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <HAL_SPI_Transmit_DMA+0x158>)
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e80:	4a26      	ldr	r2, [pc, #152]	@ (8003f1c <HAL_SPI_Transmit_DMA+0x15c>)
 8003e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e88:	4a25      	ldr	r2, [pc, #148]	@ (8003f20 <HAL_SPI_Transmit_DMA+0x160>)
 8003e8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eaa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003eac:	f7fe ff22 	bl	8002cf4 <HAL_DMA_Start_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003ec6:	e01e      	b.n	8003f06 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d007      	beq.n	8003ee6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0220 	orr.w	r2, r2, #32
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0202 	orr.w	r2, r2, #2
 8003f04:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	08003ff5 	.word	0x08003ff5
 8003f1c:	08003f4d 	.word	0x08003f4d
 8003f20:	08004011 	.word	0x08004011

08003f24 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5a:	f7fe fdb9 	bl	8002ad0 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f6e:	d03b      	beq.n	8003fe8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0220 	bic.w	r2, r2, #32
 8003f7e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0202 	bic.w	r2, r2, #2
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	2164      	movs	r1, #100	@ 0x64
 8003f94:	6978      	ldr	r0, [r7, #20]
 8003f96:	f000 f8e3 	bl	8004160 <SPI_EndRxTxTransaction>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fe0:	6978      	ldr	r0, [r7, #20]
 8003fe2:	f7ff ffa9 	bl	8003f38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fe6:	e002      	b.n	8003fee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f7fd f851 	bl	8001090 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff ff8e 	bl	8003f24 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0203 	bic.w	r2, r2, #3
 800402c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff ff78 	bl	8003f38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004060:	f7fe fd36 	bl	8002ad0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4413      	add	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004070:	f7fe fd2e 	bl	8002ad0 <HAL_GetTick>
 8004074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004076:	4b39      	ldr	r3, [pc, #228]	@ (800415c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	015b      	lsls	r3, r3, #5
 800407c:	0d1b      	lsrs	r3, r3, #20
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004086:	e054      	b.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800408e:	d050      	beq.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004090:	f7fe fd1e 	bl	8002ad0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	d902      	bls.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d13d      	bne.n	8004122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040be:	d111      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	d004      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d2:	d107      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ec:	d10f      	bne.n	800410e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800410c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e017      	b.n	8004152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3b01      	subs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	429a      	cmp	r2, r3
 800414e:	d19b      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000e18 	.word	0x20000e18

08004160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2201      	movs	r2, #1
 8004174:	2102      	movs	r1, #2
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ff6a 	bl	8004050 <SPI_WaitFlagStateUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e032      	b.n	80041f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004192:	4b1b      	ldr	r3, [pc, #108]	@ (8004200 <SPI_EndRxTxTransaction+0xa0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1b      	ldr	r2, [pc, #108]	@ (8004204 <SPI_EndRxTxTransaction+0xa4>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	0d5b      	lsrs	r3, r3, #21
 800419e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b0:	d112      	bne.n	80041d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	@ 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff47 	bl	8004050 <SPI_WaitFlagStateUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e00f      	b.n	80041f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ee:	2b80      	cmp	r3, #128	@ 0x80
 80041f0:	d0f2      	beq.n	80041d8 <SPI_EndRxTxTransaction+0x78>
 80041f2:	e000      	b.n	80041f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80041f4:	bf00      	nop
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000e18 	.word	0x20000e18
 8004204:	165e9f81 	.word	0x165e9f81

08004208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e041      	b.n	800429e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f839 	bl	80042a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 f9b2 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e044      	b.n	800435e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	@ (800436c <HAL_TIM_Base_Start_IT+0xb0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fe:	d013      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1a      	ldr	r2, [pc, #104]	@ (8004370 <HAL_TIM_Base_Start_IT+0xb4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a19      	ldr	r2, [pc, #100]	@ (8004374 <HAL_TIM_Base_Start_IT+0xb8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_TIM_Base_Start_IT+0xbc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x6c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a16      	ldr	r2, [pc, #88]	@ (800437c <HAL_TIM_Base_Start_IT+0xc0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d111      	bne.n	800434c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b06      	cmp	r3, #6
 8004338:	d010      	beq.n	800435c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	e007      	b.n	800435c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40010000 	.word	0x40010000
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00
 800437c:	40014000 	.word	0x40014000

08004380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0202 	mvn.w	r2, #2
 80043b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8d2 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8c4 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8d5 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d020      	beq.n	8004430 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01b      	beq.n	8004430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0204 	mvn.w	r2, #4
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8ac 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f89e 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8af 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0208 	mvn.w	r2, #8
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2204      	movs	r2, #4
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f886 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f878 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f889 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d020      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01b      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f860 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f852 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f863 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0201 	mvn.w	r2, #1
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fe f926 	bl	8002738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8e6 	bl	80046dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800452c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f834 	bl	800459c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00c      	beq.n	8004558 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0220 	mvn.w	r2, #32
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8b8 	bl	80046c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3a      	ldr	r2, [pc, #232]	@ (80046ac <TIM_Base_SetConfig+0xfc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00f      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ce:	d00b      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a37      	ldr	r2, [pc, #220]	@ (80046b0 <TIM_Base_SetConfig+0x100>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a36      	ldr	r2, [pc, #216]	@ (80046b4 <TIM_Base_SetConfig+0x104>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a35      	ldr	r2, [pc, #212]	@ (80046b8 <TIM_Base_SetConfig+0x108>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d108      	bne.n	80045fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2b      	ldr	r2, [pc, #172]	@ (80046ac <TIM_Base_SetConfig+0xfc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01b      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004608:	d017      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a28      	ldr	r2, [pc, #160]	@ (80046b0 <TIM_Base_SetConfig+0x100>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a27      	ldr	r2, [pc, #156]	@ (80046b4 <TIM_Base_SetConfig+0x104>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a26      	ldr	r2, [pc, #152]	@ (80046b8 <TIM_Base_SetConfig+0x108>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a25      	ldr	r2, [pc, #148]	@ (80046bc <TIM_Base_SetConfig+0x10c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a24      	ldr	r2, [pc, #144]	@ (80046c0 <TIM_Base_SetConfig+0x110>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a23      	ldr	r2, [pc, #140]	@ (80046c4 <TIM_Base_SetConfig+0x114>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0e      	ldr	r2, [pc, #56]	@ (80046ac <TIM_Base_SetConfig+0xfc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d103      	bne.n	8004680 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d105      	bne.n	800469e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]
  }
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800

080046c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <__NVIC_SetPriority>:
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0a      	blt.n	800471a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	490c      	ldr	r1, [pc, #48]	@ (800473c <__NVIC_SetPriority+0x4c>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	440b      	add	r3, r1
 8004714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004718:	e00a      	b.n	8004730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4908      	ldr	r1, [pc, #32]	@ (8004740 <__NVIC_SetPriority+0x50>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3b04      	subs	r3, #4
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	440b      	add	r3, r1
 800472e:	761a      	strb	r2, [r3, #24]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <SysTick_Handler+0x1c>)
 800474a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800474c:	f001 ff5c 	bl	8006608 <xTaskGetSchedulerState>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d001      	beq.n	800475a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004756:	f002 fe57 	bl	8007408 <xPortSysTickHandler>
  }
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010

08004764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004768:	2100      	movs	r1, #0
 800476a:	f06f 0004 	mvn.w	r0, #4
 800476e:	f7ff ffbf 	bl	80046f0 <__NVIC_SetPriority>
#endif
}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	603b      	str	r3, [r7, #0]
  return(result);
 8004784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800478a:	f06f 0305 	mvn.w	r3, #5
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	e00c      	b.n	80047ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004792:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <osKernelInitialize+0x44>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800479a:	4b08      	ldr	r3, [pc, #32]	@ (80047bc <osKernelInitialize+0x44>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	e002      	b.n	80047ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80047ac:	687b      	ldr	r3, [r7, #4]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000fa0 	.word	0x20000fa0

080047c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c6:	f3ef 8305 	mrs	r3, IPSR
 80047ca:	603b      	str	r3, [r7, #0]
  return(result);
 80047cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <osKernelStart+0x1a>
    stat = osErrorISR;
 80047d2:	f06f 0305 	mvn.w	r3, #5
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	e010      	b.n	80047fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <osKernelStart+0x48>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d109      	bne.n	80047f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80047e2:	f7ff ffbf 	bl	8004764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <osKernelStart+0x48>)
 80047e8:	2202      	movs	r2, #2
 80047ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80047ec:	f001 faa8 	bl	8005d40 <vTaskStartScheduler>
      stat = osOK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	e002      	b.n	80047fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80047fc:	687b      	ldr	r3, [r7, #4]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000fa0 	.word	0x20000fa0

0800480c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b08e      	sub	sp, #56	@ 0x38
 8004810:	af04      	add	r7, sp, #16
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800481c:	f3ef 8305 	mrs	r3, IPSR
 8004820:	617b      	str	r3, [r7, #20]
  return(result);
 8004822:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004824:	2b00      	cmp	r3, #0
 8004826:	d17e      	bne.n	8004926 <osThreadNew+0x11a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d07b      	beq.n	8004926 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004832:	2318      	movs	r3, #24
 8004834:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800483e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d045      	beq.n	80048d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <osThreadNew+0x48>
        name = attr->name;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <osThreadNew+0x6e>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b38      	cmp	r3, #56	@ 0x38
 800486c:	d805      	bhi.n	800487a <osThreadNew+0x6e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <osThreadNew+0x72>
        return (NULL);
 800487a:	2300      	movs	r3, #0
 800487c:	e054      	b.n	8004928 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <osThreadNew+0xa8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2ba7      	cmp	r3, #167	@ 0xa7
 800489c:	d90a      	bls.n	80048b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <osThreadNew+0xa8>
        mem = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e010      	b.n	80048d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <osThreadNew+0xca>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d108      	bne.n	80048d6 <osThreadNew+0xca>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <osThreadNew+0xca>
          mem = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e001      	b.n	80048d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d110      	bne.n	80048fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048e4:	9202      	str	r2, [sp, #8]
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 ffb0 	bl	8005858 <xTaskCreateStatic>
 80048f8:	4603      	mov	r3, r0
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e013      	b.n	8004926 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d110      	bne.n	8004926 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	b29a      	uxth	r2, r3
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fffe 	bl	8005918 <xTaskCreate>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <osThreadNew+0x11a>
            hTask = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004926:	693b      	ldr	r3, [r7, #16]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	@ 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004938:	f3ef 8305 	mrs	r3, IPSR
 800493c:	60bb      	str	r3, [r7, #8]
  return(result);
 800493e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <osDelay+0x1c>
    stat = osErrorISR;
 8004944:	f06f 0305 	mvn.w	r3, #5
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e007      	b.n	800495c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 f9bc 	bl	8005cd4 <vTaskDelay>
    }
  }

  return (stat);
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a07      	ldr	r2, [pc, #28]	@ (8004994 <vApplicationGetIdleTaskMemory+0x2c>)
 8004978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4a06      	ldr	r2, [pc, #24]	@ (8004998 <vApplicationGetIdleTaskMemory+0x30>)
 800497e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2280      	movs	r2, #128	@ 0x80
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000fa4 	.word	0x20000fa4
 8004998:	2000104c 	.word	0x2000104c

0800499c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a07      	ldr	r2, [pc, #28]	@ (80049c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80049ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4a06      	ldr	r2, [pc, #24]	@ (80049cc <vApplicationGetTimerTaskMemory+0x30>)
 80049b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049ba:	601a      	str	r2, [r3, #0]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	2000124c 	.word	0x2000124c
 80049cc:	200012f4 	.word	0x200012f4

080049d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f103 0208 	add.w	r2, r3, #8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f103 0208 	add.w	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 0208 	add.w	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a88:	d103      	bne.n	8004a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e00c      	b.n	8004aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3308      	adds	r3, #8
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e002      	b.n	8004aa0 <vListInsert+0x2e>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d2f6      	bcs.n	8004a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
 8004afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6852      	ldr	r2, [r2, #4]
 8004b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d103      	bne.n	8004b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	1e5a      	subs	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b64:	f002 fbc0 	bl	80072e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	441a      	add	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b94:	3b01      	subs	r3, #1
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	441a      	add	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	22ff      	movs	r2, #255	@ 0xff
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	22ff      	movs	r2, #255	@ 0xff
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d114      	bne.n	8004be4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01a      	beq.n	8004bf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3310      	adds	r3, #16
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 fb58 	bl	800627c <xTaskRemoveFromEventList>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d012      	beq.n	8004bf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <xQueueGenericReset+0xd0>)
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	e009      	b.n	8004bf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3310      	adds	r3, #16
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fef1 	bl	80049d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3324      	adds	r3, #36	@ 0x24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff feec 	bl	80049d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bf8:	f002 fba8 	bl	800734c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bfc:	2301      	movs	r3, #1
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08e      	sub	sp, #56	@ 0x38
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <xQueueGenericCreateStatic+0x56>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <xQueueGenericCreateStatic+0x5a>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <xQueueGenericCreateStatic+0x5c>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	623b      	str	r3, [r7, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <xQueueGenericCreateStatic+0x84>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <xQueueGenericCreateStatic+0x88>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <xQueueGenericCreateStatic+0x8a>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	61fb      	str	r3, [r7, #28]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cb2:	2350      	movs	r3, #80	@ 0x50
 8004cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d00b      	beq.n	8004cd4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	61bb      	str	r3, [r7, #24]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ce8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f840 	bl	8004d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	@ 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	@ 0x28
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	4613      	mov	r3, r2
 8004d12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	613b      	str	r3, [r7, #16]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3350      	adds	r3, #80	@ 0x50
 8004d40:	4618      	mov	r0, r3
 8004d42:	f002 fbf3 	bl	800752c <pvPortMalloc>
 8004d46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d011      	beq.n	8004d72 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3350      	adds	r3, #80	@ 0x50
 8004d56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d60:	79fa      	ldrb	r2, [r7, #7]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f805 	bl	8004d7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d72:	69bb      	ldr	r3, [r7, #24]
	}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004daa:	2101      	movs	r1, #1
 8004dac:	69b8      	ldr	r0, [r7, #24]
 8004dae:	f7ff fec3 	bl	8004b38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004de2:	2300      	movs	r3, #0
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f81d 	bl	8004e28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b086      	sub	sp, #24
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6939      	ldr	r1, [r7, #16]
 8004e0e:	6978      	ldr	r0, [r7, #20]
 8004e10:	f7ff ff79 	bl	8004d06 <xQueueGenericCreate>
 8004e14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff ffd3 	bl	8004dc2 <prvInitialiseMutex>

		return xNewQueue;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
	}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08e      	sub	sp, #56	@ 0x38
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <xQueueGenericSend+0x34>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <xQueueGenericSend+0x42>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueGenericSend+0x46>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueGenericSend+0x48>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <xQueueGenericSend+0x64>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <xQueueGenericSend+0x72>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <xQueueGenericSend+0x76>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueGenericSend+0x78>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <xQueueGenericSend+0x94>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ebc:	f001 fba4 	bl	8006608 <xTaskGetSchedulerState>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <xQueueGenericSend+0xa4>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <xQueueGenericSend+0xa8>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <xQueueGenericSend+0xaa>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xQueueGenericSend+0xc6>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	61fb      	str	r3, [r7, #28]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eee:	f002 f9fb 	bl	80072e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <xQueueGenericSend+0xdc>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d129      	bne.n	8004f58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f0a:	f000 fb37 	bl	800557c <prvCopyDataToQueue>
 8004f0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	3324      	adds	r3, #36	@ 0x24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 f9ad 	bl	800627c <xTaskRemoveFromEventList>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f28:	4b3f      	ldr	r3, [pc, #252]	@ (8005028 <xQueueGenericSend+0x200>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	e00a      	b.n	8004f50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f40:	4b39      	ldr	r3, [pc, #228]	@ (8005028 <xQueueGenericSend+0x200>)
 8004f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f50:	f002 f9fc 	bl	800734c <vPortExitCritical>
				return pdPASS;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e063      	b.n	8005020 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f5e:	f002 f9f5 	bl	800734c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e05c      	b.n	8005020 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 f9e7 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f7a:	f002 f9e7 	bl	800734c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f7e:	f000 ff4f 	bl	8005e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f82:	f002 f9b1 	bl	80072e8 <vPortEnterCritical>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f8c:	b25b      	sxtb	r3, r3
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f92:	d103      	bne.n	8004f9c <xQueueGenericSend+0x174>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fa8:	d103      	bne.n	8004fb2 <xQueueGenericSend+0x18a>
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb2:	f002 f9cb 	bl	800734c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fb6:	1d3a      	adds	r2, r7, #4
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 f9d6 	bl	8006370 <xTaskCheckForTimeOut>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d124      	bne.n	8005014 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fcc:	f000 fbce 	bl	800576c <prvIsQueueFull>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d018      	beq.n	8005008 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	3310      	adds	r3, #16
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 f8fa 	bl	80061d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fe6:	f000 fb59 	bl	800569c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fea:	f000 ff27 	bl	8005e3c <xTaskResumeAll>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f47f af7c 	bne.w	8004eee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <xQueueGenericSend+0x200>)
 8004ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	e772      	b.n	8004eee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800500a:	f000 fb47 	bl	800569c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800500e:	f000 ff15 	bl	8005e3c <xTaskResumeAll>
 8005012:	e76c      	b.n	8004eee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005016:	f000 fb41 	bl	800569c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800501a:	f000 ff0f 	bl	8005e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800501e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005020:	4618      	mov	r0, r3
 8005022:	3738      	adds	r7, #56	@ 0x38
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b090      	sub	sp, #64	@ 0x40
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800503e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <xQueueGenericSendFromISR+0x3e>
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <xQueueGenericSendFromISR+0x42>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <xQueueGenericSendFromISR+0x44>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d103      	bne.n	800509a <xQueueGenericSendFromISR+0x6e>
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <xQueueGenericSendFromISR+0x72>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <xQueueGenericSendFromISR+0x74>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	623b      	str	r3, [r7, #32]
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050bc:	f002 f9f4 	bl	80074a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050c0:	f3ef 8211 	mrs	r2, BASEPRI
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61fa      	str	r2, [r7, #28]
 80050d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d302      	bcc.n	80050ee <xQueueGenericSendFromISR+0xc2>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d12f      	bne.n	800514e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005104:	f000 fa3a 	bl	800557c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005108:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005110:	d112      	bne.n	8005138 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	3324      	adds	r3, #36	@ 0x24
 800511e:	4618      	mov	r0, r3
 8005120:	f001 f8ac 	bl	800627c <xTaskRemoveFromEventList>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e007      	b.n	8005148 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005138:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800513c:	3301      	adds	r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	b25a      	sxtb	r2, r3
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005148:	2301      	movs	r3, #1
 800514a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800514c:	e001      	b.n	8005152 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800514e:	2300      	movs	r3, #0
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005154:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800515c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800515e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005160:	4618      	mov	r0, r3
 8005162:	3740      	adds	r7, #64	@ 0x40
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	@ 0x30
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <xQueueReceive+0x32>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	623b      	str	r3, [r7, #32]
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <xQueueReceive+0x40>
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <xQueueReceive+0x44>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <xQueueReceive+0x46>
 80051ac:	2300      	movs	r3, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10b      	bne.n	80051ca <xQueueReceive+0x62>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	61fb      	str	r3, [r7, #28]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051ca:	f001 fa1d 	bl	8006608 <xTaskGetSchedulerState>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <xQueueReceive+0x72>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <xQueueReceive+0x76>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <xQueueReceive+0x78>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xQueueReceive+0x94>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61bb      	str	r3, [r7, #24]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051fc:	f002 f874 	bl	80072e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01f      	beq.n	800524c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005210:	f000 fa1e 	bl	8005650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00f      	beq.n	8005244 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	3310      	adds	r3, #16
 8005228:	4618      	mov	r0, r3
 800522a:	f001 f827 	bl	800627c <xTaskRemoveFromEventList>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005234:	4b3c      	ldr	r3, [pc, #240]	@ (8005328 <xQueueReceive+0x1c0>)
 8005236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005244:	f002 f882 	bl	800734c <vPortExitCritical>
				return pdPASS;
 8005248:	2301      	movs	r3, #1
 800524a:	e069      	b.n	8005320 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005252:	f002 f87b 	bl	800734c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005256:	2300      	movs	r3, #0
 8005258:	e062      	b.n	8005320 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005260:	f107 0310 	add.w	r3, r7, #16
 8005264:	4618      	mov	r0, r3
 8005266:	f001 f86d 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800526e:	f002 f86d 	bl	800734c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005272:	f000 fdd5 	bl	8005e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005276:	f002 f837 	bl	80072e8 <vPortEnterCritical>
 800527a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005280:	b25b      	sxtb	r3, r3
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005286:	d103      	bne.n	8005290 <xQueueReceive+0x128>
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005296:	b25b      	sxtb	r3, r3
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529c:	d103      	bne.n	80052a6 <xQueueReceive+0x13e>
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052a6:	f002 f851 	bl	800734c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052aa:	1d3a      	adds	r2, r7, #4
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f85c 	bl	8006370 <xTaskCheckForTimeOut>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d123      	bne.n	8005306 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c0:	f000 fa3e 	bl	8005740 <prvIsQueueEmpty>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	3324      	adds	r3, #36	@ 0x24
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 ff80 	bl	80061d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052da:	f000 f9df 	bl	800569c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052de:	f000 fdad 	bl	8005e3c <xTaskResumeAll>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d189      	bne.n	80051fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005328 <xQueueReceive+0x1c0>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	e780      	b.n	80051fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fc:	f000 f9ce 	bl	800569c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005300:	f000 fd9c 	bl	8005e3c <xTaskResumeAll>
 8005304:	e77a      	b.n	80051fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005308:	f000 f9c8 	bl	800569c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800530c:	f000 fd96 	bl	8005e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005312:	f000 fa15 	bl	8005740 <prvIsQueueEmpty>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f43f af6f 	beq.w	80051fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800531e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005320:	4618      	mov	r0, r3
 8005322:	3730      	adds	r7, #48	@ 0x30
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08e      	sub	sp, #56	@ 0x38
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800533e:	2300      	movs	r3, #0
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10b      	bne.n	8005360 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	623b      	str	r3, [r7, #32]
}
 800535a:	bf00      	nop
 800535c:	bf00      	nop
 800535e:	e7fd      	b.n	800535c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	61fb      	str	r3, [r7, #28]
}
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005380:	f001 f942 	bl	8006608 <xTaskGetSchedulerState>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <xQueueSemaphoreTake+0x64>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <xQueueSemaphoreTake+0x68>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <xQueueSemaphoreTake+0x6a>
 8005394:	2300      	movs	r3, #0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	61bb      	str	r3, [r7, #24]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053b2:	f001 ff99 	bl	80072e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d024      	beq.n	800540c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80053d2:	f001 fa93 	bl	80068fc <pvTaskIncrementMutexHeldCount>
 80053d6:	4602      	mov	r2, r0
 80053d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00f      	beq.n	8005404 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	3310      	adds	r3, #16
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 ff47 	bl	800627c <xTaskRemoveFromEventList>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b54      	ldr	r3, [pc, #336]	@ (8005548 <xQueueSemaphoreTake+0x21c>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005404:	f001 ffa2 	bl	800734c <vPortExitCritical>
				return pdPASS;
 8005408:	2301      	movs	r3, #1
 800540a:	e098      	b.n	800553e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d112      	bne.n	8005438 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	617b      	str	r3, [r7, #20]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005430:	f001 ff8c 	bl	800734c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005434:	2300      	movs	r3, #0
 8005436:	e082      	b.n	800553e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	4618      	mov	r0, r3
 8005444:	f000 ff7e 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800544c:	f001 ff7e 	bl	800734c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005450:	f000 fce6 	bl	8005e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005454:	f001 ff48 	bl	80072e8 <vPortEnterCritical>
 8005458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800545e:	b25b      	sxtb	r3, r3
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005464:	d103      	bne.n	800546e <xQueueSemaphoreTake+0x142>
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005474:	b25b      	sxtb	r3, r3
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547a:	d103      	bne.n	8005484 <xQueueSemaphoreTake+0x158>
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005484:	f001 ff62 	bl	800734c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005488:	463a      	mov	r2, r7
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 ff6d 	bl	8006370 <xTaskCheckForTimeOut>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d132      	bne.n	8005502 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800549c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800549e:	f000 f94f 	bl	8005740 <prvIsQueueEmpty>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d026      	beq.n	80054f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80054b0:	f001 ff1a 	bl	80072e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f8c3 	bl	8006644 <xTaskPriorityInherit>
 80054be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80054c0:	f001 ff44 	bl	800734c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	3324      	adds	r3, #36	@ 0x24
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fe83 	bl	80061d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054d4:	f000 f8e2 	bl	800569c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054d8:	f000 fcb0 	bl	8005e3c <xTaskResumeAll>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f47f af67 	bne.w	80053b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80054e4:	4b18      	ldr	r3, [pc, #96]	@ (8005548 <xQueueSemaphoreTake+0x21c>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	e75d      	b.n	80053b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054f8:	f000 f8d0 	bl	800569c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054fc:	f000 fc9e 	bl	8005e3c <xTaskResumeAll>
 8005500:	e757      	b.n	80053b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005504:	f000 f8ca 	bl	800569c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005508:	f000 fc98 	bl	8005e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800550c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800550e:	f000 f917 	bl	8005740 <prvIsQueueEmpty>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	f43f af4c 	beq.w	80053b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005520:	f001 fee2 	bl	80072e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005524:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005526:	f000 f811 	bl	800554c <prvGetDisinheritPriorityAfterTimeout>
 800552a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005532:	4618      	mov	r0, r3
 8005534:	f001 f95e 	bl	80067f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005538:	f001 ff08 	bl	800734c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800553c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800553e:	4618      	mov	r0, r3
 8005540:	3738      	adds	r7, #56	@ 0x38
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e001      	b.n	800556e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800556e:	68fb      	ldr	r3, [r7, #12]
	}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10d      	bne.n	80055b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d14d      	bne.n	800563e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f8b4 	bl	8006714 <xTaskPriorityDisinherit>
 80055ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	e043      	b.n	800563e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d119      	bne.n	80055f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6858      	ldr	r0, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	461a      	mov	r2, r3
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	f002 fa48 	bl	8007a5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d32b      	bcc.n	800563e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	e026      	b.n	800563e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68d8      	ldr	r0, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	461a      	mov	r2, r3
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	f002 fa2e 	bl	8007a5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	425b      	negs	r3, r3
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d207      	bcs.n	800562c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	425b      	negs	r3, r3
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d105      	bne.n	800563e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3b01      	subs	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005646:	697b      	ldr	r3, [r7, #20]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d018      	beq.n	8005694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	441a      	add	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d303      	bcc.n	8005684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68d9      	ldr	r1, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	461a      	mov	r2, r3
 800568e:	6838      	ldr	r0, [r7, #0]
 8005690:	f002 f9e4 	bl	8007a5c <memcpy>
	}
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056a4:	f001 fe20 	bl	80072e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056b0:	e011      	b.n	80056d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d012      	beq.n	80056e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3324      	adds	r3, #36	@ 0x24
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fddc 	bl	800627c <xTaskRemoveFromEventList>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ca:	f000 feb5 	bl	8006438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dce9      	bgt.n	80056b2 <prvUnlockQueue+0x16>
 80056de:	e000      	b.n	80056e2 <prvUnlockQueue+0x46>
					break;
 80056e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	22ff      	movs	r2, #255	@ 0xff
 80056e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056ea:	f001 fe2f 	bl	800734c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ee:	f001 fdfb 	bl	80072e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056fa:	e011      	b.n	8005720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d012      	beq.n	800572a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3310      	adds	r3, #16
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fdb7 	bl	800627c <xTaskRemoveFromEventList>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005714:	f000 fe90 	bl	8006438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	3b01      	subs	r3, #1
 800571c:	b2db      	uxtb	r3, r3
 800571e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005724:	2b00      	cmp	r3, #0
 8005726:	dce9      	bgt.n	80056fc <prvUnlockQueue+0x60>
 8005728:	e000      	b.n	800572c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800572a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	22ff      	movs	r2, #255	@ 0xff
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005734:	f001 fe0a 	bl	800734c <vPortExitCritical>
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005748:	f001 fdce 	bl	80072e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f001 fdf5 	bl	800734c <vPortExitCritical>

	return xReturn;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005774:	f001 fdb8 	bl	80072e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	429a      	cmp	r2, r3
 8005782:	d102      	bne.n	800578a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	e001      	b.n	800578e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578e:	f001 fddd 	bl	800734c <vPortExitCritical>

	return xReturn;
 8005792:	68fb      	ldr	r3, [r7, #12]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e014      	b.n	80057d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057ac:	4a0f      	ldr	r2, [pc, #60]	@ (80057ec <vQueueAddToRegistry+0x50>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057b8:	490c      	ldr	r1, [pc, #48]	@ (80057ec <vQueueAddToRegistry+0x50>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057c2:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <vQueueAddToRegistry+0x50>)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057ce:	e006      	b.n	80057de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b07      	cmp	r3, #7
 80057da:	d9e7      	bls.n	80057ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	200016f4 	.word	0x200016f4

080057f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005800:	f001 fd72 	bl	80072e8 <vPortEnterCritical>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005810:	d103      	bne.n	800581a <vQueueWaitForMessageRestricted+0x2a>
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005820:	b25b      	sxtb	r3, r3
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005826:	d103      	bne.n	8005830 <vQueueWaitForMessageRestricted+0x40>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005830:	f001 fd8c 	bl	800734c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d106      	bne.n	800584a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3324      	adds	r3, #36	@ 0x24
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fced 	bl	8006224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800584a:	6978      	ldr	r0, [r7, #20]
 800584c:	f7ff ff26 	bl	800569c <prvUnlockQueue>
	}
 8005850:	bf00      	nop
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08e      	sub	sp, #56	@ 0x38
 800585c:	af04      	add	r7, sp, #16
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <xTaskCreateStatic+0x2c>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	623b      	str	r3, [r7, #32]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	61fb      	str	r3, [r7, #28]
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	e7fd      	b.n	800589e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058a2:	23a8      	movs	r3, #168	@ 0xa8
 80058a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80058aa:	d00b      	beq.n	80058c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61bb      	str	r3, [r7, #24]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01e      	beq.n	800590a <xTaskCreateStatic+0xb2>
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01b      	beq.n	800590a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058e4:	2300      	movs	r3, #0
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f851 	bl	80059a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005902:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005904:	f000 f8f6 	bl	8005af4 <prvAddNewTaskToReadyList>
 8005908:	e001      	b.n	800590e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800590e:	697b      	ldr	r3, [r7, #20]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	@ 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08c      	sub	sp, #48	@ 0x30
 800591c:	af04      	add	r7, sp, #16
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4618      	mov	r0, r3
 800592e:	f001 fdfd 	bl	800752c <pvPortMalloc>
 8005932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800593a:	20a8      	movs	r0, #168	@ 0xa8
 800593c:	f001 fdf6 	bl	800752c <pvPortMalloc>
 8005940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	631a      	str	r2, [r3, #48]	@ 0x30
 800594e:	e005      	b.n	800595c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f001 feb9 	bl	80076c8 <vPortFree>
 8005956:	e001      	b.n	800595c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d017      	beq.n	8005992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	2300      	movs	r3, #0
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	9302      	str	r3, [sp, #8]
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f80f 	bl	80059a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005986:	69f8      	ldr	r0, [r7, #28]
 8005988:	f000 f8b4 	bl	8005af4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e002      	b.n	8005998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005998:	69bb      	ldr	r3, [r7, #24]
	}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	21a5      	movs	r1, #165	@ 0xa5
 80059be:	f001 ffc3 	bl	8007948 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059cc:	3b01      	subs	r3, #1
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f023 0307 	bic.w	r3, r3, #7
 80059da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	617b      	str	r3, [r7, #20]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01f      	beq.n	8005a44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a04:	2300      	movs	r3, #0
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	e012      	b.n	8005a30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	7819      	ldrb	r1, [r3, #0]
 8005a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	3334      	adds	r3, #52	@ 0x34
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	d9e9      	bls.n	8005a0a <prvInitialiseNewTask+0x66>
 8005a36:	e000      	b.n	8005a3a <prvInitialiseNewTask+0x96>
			{
				break;
 8005a38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a42:	e003      	b.n	8005a4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	2b37      	cmp	r3, #55	@ 0x37
 8005a50:	d901      	bls.n	8005a56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a52:	2337      	movs	r3, #55	@ 0x37
 8005a54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe ffcf 	bl	8004a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	3318      	adds	r3, #24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe ffca 	bl	8004a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	3354      	adds	r3, #84	@ 0x54
 8005aa6:	224c      	movs	r2, #76	@ 0x4c
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 ff4c 	bl	8007948 <memset>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae8 <prvInitialiseNewTask+0x144>)
 8005ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8005aec <prvInitialiseNewTask+0x148>)
 8005aba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	4a0c      	ldr	r2, [pc, #48]	@ (8005af0 <prvInitialiseNewTask+0x14c>)
 8005ac0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	69b8      	ldr	r0, [r7, #24]
 8005ac8:	f001 fada 	bl	8007080 <pxPortInitialiseStack>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005adc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ade:	bf00      	nop
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20005988 	.word	0x20005988
 8005aec:	200059f0 	.word	0x200059f0
 8005af0:	20005a58 	.word	0x20005a58

08005af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005afc:	f001 fbf4 	bl	80072e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b00:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb8 <prvAddNewTaskToReadyList+0xc4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb8 <prvAddNewTaskToReadyList+0xc4>)
 8005b08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <prvAddNewTaskToReadyList+0xc8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b12:	4a2a      	ldr	r2, [pc, #168]	@ (8005bbc <prvAddNewTaskToReadyList+0xc8>)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b18:	4b27      	ldr	r3, [pc, #156]	@ (8005bb8 <prvAddNewTaskToReadyList+0xc4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d110      	bne.n	8005b42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b20:	f000 fcae 	bl	8006480 <prvInitialiseTaskLists>
 8005b24:	e00d      	b.n	8005b42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b26:	4b26      	ldr	r3, [pc, #152]	@ (8005bc0 <prvAddNewTaskToReadyList+0xcc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b2e:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <prvAddNewTaskToReadyList+0xc8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d802      	bhi.n	8005b42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <prvAddNewTaskToReadyList+0xc8>)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b42:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <prvAddNewTaskToReadyList+0xd0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc4 <prvAddNewTaskToReadyList+0xd0>)
 8005b4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <prvAddNewTaskToReadyList+0xd0>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc8 <prvAddNewTaskToReadyList+0xd4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d903      	bls.n	8005b68 <prvAddNewTaskToReadyList+0x74>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <prvAddNewTaskToReadyList+0xd4>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <prvAddNewTaskToReadyList+0xd8>)
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe ff53 	bl	8004a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b84:	f001 fbe2 	bl	800734c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b88:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <prvAddNewTaskToReadyList+0xcc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b90:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <prvAddNewTaskToReadyList+0xc8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d207      	bcs.n	8005bae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <prvAddNewTaskToReadyList+0xdc>)
 8005ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20001c08 	.word	0x20001c08
 8005bbc:	20001734 	.word	0x20001734
 8005bc0:	20001c14 	.word	0x20001c14
 8005bc4:	20001c24 	.word	0x20001c24
 8005bc8:	20001c10 	.word	0x20001c10
 8005bcc:	20001738 	.word	0x20001738
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	@ 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <vTaskDelayUntil+0x2c>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	617b      	str	r3, [r7, #20]
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <vTaskDelayUntil+0x4a>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	613b      	str	r3, [r7, #16]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8005c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc8 <vTaskDelayUntil+0xf4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <vTaskDelayUntil+0x6a>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8005c3e:	f000 f8ef 	bl	8005e20 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005c42:	4b22      	ldr	r3, [pc, #136]	@ (8005ccc <vTaskDelayUntil+0xf8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	4413      	add	r3, r2
 8005c50:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d20b      	bcs.n	8005c74 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d211      	bcs.n	8005c8a <vTaskDelayUntil+0xb6>
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d90d      	bls.n	8005c8a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c72:	e00a      	b.n	8005c8a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d303      	bcc.n	8005c86 <vTaskDelayUntil+0xb2>
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d901      	bls.n	8005c8a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d006      	beq.n	8005ca4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fe40 	bl	8006924 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005ca4:	f000 f8ca 	bl	8005e3c <xTaskResumeAll>
 8005ca8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8005cb0:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <vTaskDelayUntil+0xfc>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cc0:	bf00      	nop
 8005cc2:	3728      	adds	r7, #40	@ 0x28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20001c30 	.word	0x20001c30
 8005ccc:	20001c0c 	.word	0x20001c0c
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ce6:	4b14      	ldr	r3, [pc, #80]	@ (8005d38 <vTaskDelay+0x64>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <vTaskDelay+0x32>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60bb      	str	r3, [r7, #8]
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	e7fd      	b.n	8005d02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d06:	f000 f88b 	bl	8005e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fe09 	bl	8006924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d12:	f000 f893 	bl	8005e3c <xTaskResumeAll>
 8005d16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d1e:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <vTaskDelay+0x68>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20001c30 	.word	0x20001c30
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	@ 0x28
 8005d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d4e:	463a      	mov	r2, r7
 8005d50:	1d39      	adds	r1, r7, #4
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fe06 	bl	8004968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	9202      	str	r2, [sp, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	4924      	ldr	r1, [pc, #144]	@ (8005e00 <vTaskStartScheduler+0xc0>)
 8005d70:	4824      	ldr	r0, [pc, #144]	@ (8005e04 <vTaskStartScheduler+0xc4>)
 8005d72:	f7ff fd71 	bl	8005858 <xTaskCreateStatic>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4a23      	ldr	r2, [pc, #140]	@ (8005e08 <vTaskStartScheduler+0xc8>)
 8005d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d7c:	4b22      	ldr	r3, [pc, #136]	@ (8005e08 <vTaskStartScheduler+0xc8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	e001      	b.n	8005d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d102      	bne.n	8005d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d94:	f000 fe1a 	bl	80069cc <xTimerCreateTimerTask>
 8005d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d11b      	bne.n	8005dd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
}
 8005db2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db4:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <vTaskStartScheduler+0xcc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3354      	adds	r3, #84	@ 0x54
 8005dba:	4a15      	ldr	r2, [pc, #84]	@ (8005e10 <vTaskStartScheduler+0xd0>)
 8005dbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <vTaskStartScheduler+0xd4>)
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dc6:	4b14      	ldr	r3, [pc, #80]	@ (8005e18 <vTaskStartScheduler+0xd8>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dcc:	4b13      	ldr	r3, [pc, #76]	@ (8005e1c <vTaskStartScheduler+0xdc>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dd2:	f001 f9e5 	bl	80071a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dd6:	e00f      	b.n	8005df8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dde:	d10b      	bne.n	8005df8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <vTaskStartScheduler+0xb4>
}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08009568 	.word	0x08009568
 8005e04:	08006451 	.word	0x08006451
 8005e08:	20001c2c 	.word	0x20001c2c
 8005e0c:	20001734 	.word	0x20001734
 8005e10:	20000e28 	.word	0x20000e28
 8005e14:	20001c28 	.word	0x20001c28
 8005e18:	20001c14 	.word	0x20001c14
 8005e1c:	20001c0c 	.word	0x20001c0c

08005e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <vTaskSuspendAll+0x18>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4a03      	ldr	r2, [pc, #12]	@ (8005e38 <vTaskSuspendAll+0x18>)
 8005e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e2e:	bf00      	nop
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20001c30 	.word	0x20001c30

08005e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e4a:	4b42      	ldr	r3, [pc, #264]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	603b      	str	r3, [r7, #0]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e6a:	f001 fa3d 	bl	80072e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e6e:	4b39      	ldr	r3, [pc, #228]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	4a37      	ldr	r2, [pc, #220]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e78:	4b36      	ldr	r3, [pc, #216]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d162      	bne.n	8005f46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e80:	4b35      	ldr	r3, [pc, #212]	@ (8005f58 <xTaskResumeAll+0x11c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d05e      	beq.n	8005f46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e88:	e02f      	b.n	8005eea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8a:	4b34      	ldr	r3, [pc, #208]	@ (8005f5c <xTaskResumeAll+0x120>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fe24 	bl	8004ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fe1f 	bl	8004ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005f60 <xTaskResumeAll+0x124>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d903      	bls.n	8005eba <xTaskResumeAll+0x7e>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f60 <xTaskResumeAll+0x124>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4a27      	ldr	r2, [pc, #156]	@ (8005f64 <xTaskResumeAll+0x128>)
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fe fdaa 	bl	8004a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eda:	4b23      	ldr	r3, [pc, #140]	@ (8005f68 <xTaskResumeAll+0x12c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ee4:	4b21      	ldr	r3, [pc, #132]	@ (8005f6c <xTaskResumeAll+0x130>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eea:	4b1c      	ldr	r3, [pc, #112]	@ (8005f5c <xTaskResumeAll+0x120>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cb      	bne.n	8005e8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ef8:	f000 fb66 	bl	80065c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005efc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f70 <xTaskResumeAll+0x134>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f08:	f000 f846 	bl	8005f98 <xTaskIncrementTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f12:	4b16      	ldr	r3, [pc, #88]	@ (8005f6c <xTaskResumeAll+0x130>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f1      	bne.n	8005f08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f24:	4b12      	ldr	r3, [pc, #72]	@ (8005f70 <xTaskResumeAll+0x134>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f2a:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <xTaskResumeAll+0x130>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	@ (8005f74 <xTaskResumeAll+0x138>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 fa01 	bl	800734c <vPortExitCritical>

	return xAlreadyYielded;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20001c30 	.word	0x20001c30
 8005f58:	20001c08 	.word	0x20001c08
 8005f5c:	20001bc8 	.word	0x20001bc8
 8005f60:	20001c10 	.word	0x20001c10
 8005f64:	20001738 	.word	0x20001738
 8005f68:	20001734 	.word	0x20001734
 8005f6c:	20001c1c 	.word	0x20001c1c
 8005f70:	20001c18 	.word	0x20001c18
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f7e:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <xTaskGetTickCount+0x1c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f84:	687b      	ldr	r3, [r7, #4]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20001c0c 	.word	0x20001c0c

08005f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80060e0 <xTaskIncrementTick+0x148>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 8090 	bne.w	80060cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fac:	4b4d      	ldr	r3, [pc, #308]	@ (80060e4 <xTaskIncrementTick+0x14c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80060e4 <xTaskIncrementTick+0x14c>)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d121      	bne.n	8006004 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fc0:	4b49      	ldr	r3, [pc, #292]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	603b      	str	r3, [r7, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xTaskIncrementTick+0x46>
 8005fe2:	4b41      	ldr	r3, [pc, #260]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	4b40      	ldr	r3, [pc, #256]	@ (80060ec <xTaskIncrementTick+0x154>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a3e      	ldr	r2, [pc, #248]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80060ec <xTaskIncrementTick+0x154>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80060f0 <xTaskIncrementTick+0x158>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80060f0 <xTaskIncrementTick+0x158>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	f000 fae2 	bl	80065c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006004:	4b3b      	ldr	r3, [pc, #236]	@ (80060f4 <xTaskIncrementTick+0x15c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	d349      	bcc.n	80060a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600e:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006018:	4b36      	ldr	r3, [pc, #216]	@ (80060f4 <xTaskIncrementTick+0x15c>)
 800601a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800601e:	601a      	str	r2, [r3, #0]
					break;
 8006020:	e03f      	b.n	80060a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006022:	4b31      	ldr	r3, [pc, #196]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d203      	bcs.n	8006042 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800603a:	4a2e      	ldr	r2, [pc, #184]	@ (80060f4 <xTaskIncrementTick+0x15c>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006040:	e02f      	b.n	80060a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fd4c 	bl	8004ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3318      	adds	r3, #24
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe fd43 	bl	8004ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006062:	4b25      	ldr	r3, [pc, #148]	@ (80060f8 <xTaskIncrementTick+0x160>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <xTaskIncrementTick+0xda>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a22      	ldr	r2, [pc, #136]	@ (80060f8 <xTaskIncrementTick+0x160>)
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a1f      	ldr	r2, [pc, #124]	@ (80060fc <xTaskIncrementTick+0x164>)
 8006080:	441a      	add	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7fe fcce 	bl	8004a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	4b1b      	ldr	r3, [pc, #108]	@ (8006100 <xTaskIncrementTick+0x168>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d3b8      	bcc.n	800600e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a0:	e7b5      	b.n	800600e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060a2:	4b17      	ldr	r3, [pc, #92]	@ (8006100 <xTaskIncrementTick+0x168>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a8:	4914      	ldr	r1, [pc, #80]	@ (80060fc <xTaskIncrementTick+0x164>)
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d901      	bls.n	80060be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060be:	4b11      	ldr	r3, [pc, #68]	@ (8006104 <xTaskIncrementTick+0x16c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060c6:	2301      	movs	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e004      	b.n	80060d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <xTaskIncrementTick+0x170>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006108 <xTaskIncrementTick+0x170>)
 80060d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060d6:	697b      	ldr	r3, [r7, #20]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20001c30 	.word	0x20001c30
 80060e4:	20001c0c 	.word	0x20001c0c
 80060e8:	20001bc0 	.word	0x20001bc0
 80060ec:	20001bc4 	.word	0x20001bc4
 80060f0:	20001c20 	.word	0x20001c20
 80060f4:	20001c28 	.word	0x20001c28
 80060f8:	20001c10 	.word	0x20001c10
 80060fc:	20001738 	.word	0x20001738
 8006100:	20001734 	.word	0x20001734
 8006104:	20001c1c 	.word	0x20001c1c
 8006108:	20001c18 	.word	0x20001c18

0800610c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006112:	4b2b      	ldr	r3, [pc, #172]	@ (80061c0 <vTaskSwitchContext+0xb4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800611a:	4b2a      	ldr	r3, [pc, #168]	@ (80061c4 <vTaskSwitchContext+0xb8>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006120:	e047      	b.n	80061b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006122:	4b28      	ldr	r3, [pc, #160]	@ (80061c4 <vTaskSwitchContext+0xb8>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006128:	4b27      	ldr	r3, [pc, #156]	@ (80061c8 <vTaskSwitchContext+0xbc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e011      	b.n	8006154 <vTaskSwitchContext+0x48>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <vTaskSwitchContext+0x42>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	607b      	str	r3, [r7, #4]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vTaskSwitchContext+0x3e>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b01      	subs	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	491d      	ldr	r1, [pc, #116]	@ (80061cc <vTaskSwitchContext+0xc0>)
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0e3      	beq.n	8006130 <vTaskSwitchContext+0x24>
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <vTaskSwitchContext+0xc0>)
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3308      	adds	r3, #8
 800618a:	429a      	cmp	r2, r3
 800618c:	d104      	bne.n	8006198 <vTaskSwitchContext+0x8c>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4a0c      	ldr	r2, [pc, #48]	@ (80061d0 <vTaskSwitchContext+0xc4>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4a09      	ldr	r2, [pc, #36]	@ (80061c8 <vTaskSwitchContext+0xbc>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061a8:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <vTaskSwitchContext+0xc4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3354      	adds	r3, #84	@ 0x54
 80061ae:	4a09      	ldr	r2, [pc, #36]	@ (80061d4 <vTaskSwitchContext+0xc8>)
 80061b0:	6013      	str	r3, [r2, #0]
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20001c30 	.word	0x20001c30
 80061c4:	20001c1c 	.word	0x20001c1c
 80061c8:	20001c10 	.word	0x20001c10
 80061cc:	20001738 	.word	0x20001738
 80061d0:	20001734 	.word	0x20001734
 80061d4:	20000e28 	.word	0x20000e28

080061d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60fb      	str	r3, [r7, #12]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <vTaskPlaceOnEventList+0x48>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3318      	adds	r3, #24
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fe fc32 	bl	8004a72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800620e:	2101      	movs	r1, #1
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	f000 fb87 	bl	8006924 <prvAddCurrentTaskToDelayedList>
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20001734 	.word	0x20001734

08006224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	617b      	str	r3, [r7, #20]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800624e:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <vTaskPlaceOnEventListRestricted+0x54>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3318      	adds	r3, #24
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7fe fbe7 	bl	8004a2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	68b8      	ldr	r0, [r7, #8]
 800626c:	f000 fb5a 	bl	8006924 <prvAddCurrentTaskToDelayedList>
	}
 8006270:	bf00      	nop
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20001734 	.word	0x20001734

0800627c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10b      	bne.n	80062aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3318      	adds	r3, #24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fc18 	bl	8004ae4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <xTaskRemoveFromEventList+0xb0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11d      	bne.n	80062f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fc0f 	bl	8004ae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ca:	4b19      	ldr	r3, [pc, #100]	@ (8006330 <xTaskRemoveFromEventList+0xb4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d903      	bls.n	80062da <xTaskRemoveFromEventList+0x5e>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <xTaskRemoveFromEventList+0xb4>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a13      	ldr	r2, [pc, #76]	@ (8006334 <xTaskRemoveFromEventList+0xb8>)
 80062e8:	441a      	add	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe fb9a 	bl	8004a2a <vListInsertEnd>
 80062f6:	e005      	b.n	8006304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3318      	adds	r3, #24
 80062fc:	4619      	mov	r1, r3
 80062fe:	480e      	ldr	r0, [pc, #56]	@ (8006338 <xTaskRemoveFromEventList+0xbc>)
 8006300:	f7fe fb93 	bl	8004a2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <xTaskRemoveFromEventList+0xc0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	429a      	cmp	r2, r3
 8006310:	d905      	bls.n	800631e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006316:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <xTaskRemoveFromEventList+0xc4>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e001      	b.n	8006322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006322:	697b      	ldr	r3, [r7, #20]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20001c30 	.word	0x20001c30
 8006330:	20001c10 	.word	0x20001c10
 8006334:	20001738 	.word	0x20001738
 8006338:	20001bc8 	.word	0x20001bc8
 800633c:	20001734 	.word	0x20001734
 8006340:	20001c1c 	.word	0x20001c1c

08006344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <vTaskInternalSetTimeOutState+0x24>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006354:	4b05      	ldr	r3, [pc, #20]	@ (800636c <vTaskInternalSetTimeOutState+0x28>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20001c20 	.word	0x20001c20
 800636c:	20001c0c 	.word	0x20001c0c

08006370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	613b      	str	r3, [r7, #16]
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	e7fd      	b.n	8006394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063b6:	f000 ff97 	bl	80072e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006430 <xTaskCheckForTimeOut+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063d2:	d102      	bne.n	80063da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e023      	b.n	8006422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <xTaskCheckForTimeOut+0xc4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d007      	beq.n	80063f6 <xTaskCheckForTimeOut+0x86>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d302      	bcc.n	80063f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	e015      	b.n	8006422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d20b      	bcs.n	8006418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff99 	bl	8006344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
 8006416:	e004      	b.n	8006422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006422:	f000 ff93 	bl	800734c <vPortExitCritical>

	return xReturn;
 8006426:	69fb      	ldr	r3, [r7, #28]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20001c0c 	.word	0x20001c0c
 8006434:	20001c20 	.word	0x20001c20

08006438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800643c:	4b03      	ldr	r3, [pc, #12]	@ (800644c <vTaskMissedYield+0x14>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20001c1c 	.word	0x20001c1c

08006450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006458:	f000 f852 	bl	8006500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800645c:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <prvIdleTask+0x28>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d9f9      	bls.n	8006458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <prvIdleTask+0x2c>)
 8006466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006474:	e7f0      	b.n	8006458 <prvIdleTask+0x8>
 8006476:	bf00      	nop
 8006478:	20001738 	.word	0x20001738
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	e00c      	b.n	80064a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4a12      	ldr	r2, [pc, #72]	@ (80064e0 <prvInitialiseTaskLists+0x60>)
 8006498:	4413      	add	r3, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fa98 	bl	80049d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3301      	adds	r3, #1
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b37      	cmp	r3, #55	@ 0x37
 80064aa:	d9ef      	bls.n	800648c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064ac:	480d      	ldr	r0, [pc, #52]	@ (80064e4 <prvInitialiseTaskLists+0x64>)
 80064ae:	f7fe fa8f 	bl	80049d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064b2:	480d      	ldr	r0, [pc, #52]	@ (80064e8 <prvInitialiseTaskLists+0x68>)
 80064b4:	f7fe fa8c 	bl	80049d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064b8:	480c      	ldr	r0, [pc, #48]	@ (80064ec <prvInitialiseTaskLists+0x6c>)
 80064ba:	f7fe fa89 	bl	80049d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064be:	480c      	ldr	r0, [pc, #48]	@ (80064f0 <prvInitialiseTaskLists+0x70>)
 80064c0:	f7fe fa86 	bl	80049d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064c4:	480b      	ldr	r0, [pc, #44]	@ (80064f4 <prvInitialiseTaskLists+0x74>)
 80064c6:	f7fe fa83 	bl	80049d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <prvInitialiseTaskLists+0x78>)
 80064cc:	4a05      	ldr	r2, [pc, #20]	@ (80064e4 <prvInitialiseTaskLists+0x64>)
 80064ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <prvInitialiseTaskLists+0x7c>)
 80064d2:	4a05      	ldr	r2, [pc, #20]	@ (80064e8 <prvInitialiseTaskLists+0x68>)
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20001738 	.word	0x20001738
 80064e4:	20001b98 	.word	0x20001b98
 80064e8:	20001bac 	.word	0x20001bac
 80064ec:	20001bc8 	.word	0x20001bc8
 80064f0:	20001bdc 	.word	0x20001bdc
 80064f4:	20001bf4 	.word	0x20001bf4
 80064f8:	20001bc0 	.word	0x20001bc0
 80064fc:	20001bc4 	.word	0x20001bc4

08006500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006506:	e019      	b.n	800653c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006508:	f000 feee 	bl	80072e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650c:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <prvCheckTasksWaitingTermination+0x50>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fae3 	bl	8004ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800651e:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <prvCheckTasksWaitingTermination+0x54>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	4a0b      	ldr	r2, [pc, #44]	@ (8006554 <prvCheckTasksWaitingTermination+0x54>)
 8006526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006528:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <prvCheckTasksWaitingTermination+0x58>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3b01      	subs	r3, #1
 800652e:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <prvCheckTasksWaitingTermination+0x58>)
 8006530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006532:	f000 ff0b 	bl	800734c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f810 	bl	800655c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <prvCheckTasksWaitingTermination+0x58>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e1      	bne.n	8006508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20001bdc 	.word	0x20001bdc
 8006554:	20001c08 	.word	0x20001c08
 8006558:	20001bf0 	.word	0x20001bf0

0800655c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3354      	adds	r3, #84	@ 0x54
 8006568:	4618      	mov	r0, r3
 800656a:	f001 f9f5 	bl	8007958 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006574:	2b00      	cmp	r3, #0
 8006576:	d108      	bne.n	800658a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	4618      	mov	r0, r3
 800657e:	f001 f8a3 	bl	80076c8 <vPortFree>
				vPortFree( pxTCB );
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 f8a0 	bl	80076c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006588:	e019      	b.n	80065be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006590:	2b01      	cmp	r3, #1
 8006592:	d103      	bne.n	800659c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f897 	bl	80076c8 <vPortFree>
	}
 800659a:	e010      	b.n	80065be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d00b      	beq.n	80065be <prvDeleteTCB+0x62>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <prvDeleteTCB+0x5e>
	}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <prvResetNextTaskUnblockTime+0x38>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <prvResetNextTaskUnblockTime+0x3c>)
 80065da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065e0:	e008      	b.n	80065f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e2:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <prvResetNextTaskUnblockTime+0x38>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <prvResetNextTaskUnblockTime+0x3c>)
 80065f2:	6013      	str	r3, [r2, #0]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20001bc0 	.word	0x20001bc0
 8006604:	20001c28 	.word	0x20001c28

08006608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800660e:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <xTaskGetSchedulerState+0x34>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006616:	2301      	movs	r3, #1
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	e008      	b.n	800662e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661c:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <xTaskGetSchedulerState+0x38>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006624:	2302      	movs	r3, #2
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e001      	b.n	800662e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800662e:	687b      	ldr	r3, [r7, #4]
	}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20001c14 	.word	0x20001c14
 8006640:	20001c30 	.word	0x20001c30

08006644 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d051      	beq.n	80066fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665e:	4b2a      	ldr	r3, [pc, #168]	@ (8006708 <xTaskPriorityInherit+0xc4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006664:	429a      	cmp	r2, r3
 8006666:	d241      	bcs.n	80066ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	db06      	blt.n	800667e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006670:	4b25      	ldr	r3, [pc, #148]	@ (8006708 <xTaskPriorityInherit+0xc4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6959      	ldr	r1, [r3, #20]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <xTaskPriorityInherit+0xc8>)
 8006690:	4413      	add	r3, r2
 8006692:	4299      	cmp	r1, r3
 8006694:	d122      	bne.n	80066dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fa22 	bl	8004ae4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066a0:	4b19      	ldr	r3, [pc, #100]	@ (8006708 <xTaskPriorityInherit+0xc4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ae:	4b18      	ldr	r3, [pc, #96]	@ (8006710 <xTaskPriorityInherit+0xcc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d903      	bls.n	80066be <xTaskPriorityInherit+0x7a>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	4a15      	ldr	r2, [pc, #84]	@ (8006710 <xTaskPriorityInherit+0xcc>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a10      	ldr	r2, [pc, #64]	@ (800670c <xTaskPriorityInherit+0xc8>)
 80066cc:	441a      	add	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe f9a8 	bl	8004a2a <vListInsertEnd>
 80066da:	e004      	b.n	80066e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <xTaskPriorityInherit+0xc4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e008      	b.n	80066fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f0:	4b05      	ldr	r3, [pc, #20]	@ (8006708 <xTaskPriorityInherit+0xc4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d201      	bcs.n	80066fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066fa:	2301      	movs	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20001734 	.word	0x20001734
 800670c:	20001738 	.word	0x20001738
 8006710:	20001c10 	.word	0x20001c10

08006714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d058      	beq.n	80067dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800672a:	4b2f      	ldr	r3, [pc, #188]	@ (80067e8 <xTaskPriorityDisinherit+0xd4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d00b      	beq.n	800674c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	60bb      	str	r3, [r7, #8]
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677e:	429a      	cmp	r2, r3
 8006780:	d02c      	beq.n	80067dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006786:	2b00      	cmp	r3, #0
 8006788:	d128      	bne.n	80067dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3304      	adds	r3, #4
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe f9a8 	bl	8004ae4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ac:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <xTaskPriorityDisinherit+0xd8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d903      	bls.n	80067bc <xTaskPriorityDisinherit+0xa8>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	4a0c      	ldr	r2, [pc, #48]	@ (80067ec <xTaskPriorityDisinherit+0xd8>)
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4a09      	ldr	r2, [pc, #36]	@ (80067f0 <xTaskPriorityDisinherit+0xdc>)
 80067ca:	441a      	add	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe f929 	bl	8004a2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067dc:	697b      	ldr	r3, [r7, #20]
	}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20001734 	.word	0x20001734
 80067ec:	20001c10 	.word	0x20001c10
 80067f0:	20001738 	.word	0x20001738

080067f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006802:	2301      	movs	r3, #1
 8006804:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d06c      	beq.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60fb      	str	r3, [r7, #12]
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	e7fd      	b.n	8006828 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d902      	bls.n	800683c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e002      	b.n	8006842 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006840:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	429a      	cmp	r2, r3
 800684a:	d04c      	beq.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	429a      	cmp	r2, r3
 8006854:	d147      	bne.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006856:	4b26      	ldr	r3, [pc, #152]	@ (80068f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	429a      	cmp	r2, r3
 800685e:	d10b      	bne.n	8006878 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60bb      	str	r3, [r7, #8]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db04      	blt.n	8006896 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	6959      	ldr	r1, [r3, #20]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80068a6:	4413      	add	r3, r2
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d11c      	bne.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f917 	bl	8004ae4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ba:	4b0f      	ldr	r3, [pc, #60]	@ (80068f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d903      	bls.n	80068ca <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c6:	4a0c      	ldr	r2, [pc, #48]	@ (80068f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4a07      	ldr	r2, [pc, #28]	@ (80068f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80068d8:	441a      	add	r2, r3
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe f8a2 	bl	8004a2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068e6:	bf00      	nop
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20001734 	.word	0x20001734
 80068f4:	20001738 	.word	0x20001738
 80068f8:	20001c10 	.word	0x20001c10

080068fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <pvTaskIncrementMutexHeldCount+0x24>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <pvTaskIncrementMutexHeldCount+0x24>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800690e:	3201      	adds	r2, #1
 8006910:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006912:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <pvTaskIncrementMutexHeldCount+0x24>)
 8006914:	681b      	ldr	r3, [r3, #0]
	}
 8006916:	4618      	mov	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20001734 	.word	0x20001734

08006924 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800692e:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006934:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3304      	adds	r3, #4
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe f8d2 	bl	8004ae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006946:	d10a      	bne.n	800695e <prvAddCurrentTaskToDelayedList+0x3a>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800694e:	4b1a      	ldr	r3, [pc, #104]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4819      	ldr	r0, [pc, #100]	@ (80069bc <prvAddCurrentTaskToDelayedList+0x98>)
 8006958:	f7fe f867 	bl	8004a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800695c:	e026      	b.n	80069ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4413      	add	r3, r2
 8006964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006966:	4b14      	ldr	r3, [pc, #80]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	429a      	cmp	r2, r3
 8006974:	d209      	bcs.n	800698a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006976:	4b12      	ldr	r3, [pc, #72]	@ (80069c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b0f      	ldr	r3, [pc, #60]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fe f875 	bl	8004a72 <vListInsert>
}
 8006988:	e010      	b.n	80069ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800698a:	4b0e      	ldr	r3, [pc, #56]	@ (80069c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3304      	adds	r3, #4
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7fe f86b 	bl	8004a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800699c:	4b0a      	ldr	r3, [pc, #40]	@ (80069c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d202      	bcs.n	80069ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069a6:	4a08      	ldr	r2, [pc, #32]	@ (80069c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6013      	str	r3, [r2, #0]
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20001c0c 	.word	0x20001c0c
 80069b8:	20001734 	.word	0x20001734
 80069bc:	20001bf4 	.word	0x20001bf4
 80069c0:	20001bc4 	.word	0x20001bc4
 80069c4:	20001bc0 	.word	0x20001bc0
 80069c8:	20001c28 	.word	0x20001c28

080069cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	@ 0x28
 80069d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069d6:	f000 fb13 	bl	8007000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069da:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <xTimerCreateTimerTask+0x84>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d021      	beq.n	8006a26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069ea:	1d3a      	adds	r2, r7, #4
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	f107 030c 	add.w	r3, r7, #12
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fd ffd1 	bl	800499c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	9202      	str	r2, [sp, #8]
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	2302      	movs	r3, #2
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	4911      	ldr	r1, [pc, #68]	@ (8006a54 <xTimerCreateTimerTask+0x88>)
 8006a0e:	4812      	ldr	r0, [pc, #72]	@ (8006a58 <xTimerCreateTimerTask+0x8c>)
 8006a10:	f7fe ff22 	bl	8005858 <xTaskCreateStatic>
 8006a14:	4603      	mov	r3, r0
 8006a16:	4a11      	ldr	r2, [pc, #68]	@ (8006a5c <xTimerCreateTimerTask+0x90>)
 8006a18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a1a:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <xTimerCreateTimerTask+0x90>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a22:	2301      	movs	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	613b      	str	r3, [r7, #16]
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a44:	697b      	ldr	r3, [r7, #20]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20001c64 	.word	0x20001c64
 8006a54:	08009570 	.word	0x08009570
 8006a58:	08006b99 	.word	0x08006b99
 8006a5c:	20001c68 	.word	0x20001c68

08006a60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	@ 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	623b      	str	r3, [r7, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a90:	4b19      	ldr	r3, [pc, #100]	@ (8006af8 <xTimerGenericCommand+0x98>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02a      	beq.n	8006aee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	dc18      	bgt.n	8006adc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aaa:	f7ff fdad 	bl	8006608 <xTaskGetSchedulerState>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d109      	bne.n	8006ac8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <xTimerGenericCommand+0x98>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	f107 0110 	add.w	r1, r7, #16
 8006abc:	2300      	movs	r3, #0
 8006abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac0:	f7fe f9b2 	bl	8004e28 <xQueueGenericSend>
 8006ac4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ac6:	e012      	b.n	8006aee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <xTimerGenericCommand+0x98>)
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	f107 0110 	add.w	r1, r7, #16
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f7fe f9a8 	bl	8004e28 <xQueueGenericSend>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ada:	e008      	b.n	8006aee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <xTimerGenericCommand+0x98>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	f107 0110 	add.w	r1, r7, #16
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	f7fe faa0 	bl	800502c <xQueueGenericSendFromISR>
 8006aec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3728      	adds	r7, #40	@ 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20001c64 	.word	0x20001c64

08006afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b06:	4b23      	ldr	r3, [pc, #140]	@ (8006b94 <prvProcessExpiredTimer+0x98>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fd ffe5 	bl	8004ae4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d023      	beq.n	8006b70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	18d1      	adds	r1, r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	6978      	ldr	r0, [r7, #20]
 8006b36:	f000 f8d5 	bl	8006ce4 <prvInsertTimerInActiveList>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d020      	beq.n	8006b82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b40:	2300      	movs	r3, #0
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	2300      	movs	r3, #0
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6978      	ldr	r0, [r7, #20]
 8006b4c:	f7ff ff88 	bl	8006a60 <xTimerGenericCommand>
 8006b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d114      	bne.n	8006b82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	60fb      	str	r3, [r7, #12]
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	e7fd      	b.n	8006b6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	4798      	blx	r3
}
 8006b8a:	bf00      	nop
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20001c5c 	.word	0x20001c5c

08006b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba0:	f107 0308 	add.w	r3, r7, #8
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f859 	bl	8006c5c <prvGetNextExpireTime>
 8006baa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f805 	bl	8006bc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bb6:	f000 f8d7 	bl	8006d68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bba:	bf00      	nop
 8006bbc:	e7f0      	b.n	8006ba0 <prvTimerTask+0x8>
	...

08006bc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bca:	f7ff f929 	bl	8005e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f866 	bl	8006ca4 <prvSampleTimeNow>
 8006bd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d130      	bne.n	8006c42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <prvProcessTimerOrBlockTask+0x3c>
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d806      	bhi.n	8006bfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bee:	f7ff f925 	bl	8005e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ff81 	bl	8006afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bfa:	e024      	b.n	8006c46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <prvProcessTimerOrBlockTask+0x90>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <prvProcessTimerOrBlockTask+0x50>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <prvProcessTimerOrBlockTask+0x52>
 8006c10:	2300      	movs	r3, #0
 8006c12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c14:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <prvProcessTimerOrBlockTask+0x94>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	f7fe fde5 	bl	80057f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c26:	f7ff f909 	bl	8005e3c <xTaskResumeAll>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c30:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <prvProcessTimerOrBlockTask+0x98>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
}
 8006c40:	e001      	b.n	8006c46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c42:	f7ff f8fb 	bl	8005e3c <xTaskResumeAll>
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20001c60 	.word	0x20001c60
 8006c54:	20001c64 	.word	0x20001c64
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca0 <prvGetNextExpireTime+0x44>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <prvGetNextExpireTime+0x16>
 8006c6e:	2201      	movs	r2, #1
 8006c70:	e000      	b.n	8006c74 <prvGetNextExpireTime+0x18>
 8006c72:	2200      	movs	r2, #0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c80:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <prvGetNextExpireTime+0x44>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e001      	b.n	8006c90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c90:	68fb      	ldr	r3, [r7, #12]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20001c5c 	.word	0x20001c5c

08006ca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cac:	f7ff f964 	bl	8005f78 <xTaskGetTickCount>
 8006cb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce0 <prvSampleTimeNow+0x3c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d205      	bcs.n	8006cc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cbc:	f000 f93a 	bl	8006f34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e002      	b.n	8006cce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cce:	4a04      	ldr	r2, [pc, #16]	@ (8006ce0 <prvSampleTimeNow+0x3c>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20001c6c 	.word	0x20001c6c

08006ce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d812      	bhi.n	8006d30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d302      	bcc.n	8006d1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e01b      	b.n	8006d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d1e:	4b10      	ldr	r3, [pc, #64]	@ (8006d60 <prvInsertTimerInActiveList+0x7c>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7fd fea2 	bl	8004a72 <vListInsert>
 8006d2e:	e012      	b.n	8006d56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d206      	bcs.n	8006d46 <prvInsertTimerInActiveList+0x62>
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d302      	bcc.n	8006d46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e007      	b.n	8006d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d46:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <prvInsertTimerInActiveList+0x80>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f7fd fe8e 	bl	8004a72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d56:	697b      	ldr	r3, [r7, #20]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20001c60 	.word	0x20001c60
 8006d64:	20001c5c 	.word	0x20001c5c

08006d68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	@ 0x38
 8006d6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d6e:	e0ce      	b.n	8006f0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da19      	bge.n	8006daa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	3304      	adds	r3, #4
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61fb      	str	r3, [r7, #28]
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	e7fd      	b.n	8006d96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da0:	6850      	ldr	r0, [r2, #4]
 8006da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da4:	6892      	ldr	r2, [r2, #8]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f2c0 80ae 	blt.w	8006f0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fd fe8e 	bl	8004ae4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dc8:	463b      	mov	r3, r7
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ff6a 	bl	8006ca4 <prvSampleTimeNow>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	f200 8097 	bhi.w	8006f08 <prvProcessReceivedCommands+0x1a0>
 8006dda:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <prvProcessReceivedCommands+0x78>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e09 	.word	0x08006e09
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e09 	.word	0x08006e09
 8006dec:	08006e7f 	.word	0x08006e7f
 8006df0:	08006e93 	.word	0x08006e93
 8006df4:	08006edf 	.word	0x08006edf
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e09 	.word	0x08006e09
 8006e00:	08006e7f 	.word	0x08006e7f
 8006e04:	08006e93 	.word	0x08006e93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	18d1      	adds	r1, r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e28:	f7ff ff5c 	bl	8006ce4 <prvInsertTimerInActiveList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d06c      	beq.n	8006f0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d061      	beq.n	8006f0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	441a      	add	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e5a:	f7ff fe01 	bl	8006a60 <xTimerGenericCommand>
 8006e5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d152      	bne.n	8006f0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	61bb      	str	r3, [r7, #24]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e90:	e03d      	b.n	8006f0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10b      	bne.n	8006eca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	617b      	str	r3, [r7, #20]
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	e7fd      	b.n	8006ec6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	18d1      	adds	r1, r2, r3
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed8:	f7ff ff04 	bl	8006ce4 <prvInsertTimerInActiveList>
					break;
 8006edc:	e017      	b.n	8006f0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eee:	f000 fbeb 	bl	80076c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ef2:	e00c      	b.n	8006f0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f06:	e002      	b.n	8006f0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006f08:	bf00      	nop
 8006f0a:	e000      	b.n	8006f0e <prvProcessReceivedCommands+0x1a6>
					break;
 8006f0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f0e:	4b08      	ldr	r3, [pc, #32]	@ (8006f30 <prvProcessReceivedCommands+0x1c8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	1d39      	adds	r1, r7, #4
 8006f14:	2200      	movs	r2, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe f926 	bl	8005168 <xQueueReceive>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f47f af26 	bne.w	8006d70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	3730      	adds	r7, #48	@ 0x30
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20001c64 	.word	0x20001c64

08006f34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f3a:	e049      	b.n	8006fd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ff8 <prvSwitchTimerLists+0xc4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f46:	4b2c      	ldr	r3, [pc, #176]	@ (8006ff8 <prvSwitchTimerLists+0xc4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fd fdc5 	bl	8004ae4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d02f      	beq.n	8006fd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d90e      	bls.n	8006fa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <prvSwitchTimerLists+0xc4>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fd fd6a 	bl	8004a72 <vListInsert>
 8006f9e:	e017      	b.n	8006fd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7ff fd58 	bl	8006a60 <xTimerGenericCommand>
 8006fb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	603b      	str	r3, [r7, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fd0:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <prvSwitchTimerLists+0xc4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1b0      	bne.n	8006f3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fda:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <prvSwitchTimerLists+0xc4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fe0:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <prvSwitchTimerLists+0xc8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a04      	ldr	r2, [pc, #16]	@ (8006ff8 <prvSwitchTimerLists+0xc4>)
 8006fe6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fe8:	4a04      	ldr	r2, [pc, #16]	@ (8006ffc <prvSwitchTimerLists+0xc8>)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	6013      	str	r3, [r2, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20001c5c 	.word	0x20001c5c
 8006ffc:	20001c60 	.word	0x20001c60

08007000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007006:	f000 f96f 	bl	80072e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800700a:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <prvCheckForValidListAndQueue+0x60>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d120      	bne.n	8007054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007012:	4814      	ldr	r0, [pc, #80]	@ (8007064 <prvCheckForValidListAndQueue+0x64>)
 8007014:	f7fd fcdc 	bl	80049d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007018:	4813      	ldr	r0, [pc, #76]	@ (8007068 <prvCheckForValidListAndQueue+0x68>)
 800701a:	f7fd fcd9 	bl	80049d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800701e:	4b13      	ldr	r3, [pc, #76]	@ (800706c <prvCheckForValidListAndQueue+0x6c>)
 8007020:	4a10      	ldr	r2, [pc, #64]	@ (8007064 <prvCheckForValidListAndQueue+0x64>)
 8007022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007024:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <prvCheckForValidListAndQueue+0x70>)
 8007026:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <prvCheckForValidListAndQueue+0x68>)
 8007028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800702a:	2300      	movs	r3, #0
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	4b11      	ldr	r3, [pc, #68]	@ (8007074 <prvCheckForValidListAndQueue+0x74>)
 8007030:	4a11      	ldr	r2, [pc, #68]	@ (8007078 <prvCheckForValidListAndQueue+0x78>)
 8007032:	2110      	movs	r1, #16
 8007034:	200a      	movs	r0, #10
 8007036:	f7fd fde9 	bl	8004c0c <xQueueGenericCreateStatic>
 800703a:	4603      	mov	r3, r0
 800703c:	4a08      	ldr	r2, [pc, #32]	@ (8007060 <prvCheckForValidListAndQueue+0x60>)
 800703e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <prvCheckForValidListAndQueue+0x60>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007048:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <prvCheckForValidListAndQueue+0x60>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	490b      	ldr	r1, [pc, #44]	@ (800707c <prvCheckForValidListAndQueue+0x7c>)
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fba4 	bl	800579c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007054:	f000 f97a 	bl	800734c <vPortExitCritical>
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20001c64 	.word	0x20001c64
 8007064:	20001c34 	.word	0x20001c34
 8007068:	20001c48 	.word	0x20001c48
 800706c:	20001c5c 	.word	0x20001c5c
 8007070:	20001c60 	.word	0x20001c60
 8007074:	20001d10 	.word	0x20001d10
 8007078:	20001c70 	.word	0x20001c70
 800707c:	08009578 	.word	0x08009578

08007080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3b04      	subs	r3, #4
 8007090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3b04      	subs	r3, #4
 800709e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f023 0201 	bic.w	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3b04      	subs	r3, #4
 80070ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070b0:	4a0c      	ldr	r2, [pc, #48]	@ (80070e4 <pxPortInitialiseStack+0x64>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3b14      	subs	r3, #20
 80070ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3b04      	subs	r3, #4
 80070c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f06f 0202 	mvn.w	r2, #2
 80070ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3b20      	subs	r3, #32
 80070d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070d6:	68fb      	ldr	r3, [r7, #12]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	080070e9 	.word	0x080070e9

080070e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070f2:	4b13      	ldr	r3, [pc, #76]	@ (8007140 <prvTaskExitError+0x58>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070fa:	d00b      	beq.n	8007114 <prvTaskExitError+0x2c>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <prvTaskExitError+0x28>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60bb      	str	r3, [r7, #8]
}
 8007126:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007128:	bf00      	nop
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0fc      	beq.n	800712a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000e24 	.word	0x20000e24
	...

08007150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007150:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <pxCurrentTCBConst2>)
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	f380 8809 	msr	PSP, r0
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f04f 0000 	mov.w	r0, #0
 8007166:	f380 8811 	msr	BASEPRI, r0
 800716a:	4770      	bx	lr
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst2>:
 8007170:	20001734 	.word	0x20001734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007178:	4808      	ldr	r0, [pc, #32]	@ (800719c <prvPortStartFirstTask+0x24>)
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	6800      	ldr	r0, [r0, #0]
 800717e:	f380 8808 	msr	MSP, r0
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8814 	msr	CONTROL, r0
 800718a:	b662      	cpsie	i
 800718c:	b661      	cpsie	f
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	df00      	svc	0
 8007198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800719a:	bf00      	nop
 800719c:	e000ed08 	.word	0xe000ed08

080071a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071a6:	4b47      	ldr	r3, [pc, #284]	@ (80072c4 <xPortStartScheduler+0x124>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a47      	ldr	r2, [pc, #284]	@ (80072c8 <xPortStartScheduler+0x128>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d10b      	bne.n	80071c8 <xPortStartScheduler+0x28>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	613b      	str	r3, [r7, #16]
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071c8:	4b3e      	ldr	r3, [pc, #248]	@ (80072c4 <xPortStartScheduler+0x124>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a3f      	ldr	r2, [pc, #252]	@ (80072cc <xPortStartScheduler+0x12c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d10b      	bne.n	80071ea <xPortStartScheduler+0x4a>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	e7fd      	b.n	80071e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071ea:	4b39      	ldr	r3, [pc, #228]	@ (80072d0 <xPortStartScheduler+0x130>)
 80071ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	22ff      	movs	r2, #255	@ 0xff
 80071fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800720c:	b2da      	uxtb	r2, r3
 800720e:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <xPortStartScheduler+0x134>)
 8007210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007212:	4b31      	ldr	r3, [pc, #196]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007214:	2207      	movs	r2, #7
 8007216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007218:	e009      	b.n	800722e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800721a:	4b2f      	ldr	r3, [pc, #188]	@ (80072d8 <xPortStartScheduler+0x138>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3b01      	subs	r3, #1
 8007220:	4a2d      	ldr	r2, [pc, #180]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007236:	2b80      	cmp	r3, #128	@ 0x80
 8007238:	d0ef      	beq.n	800721a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800723a:	4b27      	ldr	r3, [pc, #156]	@ (80072d8 <xPortStartScheduler+0x138>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1c3 0307 	rsb	r3, r3, #7
 8007242:	2b04      	cmp	r3, #4
 8007244:	d00b      	beq.n	800725e <xPortStartScheduler+0xbe>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	60bb      	str	r3, [r7, #8]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800725e:	4b1e      	ldr	r3, [pc, #120]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	4a1c      	ldr	r2, [pc, #112]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007268:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <xPortStartScheduler+0x138>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007270:	4a19      	ldr	r2, [pc, #100]	@ (80072d8 <xPortStartScheduler+0x138>)
 8007272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800727c:	4b17      	ldr	r3, [pc, #92]	@ (80072dc <xPortStartScheduler+0x13c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a16      	ldr	r2, [pc, #88]	@ (80072dc <xPortStartScheduler+0x13c>)
 8007282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007288:	4b14      	ldr	r3, [pc, #80]	@ (80072dc <xPortStartScheduler+0x13c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <xPortStartScheduler+0x13c>)
 800728e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007294:	f000 f8da 	bl	800744c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007298:	4b11      	ldr	r3, [pc, #68]	@ (80072e0 <xPortStartScheduler+0x140>)
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800729e:	f000 f8f9 	bl	8007494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072a2:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <xPortStartScheduler+0x144>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a0f      	ldr	r2, [pc, #60]	@ (80072e4 <xPortStartScheduler+0x144>)
 80072a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072ae:	f7ff ff63 	bl	8007178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072b2:	f7fe ff2b 	bl	800610c <vTaskSwitchContext>
	prvTaskExitError();
 80072b6:	f7ff ff17 	bl	80070e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	e000ed00 	.word	0xe000ed00
 80072c8:	410fc271 	.word	0x410fc271
 80072cc:	410fc270 	.word	0x410fc270
 80072d0:	e000e400 	.word	0xe000e400
 80072d4:	20001d60 	.word	0x20001d60
 80072d8:	20001d64 	.word	0x20001d64
 80072dc:	e000ed20 	.word	0xe000ed20
 80072e0:	20000e24 	.word	0x20000e24
 80072e4:	e000ef34 	.word	0xe000ef34

080072e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007302:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <vPortEnterCritical+0x5c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	4a0e      	ldr	r2, [pc, #56]	@ (8007344 <vPortEnterCritical+0x5c>)
 800730a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800730c:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <vPortEnterCritical+0x5c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d110      	bne.n	8007336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007314:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <vPortEnterCritical+0x60>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <vPortEnterCritical+0x4e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	603b      	str	r3, [r7, #0]
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	e7fd      	b.n	8007332 <vPortEnterCritical+0x4a>
	}
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000e24 	.word	0x20000e24
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007352:	4b12      	ldr	r3, [pc, #72]	@ (800739c <vPortExitCritical+0x50>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <vPortExitCritical+0x26>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	607b      	str	r3, [r7, #4]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <vPortExitCritical+0x50>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3b01      	subs	r3, #1
 8007378:	4a08      	ldr	r2, [pc, #32]	@ (800739c <vPortExitCritical+0x50>)
 800737a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800737c:	4b07      	ldr	r3, [pc, #28]	@ (800739c <vPortExitCritical+0x50>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <vPortExitCritical+0x44>
 8007384:	2300      	movs	r3, #0
 8007386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8811 	msr	BASEPRI, r3
}
 800738e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000e24 	.word	0x20000e24

080073a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073a0:	f3ef 8009 	mrs	r0, PSP
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	4b15      	ldr	r3, [pc, #84]	@ (8007400 <pxCurrentTCBConst>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	f01e 0f10 	tst.w	lr, #16
 80073b0:	bf08      	it	eq
 80073b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	6010      	str	r0, [r2, #0]
 80073bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073c4:	f380 8811 	msr	BASEPRI, r0
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f7fe fe9c 	bl	800610c <vTaskSwitchContext>
 80073d4:	f04f 0000 	mov.w	r0, #0
 80073d8:	f380 8811 	msr	BASEPRI, r0
 80073dc:	bc09      	pop	{r0, r3}
 80073de:	6819      	ldr	r1, [r3, #0]
 80073e0:	6808      	ldr	r0, [r1, #0]
 80073e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e6:	f01e 0f10 	tst.w	lr, #16
 80073ea:	bf08      	it	eq
 80073ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073f0:	f380 8809 	msr	PSP, r0
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	f3af 8000 	nop.w

08007400 <pxCurrentTCBConst>:
 8007400:	20001734 	.word	0x20001734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop

08007408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007422:	f7fe fdb9 	bl	8005f98 <xTaskIncrementTick>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <xPortSysTickHandler+0x40>)
 800742e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	2300      	movs	r3, #0
 8007436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <vPortSetupTimerInterrupt+0x34>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007456:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <vPortSetupTimerInterrupt+0x38>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <vPortSetupTimerInterrupt+0x3c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a0a      	ldr	r2, [pc, #40]	@ (800748c <vPortSetupTimerInterrupt+0x40>)
 8007462:	fba2 2303 	umull	r2, r3, r2, r3
 8007466:	099b      	lsrs	r3, r3, #6
 8007468:	4a09      	ldr	r2, [pc, #36]	@ (8007490 <vPortSetupTimerInterrupt+0x44>)
 800746a:	3b01      	subs	r3, #1
 800746c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800746e:	4b04      	ldr	r3, [pc, #16]	@ (8007480 <vPortSetupTimerInterrupt+0x34>)
 8007470:	2207      	movs	r2, #7
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	e000e010 	.word	0xe000e010
 8007484:	e000e018 	.word	0xe000e018
 8007488:	20000e18 	.word	0x20000e18
 800748c:	10624dd3 	.word	0x10624dd3
 8007490:	e000e014 	.word	0xe000e014

08007494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074a4 <vPortEnableVFP+0x10>
 8007498:	6801      	ldr	r1, [r0, #0]
 800749a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800749e:	6001      	str	r1, [r0, #0]
 80074a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074a2:	bf00      	nop
 80074a4:	e000ed88 	.word	0xe000ed88

080074a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ae:	f3ef 8305 	mrs	r3, IPSR
 80074b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d915      	bls.n	80074e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ba:	4a18      	ldr	r2, [pc, #96]	@ (800751c <vPortValidateInterruptPriority+0x74>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074c4:	4b16      	ldr	r3, [pc, #88]	@ (8007520 <vPortValidateInterruptPriority+0x78>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	7afa      	ldrb	r2, [r7, #11]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d20b      	bcs.n	80074e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007524 <vPortValidateInterruptPriority+0x7c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <vPortValidateInterruptPriority+0x80>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d90b      	bls.n	800750e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	603b      	str	r3, [r7, #0]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <vPortValidateInterruptPriority+0x62>
	}
 800750e:	bf00      	nop
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	e000e3f0 	.word	0xe000e3f0
 8007520:	20001d60 	.word	0x20001d60
 8007524:	e000ed0c 	.word	0xe000ed0c
 8007528:	20001d64 	.word	0x20001d64

0800752c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	@ 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007538:	f7fe fc72 	bl	8005e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800753c:	4b5c      	ldr	r3, [pc, #368]	@ (80076b0 <pvPortMalloc+0x184>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007544:	f000 f924 	bl	8007790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007548:	4b5a      	ldr	r3, [pc, #360]	@ (80076b4 <pvPortMalloc+0x188>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8095 	bne.w	8007680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01e      	beq.n	800759a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800755c:	2208      	movs	r2, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d015      	beq.n	800759a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f023 0307 	bic.w	r3, r3, #7
 8007574:	3308      	adds	r3, #8
 8007576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <pvPortMalloc+0x6e>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	617b      	str	r3, [r7, #20]
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	e7fd      	b.n	8007596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d06f      	beq.n	8007680 <pvPortMalloc+0x154>
 80075a0:	4b45      	ldr	r3, [pc, #276]	@ (80076b8 <pvPortMalloc+0x18c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d86a      	bhi.n	8007680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075aa:	4b44      	ldr	r3, [pc, #272]	@ (80076bc <pvPortMalloc+0x190>)
 80075ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075ae:	4b43      	ldr	r3, [pc, #268]	@ (80076bc <pvPortMalloc+0x190>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075b4:	e004      	b.n	80075c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d903      	bls.n	80075d2 <pvPortMalloc+0xa6>
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f1      	bne.n	80075b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075d2:	4b37      	ldr	r3, [pc, #220]	@ (80076b0 <pvPortMalloc+0x184>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d8:	429a      	cmp	r2, r3
 80075da:	d051      	beq.n	8007680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	4413      	add	r3, r2
 80075e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad2      	subs	r2, r2, r3
 80075f6:	2308      	movs	r3, #8
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d920      	bls.n	8007640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4413      	add	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <pvPortMalloc+0xfc>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	613b      	str	r3, [r7, #16]
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	e7fd      	b.n	8007624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800763a:	69b8      	ldr	r0, [r7, #24]
 800763c:	f000 f90a 	bl	8007854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007640:	4b1d      	ldr	r3, [pc, #116]	@ (80076b8 <pvPortMalloc+0x18c>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	4a1b      	ldr	r2, [pc, #108]	@ (80076b8 <pvPortMalloc+0x18c>)
 800764c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800764e:	4b1a      	ldr	r3, [pc, #104]	@ (80076b8 <pvPortMalloc+0x18c>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b1b      	ldr	r3, [pc, #108]	@ (80076c0 <pvPortMalloc+0x194>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d203      	bcs.n	8007662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800765a:	4b17      	ldr	r3, [pc, #92]	@ (80076b8 <pvPortMalloc+0x18c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a18      	ldr	r2, [pc, #96]	@ (80076c0 <pvPortMalloc+0x194>)
 8007660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <pvPortMalloc+0x188>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	431a      	orrs	r2, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <pvPortMalloc+0x198>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <pvPortMalloc+0x198>)
 800767e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007680:	f7fe fbdc 	bl	8005e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <pvPortMalloc+0x17a>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <pvPortMalloc+0x176>
	return pvReturn;
 80076a6:	69fb      	ldr	r3, [r7, #28]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3728      	adds	r7, #40	@ 0x28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20005970 	.word	0x20005970
 80076b4:	20005984 	.word	0x20005984
 80076b8:	20005974 	.word	0x20005974
 80076bc:	20005968 	.word	0x20005968
 80076c0:	20005978 	.word	0x20005978
 80076c4:	2000597c 	.word	0x2000597c

080076c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04f      	beq.n	800777a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076da:	2308      	movs	r3, #8
 80076dc:	425b      	negs	r3, r3
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4b25      	ldr	r3, [pc, #148]	@ (8007784 <vPortFree+0xbc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <vPortFree+0x46>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60fb      	str	r3, [r7, #12]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <vPortFree+0x66>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60bb      	str	r3, [r7, #8]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	4b14      	ldr	r3, [pc, #80]	@ (8007784 <vPortFree+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4013      	ands	r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01e      	beq.n	800777a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11a      	bne.n	800777a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <vPortFree+0xbc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	43db      	mvns	r3, r3
 800774e:	401a      	ands	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007754:	f7fe fb64 	bl	8005e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <vPortFree+0xc0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4413      	add	r3, r2
 8007762:	4a09      	ldr	r2, [pc, #36]	@ (8007788 <vPortFree+0xc0>)
 8007764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007766:	6938      	ldr	r0, [r7, #16]
 8007768:	f000 f874 	bl	8007854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800776c:	4b07      	ldr	r3, [pc, #28]	@ (800778c <vPortFree+0xc4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3301      	adds	r3, #1
 8007772:	4a06      	ldr	r2, [pc, #24]	@ (800778c <vPortFree+0xc4>)
 8007774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007776:	f7fe fb61 	bl	8005e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20005984 	.word	0x20005984
 8007788:	20005974 	.word	0x20005974
 800778c:	20005980 	.word	0x20005980

08007790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007796:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800779a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800779c:	4b27      	ldr	r3, [pc, #156]	@ (800783c <prvHeapInit+0xac>)
 800779e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3307      	adds	r3, #7
 80077ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0307 	bic.w	r3, r3, #7
 80077b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	4a1f      	ldr	r2, [pc, #124]	@ (800783c <prvHeapInit+0xac>)
 80077c0:	4413      	add	r3, r2
 80077c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007840 <prvHeapInit+0xb0>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007840 <prvHeapInit+0xb0>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077dc:	2208      	movs	r2, #8
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0307 	bic.w	r3, r3, #7
 80077ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a15      	ldr	r2, [pc, #84]	@ (8007844 <prvHeapInit+0xb4>)
 80077f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077f2:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <prvHeapInit+0xb4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2200      	movs	r2, #0
 80077f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077fa:	4b12      	ldr	r3, [pc, #72]	@ (8007844 <prvHeapInit+0xb4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007810:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <prvHeapInit+0xb4>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4a0a      	ldr	r2, [pc, #40]	@ (8007848 <prvHeapInit+0xb8>)
 800781e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4a09      	ldr	r2, [pc, #36]	@ (800784c <prvHeapInit+0xbc>)
 8007826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <prvHeapInit+0xc0>)
 800782a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800782e:	601a      	str	r2, [r3, #0]
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20001d68 	.word	0x20001d68
 8007840:	20005968 	.word	0x20005968
 8007844:	20005970 	.word	0x20005970
 8007848:	20005978 	.word	0x20005978
 800784c:	20005974 	.word	0x20005974
 8007850:	20005984 	.word	0x20005984

08007854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800785c:	4b28      	ldr	r3, [pc, #160]	@ (8007900 <prvInsertBlockIntoFreeList+0xac>)
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e002      	b.n	8007868 <prvInsertBlockIntoFreeList+0x14>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	429a      	cmp	r2, r3
 8007870:	d8f7      	bhi.n	8007862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d108      	bne.n	8007896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	441a      	add	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d118      	bne.n	80078dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <prvInsertBlockIntoFreeList+0xb0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d00d      	beq.n	80078d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	441a      	add	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	e008      	b.n	80078e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <prvInsertBlockIntoFreeList+0xb0>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e003      	b.n	80078e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d002      	beq.n	80078f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20005968 	.word	0x20005968
 8007904:	20005970 	.word	0x20005970

08007908 <siprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b500      	push	{lr}
 800790c:	b09c      	sub	sp, #112	@ 0x70
 800790e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007910:	9002      	str	r0, [sp, #8]
 8007912:	9006      	str	r0, [sp, #24]
 8007914:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007918:	4809      	ldr	r0, [pc, #36]	@ (8007940 <siprintf+0x38>)
 800791a:	9107      	str	r1, [sp, #28]
 800791c:	9104      	str	r1, [sp, #16]
 800791e:	4909      	ldr	r1, [pc, #36]	@ (8007944 <siprintf+0x3c>)
 8007920:	f853 2b04 	ldr.w	r2, [r3], #4
 8007924:	9105      	str	r1, [sp, #20]
 8007926:	6800      	ldr	r0, [r0, #0]
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	a902      	add	r1, sp, #8
 800792c:	f000 f9f8 	bl	8007d20 <_svfiprintf_r>
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	b01c      	add	sp, #112	@ 0x70
 8007938:	f85d eb04 	ldr.w	lr, [sp], #4
 800793c:	b003      	add	sp, #12
 800793e:	4770      	bx	lr
 8007940:	20000e28 	.word	0x20000e28
 8007944:	ffff0208 	.word	0xffff0208

08007948 <memset>:
 8007948:	4402      	add	r2, r0
 800794a:	4603      	mov	r3, r0
 800794c:	4293      	cmp	r3, r2
 800794e:	d100      	bne.n	8007952 <memset+0xa>
 8007950:	4770      	bx	lr
 8007952:	f803 1b01 	strb.w	r1, [r3], #1
 8007956:	e7f9      	b.n	800794c <memset+0x4>

08007958 <_reclaim_reent>:
 8007958:	4b29      	ldr	r3, [pc, #164]	@ (8007a00 <_reclaim_reent+0xa8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4283      	cmp	r3, r0
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	4604      	mov	r4, r0
 8007962:	d04b      	beq.n	80079fc <_reclaim_reent+0xa4>
 8007964:	69c3      	ldr	r3, [r0, #28]
 8007966:	b1ab      	cbz	r3, 8007994 <_reclaim_reent+0x3c>
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	b16b      	cbz	r3, 8007988 <_reclaim_reent+0x30>
 800796c:	2500      	movs	r5, #0
 800796e:	69e3      	ldr	r3, [r4, #28]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	5959      	ldr	r1, [r3, r5]
 8007974:	2900      	cmp	r1, #0
 8007976:	d13b      	bne.n	80079f0 <_reclaim_reent+0x98>
 8007978:	3504      	adds	r5, #4
 800797a:	2d80      	cmp	r5, #128	@ 0x80
 800797c:	d1f7      	bne.n	800796e <_reclaim_reent+0x16>
 800797e:	69e3      	ldr	r3, [r4, #28]
 8007980:	4620      	mov	r0, r4
 8007982:	68d9      	ldr	r1, [r3, #12]
 8007984:	f000 f878 	bl	8007a78 <_free_r>
 8007988:	69e3      	ldr	r3, [r4, #28]
 800798a:	6819      	ldr	r1, [r3, #0]
 800798c:	b111      	cbz	r1, 8007994 <_reclaim_reent+0x3c>
 800798e:	4620      	mov	r0, r4
 8007990:	f000 f872 	bl	8007a78 <_free_r>
 8007994:	6961      	ldr	r1, [r4, #20]
 8007996:	b111      	cbz	r1, 800799e <_reclaim_reent+0x46>
 8007998:	4620      	mov	r0, r4
 800799a:	f000 f86d 	bl	8007a78 <_free_r>
 800799e:	69e1      	ldr	r1, [r4, #28]
 80079a0:	b111      	cbz	r1, 80079a8 <_reclaim_reent+0x50>
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 f868 	bl	8007a78 <_free_r>
 80079a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80079aa:	b111      	cbz	r1, 80079b2 <_reclaim_reent+0x5a>
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 f863 	bl	8007a78 <_free_r>
 80079b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079b4:	b111      	cbz	r1, 80079bc <_reclaim_reent+0x64>
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f85e 	bl	8007a78 <_free_r>
 80079bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80079be:	b111      	cbz	r1, 80079c6 <_reclaim_reent+0x6e>
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 f859 	bl	8007a78 <_free_r>
 80079c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80079c8:	b111      	cbz	r1, 80079d0 <_reclaim_reent+0x78>
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f854 	bl	8007a78 <_free_r>
 80079d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80079d2:	b111      	cbz	r1, 80079da <_reclaim_reent+0x82>
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 f84f 	bl	8007a78 <_free_r>
 80079da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80079dc:	b111      	cbz	r1, 80079e4 <_reclaim_reent+0x8c>
 80079de:	4620      	mov	r0, r4
 80079e0:	f000 f84a 	bl	8007a78 <_free_r>
 80079e4:	6a23      	ldr	r3, [r4, #32]
 80079e6:	b14b      	cbz	r3, 80079fc <_reclaim_reent+0xa4>
 80079e8:	4620      	mov	r0, r4
 80079ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079ee:	4718      	bx	r3
 80079f0:	680e      	ldr	r6, [r1, #0]
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 f840 	bl	8007a78 <_free_r>
 80079f8:	4631      	mov	r1, r6
 80079fa:	e7bb      	b.n	8007974 <_reclaim_reent+0x1c>
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	bf00      	nop
 8007a00:	20000e28 	.word	0x20000e28

08007a04 <__errno>:
 8007a04:	4b01      	ldr	r3, [pc, #4]	@ (8007a0c <__errno+0x8>)
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20000e28 	.word	0x20000e28

08007a10 <__libc_init_array>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	4d0d      	ldr	r5, [pc, #52]	@ (8007a48 <__libc_init_array+0x38>)
 8007a14:	4c0d      	ldr	r4, [pc, #52]	@ (8007a4c <__libc_init_array+0x3c>)
 8007a16:	1b64      	subs	r4, r4, r5
 8007a18:	10a4      	asrs	r4, r4, #2
 8007a1a:	2600      	movs	r6, #0
 8007a1c:	42a6      	cmp	r6, r4
 8007a1e:	d109      	bne.n	8007a34 <__libc_init_array+0x24>
 8007a20:	4d0b      	ldr	r5, [pc, #44]	@ (8007a50 <__libc_init_array+0x40>)
 8007a22:	4c0c      	ldr	r4, [pc, #48]	@ (8007a54 <__libc_init_array+0x44>)
 8007a24:	f001 fcec 	bl	8009400 <_init>
 8007a28:	1b64      	subs	r4, r4, r5
 8007a2a:	10a4      	asrs	r4, r4, #2
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	42a6      	cmp	r6, r4
 8007a30:	d105      	bne.n	8007a3e <__libc_init_array+0x2e>
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a38:	4798      	blx	r3
 8007a3a:	3601      	adds	r6, #1
 8007a3c:	e7ee      	b.n	8007a1c <__libc_init_array+0xc>
 8007a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a42:	4798      	blx	r3
 8007a44:	3601      	adds	r6, #1
 8007a46:	e7f2      	b.n	8007a2e <__libc_init_array+0x1e>
 8007a48:	0800b278 	.word	0x0800b278
 8007a4c:	0800b278 	.word	0x0800b278
 8007a50:	0800b278 	.word	0x0800b278
 8007a54:	0800b27c 	.word	0x0800b27c

08007a58 <__retarget_lock_acquire_recursive>:
 8007a58:	4770      	bx	lr

08007a5a <__retarget_lock_release_recursive>:
 8007a5a:	4770      	bx	lr

08007a5c <memcpy>:
 8007a5c:	440a      	add	r2, r1
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007a64:	d100      	bne.n	8007a68 <memcpy+0xc>
 8007a66:	4770      	bx	lr
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a72:	4291      	cmp	r1, r2
 8007a74:	d1f9      	bne.n	8007a6a <memcpy+0xe>
 8007a76:	bd10      	pop	{r4, pc}

08007a78 <_free_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	d041      	beq.n	8007b04 <_free_r+0x8c>
 8007a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a84:	1f0c      	subs	r4, r1, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfb8      	it	lt
 8007a8a:	18e4      	addlt	r4, r4, r3
 8007a8c:	f000 f8e0 	bl	8007c50 <__malloc_lock>
 8007a90:	4a1d      	ldr	r2, [pc, #116]	@ (8007b08 <_free_r+0x90>)
 8007a92:	6813      	ldr	r3, [r2, #0]
 8007a94:	b933      	cbnz	r3, 8007aa4 <_free_r+0x2c>
 8007a96:	6063      	str	r3, [r4, #4]
 8007a98:	6014      	str	r4, [r2, #0]
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa0:	f000 b8dc 	b.w	8007c5c <__malloc_unlock>
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	d908      	bls.n	8007aba <_free_r+0x42>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	1821      	adds	r1, r4, r0
 8007aac:	428b      	cmp	r3, r1
 8007aae:	bf01      	itttt	eq
 8007ab0:	6819      	ldreq	r1, [r3, #0]
 8007ab2:	685b      	ldreq	r3, [r3, #4]
 8007ab4:	1809      	addeq	r1, r1, r0
 8007ab6:	6021      	streq	r1, [r4, #0]
 8007ab8:	e7ed      	b.n	8007a96 <_free_r+0x1e>
 8007aba:	461a      	mov	r2, r3
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	b10b      	cbz	r3, 8007ac4 <_free_r+0x4c>
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d9fa      	bls.n	8007aba <_free_r+0x42>
 8007ac4:	6811      	ldr	r1, [r2, #0]
 8007ac6:	1850      	adds	r0, r2, r1
 8007ac8:	42a0      	cmp	r0, r4
 8007aca:	d10b      	bne.n	8007ae4 <_free_r+0x6c>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	4401      	add	r1, r0
 8007ad0:	1850      	adds	r0, r2, r1
 8007ad2:	4283      	cmp	r3, r0
 8007ad4:	6011      	str	r1, [r2, #0]
 8007ad6:	d1e0      	bne.n	8007a9a <_free_r+0x22>
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	6053      	str	r3, [r2, #4]
 8007ade:	4408      	add	r0, r1
 8007ae0:	6010      	str	r0, [r2, #0]
 8007ae2:	e7da      	b.n	8007a9a <_free_r+0x22>
 8007ae4:	d902      	bls.n	8007aec <_free_r+0x74>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	e7d6      	b.n	8007a9a <_free_r+0x22>
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	1821      	adds	r1, r4, r0
 8007af0:	428b      	cmp	r3, r1
 8007af2:	bf04      	itt	eq
 8007af4:	6819      	ldreq	r1, [r3, #0]
 8007af6:	685b      	ldreq	r3, [r3, #4]
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	bf04      	itt	eq
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	6054      	str	r4, [r2, #4]
 8007b02:	e7ca      	b.n	8007a9a <_free_r+0x22>
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
 8007b06:	bf00      	nop
 8007b08:	20005acc 	.word	0x20005acc

08007b0c <sbrk_aligned>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b4c <sbrk_aligned+0x40>)
 8007b10:	460c      	mov	r4, r1
 8007b12:	6831      	ldr	r1, [r6, #0]
 8007b14:	4605      	mov	r5, r0
 8007b16:	b911      	cbnz	r1, 8007b1e <sbrk_aligned+0x12>
 8007b18:	f000 fba6 	bl	8008268 <_sbrk_r>
 8007b1c:	6030      	str	r0, [r6, #0]
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	f000 fba1 	bl	8008268 <_sbrk_r>
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	d103      	bne.n	8007b32 <sbrk_aligned+0x26>
 8007b2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b2e:	4620      	mov	r0, r4
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	1cc4      	adds	r4, r0, #3
 8007b34:	f024 0403 	bic.w	r4, r4, #3
 8007b38:	42a0      	cmp	r0, r4
 8007b3a:	d0f8      	beq.n	8007b2e <sbrk_aligned+0x22>
 8007b3c:	1a21      	subs	r1, r4, r0
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 fb92 	bl	8008268 <_sbrk_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d1f2      	bne.n	8007b2e <sbrk_aligned+0x22>
 8007b48:	e7ef      	b.n	8007b2a <sbrk_aligned+0x1e>
 8007b4a:	bf00      	nop
 8007b4c:	20005ac8 	.word	0x20005ac8

08007b50 <_malloc_r>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	1ccd      	adds	r5, r1, #3
 8007b56:	f025 0503 	bic.w	r5, r5, #3
 8007b5a:	3508      	adds	r5, #8
 8007b5c:	2d0c      	cmp	r5, #12
 8007b5e:	bf38      	it	cc
 8007b60:	250c      	movcc	r5, #12
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	4606      	mov	r6, r0
 8007b66:	db01      	blt.n	8007b6c <_malloc_r+0x1c>
 8007b68:	42a9      	cmp	r1, r5
 8007b6a:	d904      	bls.n	8007b76 <_malloc_r+0x26>
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	2000      	movs	r0, #0
 8007b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c4c <_malloc_r+0xfc>
 8007b7a:	f000 f869 	bl	8007c50 <__malloc_lock>
 8007b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b82:	461c      	mov	r4, r3
 8007b84:	bb44      	cbnz	r4, 8007bd8 <_malloc_r+0x88>
 8007b86:	4629      	mov	r1, r5
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff ffbf 	bl	8007b0c <sbrk_aligned>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	4604      	mov	r4, r0
 8007b92:	d158      	bne.n	8007c46 <_malloc_r+0xf6>
 8007b94:	f8d8 4000 	ldr.w	r4, [r8]
 8007b98:	4627      	mov	r7, r4
 8007b9a:	2f00      	cmp	r7, #0
 8007b9c:	d143      	bne.n	8007c26 <_malloc_r+0xd6>
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	d04b      	beq.n	8007c3a <_malloc_r+0xea>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	eb04 0903 	add.w	r9, r4, r3
 8007bac:	f000 fb5c 	bl	8008268 <_sbrk_r>
 8007bb0:	4581      	cmp	r9, r0
 8007bb2:	d142      	bne.n	8007c3a <_malloc_r+0xea>
 8007bb4:	6821      	ldr	r1, [r4, #0]
 8007bb6:	1a6d      	subs	r5, r5, r1
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7ff ffa6 	bl	8007b0c <sbrk_aligned>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d03a      	beq.n	8007c3a <_malloc_r+0xea>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	442b      	add	r3, r5
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	f8d8 3000 	ldr.w	r3, [r8]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	bb62      	cbnz	r2, 8007c2c <_malloc_r+0xdc>
 8007bd2:	f8c8 7000 	str.w	r7, [r8]
 8007bd6:	e00f      	b.n	8007bf8 <_malloc_r+0xa8>
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	1b52      	subs	r2, r2, r5
 8007bdc:	d420      	bmi.n	8007c20 <_malloc_r+0xd0>
 8007bde:	2a0b      	cmp	r2, #11
 8007be0:	d917      	bls.n	8007c12 <_malloc_r+0xc2>
 8007be2:	1961      	adds	r1, r4, r5
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	6025      	str	r5, [r4, #0]
 8007be8:	bf18      	it	ne
 8007bea:	6059      	strne	r1, [r3, #4]
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	bf08      	it	eq
 8007bf0:	f8c8 1000 	streq.w	r1, [r8]
 8007bf4:	5162      	str	r2, [r4, r5]
 8007bf6:	604b      	str	r3, [r1, #4]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 f82f 	bl	8007c5c <__malloc_unlock>
 8007bfe:	f104 000b 	add.w	r0, r4, #11
 8007c02:	1d23      	adds	r3, r4, #4
 8007c04:	f020 0007 	bic.w	r0, r0, #7
 8007c08:	1ac2      	subs	r2, r0, r3
 8007c0a:	bf1c      	itt	ne
 8007c0c:	1a1b      	subne	r3, r3, r0
 8007c0e:	50a3      	strne	r3, [r4, r2]
 8007c10:	e7af      	b.n	8007b72 <_malloc_r+0x22>
 8007c12:	6862      	ldr	r2, [r4, #4]
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	bf0c      	ite	eq
 8007c18:	f8c8 2000 	streq.w	r2, [r8]
 8007c1c:	605a      	strne	r2, [r3, #4]
 8007c1e:	e7eb      	b.n	8007bf8 <_malloc_r+0xa8>
 8007c20:	4623      	mov	r3, r4
 8007c22:	6864      	ldr	r4, [r4, #4]
 8007c24:	e7ae      	b.n	8007b84 <_malloc_r+0x34>
 8007c26:	463c      	mov	r4, r7
 8007c28:	687f      	ldr	r7, [r7, #4]
 8007c2a:	e7b6      	b.n	8007b9a <_malloc_r+0x4a>
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d1fb      	bne.n	8007c2c <_malloc_r+0xdc>
 8007c34:	2300      	movs	r3, #0
 8007c36:	6053      	str	r3, [r2, #4]
 8007c38:	e7de      	b.n	8007bf8 <_malloc_r+0xa8>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	6033      	str	r3, [r6, #0]
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f000 f80c 	bl	8007c5c <__malloc_unlock>
 8007c44:	e794      	b.n	8007b70 <_malloc_r+0x20>
 8007c46:	6005      	str	r5, [r0, #0]
 8007c48:	e7d6      	b.n	8007bf8 <_malloc_r+0xa8>
 8007c4a:	bf00      	nop
 8007c4c:	20005acc 	.word	0x20005acc

08007c50 <__malloc_lock>:
 8007c50:	4801      	ldr	r0, [pc, #4]	@ (8007c58 <__malloc_lock+0x8>)
 8007c52:	f7ff bf01 	b.w	8007a58 <__retarget_lock_acquire_recursive>
 8007c56:	bf00      	nop
 8007c58:	20005ac4 	.word	0x20005ac4

08007c5c <__malloc_unlock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	@ (8007c64 <__malloc_unlock+0x8>)
 8007c5e:	f7ff befc 	b.w	8007a5a <__retarget_lock_release_recursive>
 8007c62:	bf00      	nop
 8007c64:	20005ac4 	.word	0x20005ac4

08007c68 <__ssputs_r>:
 8007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	688e      	ldr	r6, [r1, #8]
 8007c6e:	461f      	mov	r7, r3
 8007c70:	42be      	cmp	r6, r7
 8007c72:	680b      	ldr	r3, [r1, #0]
 8007c74:	4682      	mov	sl, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4690      	mov	r8, r2
 8007c7a:	d82d      	bhi.n	8007cd8 <__ssputs_r+0x70>
 8007c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c84:	d026      	beq.n	8007cd4 <__ssputs_r+0x6c>
 8007c86:	6965      	ldr	r5, [r4, #20]
 8007c88:	6909      	ldr	r1, [r1, #16]
 8007c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c8e:	eba3 0901 	sub.w	r9, r3, r1
 8007c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c96:	1c7b      	adds	r3, r7, #1
 8007c98:	444b      	add	r3, r9
 8007c9a:	106d      	asrs	r5, r5, #1
 8007c9c:	429d      	cmp	r5, r3
 8007c9e:	bf38      	it	cc
 8007ca0:	461d      	movcc	r5, r3
 8007ca2:	0553      	lsls	r3, r2, #21
 8007ca4:	d527      	bpl.n	8007cf6 <__ssputs_r+0x8e>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7ff ff52 	bl	8007b50 <_malloc_r>
 8007cac:	4606      	mov	r6, r0
 8007cae:	b360      	cbz	r0, 8007d0a <__ssputs_r+0xa2>
 8007cb0:	6921      	ldr	r1, [r4, #16]
 8007cb2:	464a      	mov	r2, r9
 8007cb4:	f7ff fed2 	bl	8007a5c <memcpy>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	6126      	str	r6, [r4, #16]
 8007cc6:	6165      	str	r5, [r4, #20]
 8007cc8:	444e      	add	r6, r9
 8007cca:	eba5 0509 	sub.w	r5, r5, r9
 8007cce:	6026      	str	r6, [r4, #0]
 8007cd0:	60a5      	str	r5, [r4, #8]
 8007cd2:	463e      	mov	r6, r7
 8007cd4:	42be      	cmp	r6, r7
 8007cd6:	d900      	bls.n	8007cda <__ssputs_r+0x72>
 8007cd8:	463e      	mov	r6, r7
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	4632      	mov	r2, r6
 8007cde:	4641      	mov	r1, r8
 8007ce0:	f000 faa8 	bl	8008234 <memmove>
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	1b9b      	subs	r3, r3, r6
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	4433      	add	r3, r6
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	f000 fac6 	bl	8008288 <_realloc_r>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d1e0      	bne.n	8007cc4 <__ssputs_r+0x5c>
 8007d02:	6921      	ldr	r1, [r4, #16]
 8007d04:	4650      	mov	r0, sl
 8007d06:	f7ff feb7 	bl	8007a78 <_free_r>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	f8ca 3000 	str.w	r3, [sl]
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d1c:	e7e9      	b.n	8007cf2 <__ssputs_r+0x8a>
	...

08007d20 <_svfiprintf_r>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	4698      	mov	r8, r3
 8007d26:	898b      	ldrh	r3, [r1, #12]
 8007d28:	061b      	lsls	r3, r3, #24
 8007d2a:	b09d      	sub	sp, #116	@ 0x74
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	460d      	mov	r5, r1
 8007d30:	4614      	mov	r4, r2
 8007d32:	d510      	bpl.n	8007d56 <_svfiprintf_r+0x36>
 8007d34:	690b      	ldr	r3, [r1, #16]
 8007d36:	b973      	cbnz	r3, 8007d56 <_svfiprintf_r+0x36>
 8007d38:	2140      	movs	r1, #64	@ 0x40
 8007d3a:	f7ff ff09 	bl	8007b50 <_malloc_r>
 8007d3e:	6028      	str	r0, [r5, #0]
 8007d40:	6128      	str	r0, [r5, #16]
 8007d42:	b930      	cbnz	r0, 8007d52 <_svfiprintf_r+0x32>
 8007d44:	230c      	movs	r3, #12
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d4c:	b01d      	add	sp, #116	@ 0x74
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	2340      	movs	r3, #64	@ 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d64:	2330      	movs	r3, #48	@ 0x30
 8007d66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f04 <_svfiprintf_r+0x1e4>
 8007d6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d6e:	f04f 0901 	mov.w	r9, #1
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x60>
 8007d7c:	2a25      	cmp	r2, #37	@ 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x54>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7e>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6b 	bl	8007c68 <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80a7 	beq.w	8007ee6 <_svfiprintf_r+0x1c6>
 8007d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 809f 	beq.w	8007ee6 <_svfiprintf_r+0x1c6>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	484e      	ldr	r0, [pc, #312]	@ (8007f04 <_svfiprintf_r+0x1e4>)
 8007dca:	f7f8 fa09 	bl	80001e0 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xea>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	@ 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xfa>
 8007dee:	9a07      	ldr	r2, [sp, #28]
 8007df0:	4654      	mov	r4, sl
 8007df2:	2000      	movs	r0, #0
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	@ 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94b      	bls.n	8007e9c <_svfiprintf_r+0x17c>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x114>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x114>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	46a2      	mov	sl, r4
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0xa0>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e38:	d10a      	bne.n	8007e50 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3e:	d132      	bne.n	8007ea6 <_svfiprintf_r+0x186>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	9203      	str	r2, [sp, #12]
 8007e48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e4c:	3402      	adds	r4, #2
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f14 <_svfiprintf_r+0x1f4>
 8007e54:	7821      	ldrb	r1, [r4, #0]
 8007e56:	2203      	movs	r2, #3
 8007e58:	4650      	mov	r0, sl
 8007e5a:	f7f8 f9c1 	bl	80001e0 <memchr>
 8007e5e:	b138      	cbz	r0, 8007e70 <_svfiprintf_r+0x150>
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	eba0 000a 	sub.w	r0, r0, sl
 8007e66:	2240      	movs	r2, #64	@ 0x40
 8007e68:	4082      	lsls	r2, r0
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e74:	4824      	ldr	r0, [pc, #144]	@ (8007f08 <_svfiprintf_r+0x1e8>)
 8007e76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	f7f8 f9b0 	bl	80001e0 <memchr>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d036      	beq.n	8007ef2 <_svfiprintf_r+0x1d2>
 8007e84:	4b21      	ldr	r3, [pc, #132]	@ (8007f0c <_svfiprintf_r+0x1ec>)
 8007e86:	bb1b      	cbnz	r3, 8007ed0 <_svfiprintf_r+0x1b0>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	3307      	adds	r3, #7
 8007e8c:	f023 0307 	bic.w	r3, r3, #7
 8007e90:	3308      	adds	r3, #8
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e96:	4433      	add	r3, r6
 8007e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e9a:	e76a      	b.n	8007d72 <_svfiprintf_r+0x52>
 8007e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	e7a8      	b.n	8007df8 <_svfiprintf_r+0xd8>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	3401      	adds	r4, #1
 8007eaa:	9305      	str	r3, [sp, #20]
 8007eac:	4619      	mov	r1, r3
 8007eae:	f04f 0c0a 	mov.w	ip, #10
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb8:	3a30      	subs	r2, #48	@ 0x30
 8007eba:	2a09      	cmp	r2, #9
 8007ebc:	d903      	bls.n	8007ec6 <_svfiprintf_r+0x1a6>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0c6      	beq.n	8007e50 <_svfiprintf_r+0x130>
 8007ec2:	9105      	str	r1, [sp, #20]
 8007ec4:	e7c4      	b.n	8007e50 <_svfiprintf_r+0x130>
 8007ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eca:	4604      	mov	r4, r0
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e7f0      	b.n	8007eb2 <_svfiprintf_r+0x192>
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8007f10 <_svfiprintf_r+0x1f0>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	4638      	mov	r0, r7
 8007edc:	f3af 8000 	nop.w
 8007ee0:	1c42      	adds	r2, r0, #1
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	d1d6      	bne.n	8007e94 <_svfiprintf_r+0x174>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	065b      	lsls	r3, r3, #25
 8007eea:	f53f af2d 	bmi.w	8007d48 <_svfiprintf_r+0x28>
 8007eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef0:	e72c      	b.n	8007d4c <_svfiprintf_r+0x2c>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <_svfiprintf_r+0x1f0>)
 8007efa:	a904      	add	r1, sp, #16
 8007efc:	4638      	mov	r0, r7
 8007efe:	f000 f879 	bl	8007ff4 <_printf_i>
 8007f02:	e7ed      	b.n	8007ee0 <_svfiprintf_r+0x1c0>
 8007f04:	0800b064 	.word	0x0800b064
 8007f08:	0800b06e 	.word	0x0800b06e
 8007f0c:	00000000 	.word	0x00000000
 8007f10:	08007c69 	.word	0x08007c69
 8007f14:	0800b06a 	.word	0x0800b06a

08007f18 <_printf_common>:
 8007f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1c:	4616      	mov	r6, r2
 8007f1e:	4698      	mov	r8, r3
 8007f20:	688a      	ldr	r2, [r1, #8]
 8007f22:	690b      	ldr	r3, [r1, #16]
 8007f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	bfb8      	it	lt
 8007f2c:	4613      	movlt	r3, r2
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f34:	4607      	mov	r7, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b10a      	cbz	r2, 8007f3e <_printf_common+0x26>
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	6033      	str	r3, [r6, #0]
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	0699      	lsls	r1, r3, #26
 8007f42:	bf42      	ittt	mi
 8007f44:	6833      	ldrmi	r3, [r6, #0]
 8007f46:	3302      	addmi	r3, #2
 8007f48:	6033      	strmi	r3, [r6, #0]
 8007f4a:	6825      	ldr	r5, [r4, #0]
 8007f4c:	f015 0506 	ands.w	r5, r5, #6
 8007f50:	d106      	bne.n	8007f60 <_printf_common+0x48>
 8007f52:	f104 0a19 	add.w	sl, r4, #25
 8007f56:	68e3      	ldr	r3, [r4, #12]
 8007f58:	6832      	ldr	r2, [r6, #0]
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	42ab      	cmp	r3, r5
 8007f5e:	dc26      	bgt.n	8007fae <_printf_common+0x96>
 8007f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	3b00      	subs	r3, #0
 8007f68:	bf18      	it	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	0692      	lsls	r2, r2, #26
 8007f6e:	d42b      	bmi.n	8007fc8 <_printf_common+0xb0>
 8007f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f74:	4641      	mov	r1, r8
 8007f76:	4638      	mov	r0, r7
 8007f78:	47c8      	blx	r9
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	d01e      	beq.n	8007fbc <_printf_common+0xa4>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	6922      	ldr	r2, [r4, #16]
 8007f82:	f003 0306 	and.w	r3, r3, #6
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	bf02      	ittt	eq
 8007f8a:	68e5      	ldreq	r5, [r4, #12]
 8007f8c:	6833      	ldreq	r3, [r6, #0]
 8007f8e:	1aed      	subeq	r5, r5, r3
 8007f90:	68a3      	ldr	r3, [r4, #8]
 8007f92:	bf0c      	ite	eq
 8007f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f98:	2500      	movne	r5, #0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bfc4      	itt	gt
 8007f9e:	1a9b      	subgt	r3, r3, r2
 8007fa0:	18ed      	addgt	r5, r5, r3
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	341a      	adds	r4, #26
 8007fa6:	42b5      	cmp	r5, r6
 8007fa8:	d11a      	bne.n	8007fe0 <_printf_common+0xc8>
 8007faa:	2000      	movs	r0, #0
 8007fac:	e008      	b.n	8007fc0 <_printf_common+0xa8>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	47c8      	blx	r9
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d103      	bne.n	8007fc4 <_printf_common+0xac>
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	e7c6      	b.n	8007f56 <_printf_common+0x3e>
 8007fc8:	18e1      	adds	r1, r4, r3
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	2030      	movs	r0, #48	@ 0x30
 8007fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fd2:	4422      	add	r2, r4
 8007fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fdc:	3302      	adds	r3, #2
 8007fde:	e7c7      	b.n	8007f70 <_printf_common+0x58>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	47c8      	blx	r9
 8007fea:	3001      	adds	r0, #1
 8007fec:	d0e6      	beq.n	8007fbc <_printf_common+0xa4>
 8007fee:	3601      	adds	r6, #1
 8007ff0:	e7d9      	b.n	8007fa6 <_printf_common+0x8e>
	...

08007ff4 <_printf_i>:
 8007ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	7e0f      	ldrb	r7, [r1, #24]
 8007ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ffc:	2f78      	cmp	r7, #120	@ 0x78
 8007ffe:	4691      	mov	r9, r2
 8008000:	4680      	mov	r8, r0
 8008002:	460c      	mov	r4, r1
 8008004:	469a      	mov	sl, r3
 8008006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800800a:	d807      	bhi.n	800801c <_printf_i+0x28>
 800800c:	2f62      	cmp	r7, #98	@ 0x62
 800800e:	d80a      	bhi.n	8008026 <_printf_i+0x32>
 8008010:	2f00      	cmp	r7, #0
 8008012:	f000 80d2 	beq.w	80081ba <_printf_i+0x1c6>
 8008016:	2f58      	cmp	r7, #88	@ 0x58
 8008018:	f000 80b9 	beq.w	800818e <_printf_i+0x19a>
 800801c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008024:	e03a      	b.n	800809c <_printf_i+0xa8>
 8008026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800802a:	2b15      	cmp	r3, #21
 800802c:	d8f6      	bhi.n	800801c <_printf_i+0x28>
 800802e:	a101      	add	r1, pc, #4	@ (adr r1, 8008034 <_printf_i+0x40>)
 8008030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008034:	0800808d 	.word	0x0800808d
 8008038:	080080a1 	.word	0x080080a1
 800803c:	0800801d 	.word	0x0800801d
 8008040:	0800801d 	.word	0x0800801d
 8008044:	0800801d 	.word	0x0800801d
 8008048:	0800801d 	.word	0x0800801d
 800804c:	080080a1 	.word	0x080080a1
 8008050:	0800801d 	.word	0x0800801d
 8008054:	0800801d 	.word	0x0800801d
 8008058:	0800801d 	.word	0x0800801d
 800805c:	0800801d 	.word	0x0800801d
 8008060:	080081a1 	.word	0x080081a1
 8008064:	080080cb 	.word	0x080080cb
 8008068:	0800815b 	.word	0x0800815b
 800806c:	0800801d 	.word	0x0800801d
 8008070:	0800801d 	.word	0x0800801d
 8008074:	080081c3 	.word	0x080081c3
 8008078:	0800801d 	.word	0x0800801d
 800807c:	080080cb 	.word	0x080080cb
 8008080:	0800801d 	.word	0x0800801d
 8008084:	0800801d 	.word	0x0800801d
 8008088:	08008163 	.word	0x08008163
 800808c:	6833      	ldr	r3, [r6, #0]
 800808e:	1d1a      	adds	r2, r3, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6032      	str	r2, [r6, #0]
 8008094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800809c:	2301      	movs	r3, #1
 800809e:	e09d      	b.n	80081dc <_printf_i+0x1e8>
 80080a0:	6833      	ldr	r3, [r6, #0]
 80080a2:	6820      	ldr	r0, [r4, #0]
 80080a4:	1d19      	adds	r1, r3, #4
 80080a6:	6031      	str	r1, [r6, #0]
 80080a8:	0606      	lsls	r6, r0, #24
 80080aa:	d501      	bpl.n	80080b0 <_printf_i+0xbc>
 80080ac:	681d      	ldr	r5, [r3, #0]
 80080ae:	e003      	b.n	80080b8 <_printf_i+0xc4>
 80080b0:	0645      	lsls	r5, r0, #25
 80080b2:	d5fb      	bpl.n	80080ac <_printf_i+0xb8>
 80080b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	da03      	bge.n	80080c4 <_printf_i+0xd0>
 80080bc:	232d      	movs	r3, #45	@ 0x2d
 80080be:	426d      	negs	r5, r5
 80080c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080c4:	4859      	ldr	r0, [pc, #356]	@ (800822c <_printf_i+0x238>)
 80080c6:	230a      	movs	r3, #10
 80080c8:	e011      	b.n	80080ee <_printf_i+0xfa>
 80080ca:	6821      	ldr	r1, [r4, #0]
 80080cc:	6833      	ldr	r3, [r6, #0]
 80080ce:	0608      	lsls	r0, r1, #24
 80080d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80080d4:	d402      	bmi.n	80080dc <_printf_i+0xe8>
 80080d6:	0649      	lsls	r1, r1, #25
 80080d8:	bf48      	it	mi
 80080da:	b2ad      	uxthmi	r5, r5
 80080dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80080de:	4853      	ldr	r0, [pc, #332]	@ (800822c <_printf_i+0x238>)
 80080e0:	6033      	str	r3, [r6, #0]
 80080e2:	bf14      	ite	ne
 80080e4:	230a      	movne	r3, #10
 80080e6:	2308      	moveq	r3, #8
 80080e8:	2100      	movs	r1, #0
 80080ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080ee:	6866      	ldr	r6, [r4, #4]
 80080f0:	60a6      	str	r6, [r4, #8]
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	bfa2      	ittt	ge
 80080f6:	6821      	ldrge	r1, [r4, #0]
 80080f8:	f021 0104 	bicge.w	r1, r1, #4
 80080fc:	6021      	strge	r1, [r4, #0]
 80080fe:	b90d      	cbnz	r5, 8008104 <_printf_i+0x110>
 8008100:	2e00      	cmp	r6, #0
 8008102:	d04b      	beq.n	800819c <_printf_i+0x1a8>
 8008104:	4616      	mov	r6, r2
 8008106:	fbb5 f1f3 	udiv	r1, r5, r3
 800810a:	fb03 5711 	mls	r7, r3, r1, r5
 800810e:	5dc7      	ldrb	r7, [r0, r7]
 8008110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008114:	462f      	mov	r7, r5
 8008116:	42bb      	cmp	r3, r7
 8008118:	460d      	mov	r5, r1
 800811a:	d9f4      	bls.n	8008106 <_printf_i+0x112>
 800811c:	2b08      	cmp	r3, #8
 800811e:	d10b      	bne.n	8008138 <_printf_i+0x144>
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	07df      	lsls	r7, r3, #31
 8008124:	d508      	bpl.n	8008138 <_printf_i+0x144>
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	6861      	ldr	r1, [r4, #4]
 800812a:	4299      	cmp	r1, r3
 800812c:	bfde      	ittt	le
 800812e:	2330      	movle	r3, #48	@ 0x30
 8008130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008134:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008138:	1b92      	subs	r2, r2, r6
 800813a:	6122      	str	r2, [r4, #16]
 800813c:	f8cd a000 	str.w	sl, [sp]
 8008140:	464b      	mov	r3, r9
 8008142:	aa03      	add	r2, sp, #12
 8008144:	4621      	mov	r1, r4
 8008146:	4640      	mov	r0, r8
 8008148:	f7ff fee6 	bl	8007f18 <_printf_common>
 800814c:	3001      	adds	r0, #1
 800814e:	d14a      	bne.n	80081e6 <_printf_i+0x1f2>
 8008150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008154:	b004      	add	sp, #16
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f043 0320 	orr.w	r3, r3, #32
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	4833      	ldr	r0, [pc, #204]	@ (8008230 <_printf_i+0x23c>)
 8008164:	2778      	movs	r7, #120	@ 0x78
 8008166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	6831      	ldr	r1, [r6, #0]
 800816e:	061f      	lsls	r7, r3, #24
 8008170:	f851 5b04 	ldr.w	r5, [r1], #4
 8008174:	d402      	bmi.n	800817c <_printf_i+0x188>
 8008176:	065f      	lsls	r7, r3, #25
 8008178:	bf48      	it	mi
 800817a:	b2ad      	uxthmi	r5, r5
 800817c:	6031      	str	r1, [r6, #0]
 800817e:	07d9      	lsls	r1, r3, #31
 8008180:	bf44      	itt	mi
 8008182:	f043 0320 	orrmi.w	r3, r3, #32
 8008186:	6023      	strmi	r3, [r4, #0]
 8008188:	b11d      	cbz	r5, 8008192 <_printf_i+0x19e>
 800818a:	2310      	movs	r3, #16
 800818c:	e7ac      	b.n	80080e8 <_printf_i+0xf4>
 800818e:	4827      	ldr	r0, [pc, #156]	@ (800822c <_printf_i+0x238>)
 8008190:	e7e9      	b.n	8008166 <_printf_i+0x172>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	f023 0320 	bic.w	r3, r3, #32
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	e7f6      	b.n	800818a <_printf_i+0x196>
 800819c:	4616      	mov	r6, r2
 800819e:	e7bd      	b.n	800811c <_printf_i+0x128>
 80081a0:	6833      	ldr	r3, [r6, #0]
 80081a2:	6825      	ldr	r5, [r4, #0]
 80081a4:	6961      	ldr	r1, [r4, #20]
 80081a6:	1d18      	adds	r0, r3, #4
 80081a8:	6030      	str	r0, [r6, #0]
 80081aa:	062e      	lsls	r6, r5, #24
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	d501      	bpl.n	80081b4 <_printf_i+0x1c0>
 80081b0:	6019      	str	r1, [r3, #0]
 80081b2:	e002      	b.n	80081ba <_printf_i+0x1c6>
 80081b4:	0668      	lsls	r0, r5, #25
 80081b6:	d5fb      	bpl.n	80081b0 <_printf_i+0x1bc>
 80081b8:	8019      	strh	r1, [r3, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	4616      	mov	r6, r2
 80081c0:	e7bc      	b.n	800813c <_printf_i+0x148>
 80081c2:	6833      	ldr	r3, [r6, #0]
 80081c4:	1d1a      	adds	r2, r3, #4
 80081c6:	6032      	str	r2, [r6, #0]
 80081c8:	681e      	ldr	r6, [r3, #0]
 80081ca:	6862      	ldr	r2, [r4, #4]
 80081cc:	2100      	movs	r1, #0
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7f8 f806 	bl	80001e0 <memchr>
 80081d4:	b108      	cbz	r0, 80081da <_printf_i+0x1e6>
 80081d6:	1b80      	subs	r0, r0, r6
 80081d8:	6060      	str	r0, [r4, #4]
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	6123      	str	r3, [r4, #16]
 80081de:	2300      	movs	r3, #0
 80081e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081e4:	e7aa      	b.n	800813c <_printf_i+0x148>
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	4632      	mov	r2, r6
 80081ea:	4649      	mov	r1, r9
 80081ec:	4640      	mov	r0, r8
 80081ee:	47d0      	blx	sl
 80081f0:	3001      	adds	r0, #1
 80081f2:	d0ad      	beq.n	8008150 <_printf_i+0x15c>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	079b      	lsls	r3, r3, #30
 80081f8:	d413      	bmi.n	8008222 <_printf_i+0x22e>
 80081fa:	68e0      	ldr	r0, [r4, #12]
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	4298      	cmp	r0, r3
 8008200:	bfb8      	it	lt
 8008202:	4618      	movlt	r0, r3
 8008204:	e7a6      	b.n	8008154 <_printf_i+0x160>
 8008206:	2301      	movs	r3, #1
 8008208:	4632      	mov	r2, r6
 800820a:	4649      	mov	r1, r9
 800820c:	4640      	mov	r0, r8
 800820e:	47d0      	blx	sl
 8008210:	3001      	adds	r0, #1
 8008212:	d09d      	beq.n	8008150 <_printf_i+0x15c>
 8008214:	3501      	adds	r5, #1
 8008216:	68e3      	ldr	r3, [r4, #12]
 8008218:	9903      	ldr	r1, [sp, #12]
 800821a:	1a5b      	subs	r3, r3, r1
 800821c:	42ab      	cmp	r3, r5
 800821e:	dcf2      	bgt.n	8008206 <_printf_i+0x212>
 8008220:	e7eb      	b.n	80081fa <_printf_i+0x206>
 8008222:	2500      	movs	r5, #0
 8008224:	f104 0619 	add.w	r6, r4, #25
 8008228:	e7f5      	b.n	8008216 <_printf_i+0x222>
 800822a:	bf00      	nop
 800822c:	0800b075 	.word	0x0800b075
 8008230:	0800b086 	.word	0x0800b086

08008234 <memmove>:
 8008234:	4288      	cmp	r0, r1
 8008236:	b510      	push	{r4, lr}
 8008238:	eb01 0402 	add.w	r4, r1, r2
 800823c:	d902      	bls.n	8008244 <memmove+0x10>
 800823e:	4284      	cmp	r4, r0
 8008240:	4623      	mov	r3, r4
 8008242:	d807      	bhi.n	8008254 <memmove+0x20>
 8008244:	1e43      	subs	r3, r0, #1
 8008246:	42a1      	cmp	r1, r4
 8008248:	d008      	beq.n	800825c <memmove+0x28>
 800824a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800824e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008252:	e7f8      	b.n	8008246 <memmove+0x12>
 8008254:	4402      	add	r2, r0
 8008256:	4601      	mov	r1, r0
 8008258:	428a      	cmp	r2, r1
 800825a:	d100      	bne.n	800825e <memmove+0x2a>
 800825c:	bd10      	pop	{r4, pc}
 800825e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008266:	e7f7      	b.n	8008258 <memmove+0x24>

08008268 <_sbrk_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d06      	ldr	r5, [pc, #24]	@ (8008284 <_sbrk_r+0x1c>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7fa fb84 	bl	8002980 <_sbrk>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_sbrk_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_sbrk_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	20005ac0 	.word	0x20005ac0

08008288 <_realloc_r>:
 8008288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828c:	4680      	mov	r8, r0
 800828e:	4615      	mov	r5, r2
 8008290:	460c      	mov	r4, r1
 8008292:	b921      	cbnz	r1, 800829e <_realloc_r+0x16>
 8008294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4611      	mov	r1, r2
 800829a:	f7ff bc59 	b.w	8007b50 <_malloc_r>
 800829e:	b92a      	cbnz	r2, 80082ac <_realloc_r+0x24>
 80082a0:	f7ff fbea 	bl	8007a78 <_free_r>
 80082a4:	2400      	movs	r4, #0
 80082a6:	4620      	mov	r0, r4
 80082a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ac:	f000 f81a 	bl	80082e4 <_malloc_usable_size_r>
 80082b0:	4285      	cmp	r5, r0
 80082b2:	4606      	mov	r6, r0
 80082b4:	d802      	bhi.n	80082bc <_realloc_r+0x34>
 80082b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082ba:	d8f4      	bhi.n	80082a6 <_realloc_r+0x1e>
 80082bc:	4629      	mov	r1, r5
 80082be:	4640      	mov	r0, r8
 80082c0:	f7ff fc46 	bl	8007b50 <_malloc_r>
 80082c4:	4607      	mov	r7, r0
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d0ec      	beq.n	80082a4 <_realloc_r+0x1c>
 80082ca:	42b5      	cmp	r5, r6
 80082cc:	462a      	mov	r2, r5
 80082ce:	4621      	mov	r1, r4
 80082d0:	bf28      	it	cs
 80082d2:	4632      	movcs	r2, r6
 80082d4:	f7ff fbc2 	bl	8007a5c <memcpy>
 80082d8:	4621      	mov	r1, r4
 80082da:	4640      	mov	r0, r8
 80082dc:	f7ff fbcc 	bl	8007a78 <_free_r>
 80082e0:	463c      	mov	r4, r7
 80082e2:	e7e0      	b.n	80082a6 <_realloc_r+0x1e>

080082e4 <_malloc_usable_size_r>:
 80082e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e8:	1f18      	subs	r0, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfbc      	itt	lt
 80082ee:	580b      	ldrlt	r3, [r1, r0]
 80082f0:	18c0      	addlt	r0, r0, r3
 80082f2:	4770      	bx	lr
 80082f4:	0000      	movs	r0, r0
	...

080082f8 <cos>:
 80082f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082fa:	ec53 2b10 	vmov	r2, r3, d0
 80082fe:	4826      	ldr	r0, [pc, #152]	@ (8008398 <cos+0xa0>)
 8008300:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008304:	4281      	cmp	r1, r0
 8008306:	d806      	bhi.n	8008316 <cos+0x1e>
 8008308:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008390 <cos+0x98>
 800830c:	b005      	add	sp, #20
 800830e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008312:	f000 b899 	b.w	8008448 <__kernel_cos>
 8008316:	4821      	ldr	r0, [pc, #132]	@ (800839c <cos+0xa4>)
 8008318:	4281      	cmp	r1, r0
 800831a:	d908      	bls.n	800832e <cos+0x36>
 800831c:	4610      	mov	r0, r2
 800831e:	4619      	mov	r1, r3
 8008320:	f7f7 ffb2 	bl	8000288 <__aeabi_dsub>
 8008324:	ec41 0b10 	vmov	d0, r0, r1
 8008328:	b005      	add	sp, #20
 800832a:	f85d fb04 	ldr.w	pc, [sp], #4
 800832e:	4668      	mov	r0, sp
 8008330:	f000 fa0e 	bl	8008750 <__ieee754_rem_pio2>
 8008334:	f000 0003 	and.w	r0, r0, #3
 8008338:	2801      	cmp	r0, #1
 800833a:	d00b      	beq.n	8008354 <cos+0x5c>
 800833c:	2802      	cmp	r0, #2
 800833e:	d015      	beq.n	800836c <cos+0x74>
 8008340:	b9d8      	cbnz	r0, 800837a <cos+0x82>
 8008342:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008346:	ed9d 0b00 	vldr	d0, [sp]
 800834a:	f000 f87d 	bl	8008448 <__kernel_cos>
 800834e:	ec51 0b10 	vmov	r0, r1, d0
 8008352:	e7e7      	b.n	8008324 <cos+0x2c>
 8008354:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008358:	ed9d 0b00 	vldr	d0, [sp]
 800835c:	f000 f93c 	bl	80085d8 <__kernel_sin>
 8008360:	ec53 2b10 	vmov	r2, r3, d0
 8008364:	4610      	mov	r0, r2
 8008366:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800836a:	e7db      	b.n	8008324 <cos+0x2c>
 800836c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008370:	ed9d 0b00 	vldr	d0, [sp]
 8008374:	f000 f868 	bl	8008448 <__kernel_cos>
 8008378:	e7f2      	b.n	8008360 <cos+0x68>
 800837a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800837e:	ed9d 0b00 	vldr	d0, [sp]
 8008382:	2001      	movs	r0, #1
 8008384:	f000 f928 	bl	80085d8 <__kernel_sin>
 8008388:	e7e1      	b.n	800834e <cos+0x56>
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w
	...
 8008398:	3fe921fb 	.word	0x3fe921fb
 800839c:	7fefffff 	.word	0x7fefffff

080083a0 <sin>:
 80083a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083a2:	ec53 2b10 	vmov	r2, r3, d0
 80083a6:	4826      	ldr	r0, [pc, #152]	@ (8008440 <sin+0xa0>)
 80083a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083ac:	4281      	cmp	r1, r0
 80083ae:	d807      	bhi.n	80083c0 <sin+0x20>
 80083b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008438 <sin+0x98>
 80083b4:	2000      	movs	r0, #0
 80083b6:	b005      	add	sp, #20
 80083b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083bc:	f000 b90c 	b.w	80085d8 <__kernel_sin>
 80083c0:	4820      	ldr	r0, [pc, #128]	@ (8008444 <sin+0xa4>)
 80083c2:	4281      	cmp	r1, r0
 80083c4:	d908      	bls.n	80083d8 <sin+0x38>
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7f7 ff5d 	bl	8000288 <__aeabi_dsub>
 80083ce:	ec41 0b10 	vmov	d0, r0, r1
 80083d2:	b005      	add	sp, #20
 80083d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80083d8:	4668      	mov	r0, sp
 80083da:	f000 f9b9 	bl	8008750 <__ieee754_rem_pio2>
 80083de:	f000 0003 	and.w	r0, r0, #3
 80083e2:	2801      	cmp	r0, #1
 80083e4:	d00c      	beq.n	8008400 <sin+0x60>
 80083e6:	2802      	cmp	r0, #2
 80083e8:	d011      	beq.n	800840e <sin+0x6e>
 80083ea:	b9e8      	cbnz	r0, 8008428 <sin+0x88>
 80083ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083f0:	ed9d 0b00 	vldr	d0, [sp]
 80083f4:	2001      	movs	r0, #1
 80083f6:	f000 f8ef 	bl	80085d8 <__kernel_sin>
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	e7e6      	b.n	80083ce <sin+0x2e>
 8008400:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008404:	ed9d 0b00 	vldr	d0, [sp]
 8008408:	f000 f81e 	bl	8008448 <__kernel_cos>
 800840c:	e7f5      	b.n	80083fa <sin+0x5a>
 800840e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008412:	ed9d 0b00 	vldr	d0, [sp]
 8008416:	2001      	movs	r0, #1
 8008418:	f000 f8de 	bl	80085d8 <__kernel_sin>
 800841c:	ec53 2b10 	vmov	r2, r3, d0
 8008420:	4610      	mov	r0, r2
 8008422:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008426:	e7d2      	b.n	80083ce <sin+0x2e>
 8008428:	ed9d 1b02 	vldr	d1, [sp, #8]
 800842c:	ed9d 0b00 	vldr	d0, [sp]
 8008430:	f000 f80a 	bl	8008448 <__kernel_cos>
 8008434:	e7f2      	b.n	800841c <sin+0x7c>
 8008436:	bf00      	nop
	...
 8008440:	3fe921fb 	.word	0x3fe921fb
 8008444:	7fefffff 	.word	0x7fefffff

08008448 <__kernel_cos>:
 8008448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	ec57 6b10 	vmov	r6, r7, d0
 8008450:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008454:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008458:	ed8d 1b00 	vstr	d1, [sp]
 800845c:	d206      	bcs.n	800846c <__kernel_cos+0x24>
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f8 fb63 	bl	8000b2c <__aeabi_d2iz>
 8008466:	2800      	cmp	r0, #0
 8008468:	f000 8088 	beq.w	800857c <__kernel_cos+0x134>
 800846c:	4632      	mov	r2, r6
 800846e:	463b      	mov	r3, r7
 8008470:	4630      	mov	r0, r6
 8008472:	4639      	mov	r1, r7
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	4b51      	ldr	r3, [pc, #324]	@ (80085c0 <__kernel_cos+0x178>)
 800847a:	2200      	movs	r2, #0
 800847c:	4604      	mov	r4, r0
 800847e:	460d      	mov	r5, r1
 8008480:	f7f8 f8ba 	bl	80005f8 <__aeabi_dmul>
 8008484:	a340      	add	r3, pc, #256	@ (adr r3, 8008588 <__kernel_cos+0x140>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	4682      	mov	sl, r0
 800848c:	468b      	mov	fp, r1
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f8 f8b1 	bl	80005f8 <__aeabi_dmul>
 8008496:	a33e      	add	r3, pc, #248	@ (adr r3, 8008590 <__kernel_cos+0x148>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f7 fef6 	bl	800028c <__adddf3>
 80084a0:	4622      	mov	r2, r4
 80084a2:	462b      	mov	r3, r5
 80084a4:	f7f8 f8a8 	bl	80005f8 <__aeabi_dmul>
 80084a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8008598 <__kernel_cos+0x150>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f7 feeb 	bl	8000288 <__aeabi_dsub>
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	f7f8 f89f 	bl	80005f8 <__aeabi_dmul>
 80084ba:	a339      	add	r3, pc, #228	@ (adr r3, 80085a0 <__kernel_cos+0x158>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 fee4 	bl	800028c <__adddf3>
 80084c4:	4622      	mov	r2, r4
 80084c6:	462b      	mov	r3, r5
 80084c8:	f7f8 f896 	bl	80005f8 <__aeabi_dmul>
 80084cc:	a336      	add	r3, pc, #216	@ (adr r3, 80085a8 <__kernel_cos+0x160>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f7f7 fed9 	bl	8000288 <__aeabi_dsub>
 80084d6:	4622      	mov	r2, r4
 80084d8:	462b      	mov	r3, r5
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	a334      	add	r3, pc, #208	@ (adr r3, 80085b0 <__kernel_cos+0x168>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	f7f7 fed2 	bl	800028c <__adddf3>
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	4622      	mov	r2, r4
 80084f2:	462b      	mov	r3, r5
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 f878 	bl	80005f8 <__aeabi_dmul>
 8008508:	460b      	mov	r3, r1
 800850a:	4602      	mov	r2, r0
 800850c:	4629      	mov	r1, r5
 800850e:	4620      	mov	r0, r4
 8008510:	f7f7 feba 	bl	8000288 <__aeabi_dsub>
 8008514:	4b2b      	ldr	r3, [pc, #172]	@ (80085c4 <__kernel_cos+0x17c>)
 8008516:	4598      	cmp	r8, r3
 8008518:	4606      	mov	r6, r0
 800851a:	460f      	mov	r7, r1
 800851c:	d810      	bhi.n	8008540 <__kernel_cos+0xf8>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4650      	mov	r0, sl
 8008524:	4659      	mov	r1, fp
 8008526:	f7f7 feaf 	bl	8000288 <__aeabi_dsub>
 800852a:	460b      	mov	r3, r1
 800852c:	4926      	ldr	r1, [pc, #152]	@ (80085c8 <__kernel_cos+0x180>)
 800852e:	4602      	mov	r2, r0
 8008530:	2000      	movs	r0, #0
 8008532:	f7f7 fea9 	bl	8000288 <__aeabi_dsub>
 8008536:	ec41 0b10 	vmov	d0, r0, r1
 800853a:	b003      	add	sp, #12
 800853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008540:	4b22      	ldr	r3, [pc, #136]	@ (80085cc <__kernel_cos+0x184>)
 8008542:	4921      	ldr	r1, [pc, #132]	@ (80085c8 <__kernel_cos+0x180>)
 8008544:	4598      	cmp	r8, r3
 8008546:	bf8c      	ite	hi
 8008548:	4d21      	ldrhi	r5, [pc, #132]	@ (80085d0 <__kernel_cos+0x188>)
 800854a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800854e:	2400      	movs	r4, #0
 8008550:	4622      	mov	r2, r4
 8008552:	462b      	mov	r3, r5
 8008554:	2000      	movs	r0, #0
 8008556:	f7f7 fe97 	bl	8000288 <__aeabi_dsub>
 800855a:	4622      	mov	r2, r4
 800855c:	4680      	mov	r8, r0
 800855e:	4689      	mov	r9, r1
 8008560:	462b      	mov	r3, r5
 8008562:	4650      	mov	r0, sl
 8008564:	4659      	mov	r1, fp
 8008566:	f7f7 fe8f 	bl	8000288 <__aeabi_dsub>
 800856a:	4632      	mov	r2, r6
 800856c:	463b      	mov	r3, r7
 800856e:	f7f7 fe8b 	bl	8000288 <__aeabi_dsub>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4640      	mov	r0, r8
 8008578:	4649      	mov	r1, r9
 800857a:	e7da      	b.n	8008532 <__kernel_cos+0xea>
 800857c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80085b8 <__kernel_cos+0x170>
 8008580:	e7db      	b.n	800853a <__kernel_cos+0xf2>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
 8008588:	be8838d4 	.word	0xbe8838d4
 800858c:	bda8fae9 	.word	0xbda8fae9
 8008590:	bdb4b1c4 	.word	0xbdb4b1c4
 8008594:	3e21ee9e 	.word	0x3e21ee9e
 8008598:	809c52ad 	.word	0x809c52ad
 800859c:	3e927e4f 	.word	0x3e927e4f
 80085a0:	19cb1590 	.word	0x19cb1590
 80085a4:	3efa01a0 	.word	0x3efa01a0
 80085a8:	16c15177 	.word	0x16c15177
 80085ac:	3f56c16c 	.word	0x3f56c16c
 80085b0:	5555554c 	.word	0x5555554c
 80085b4:	3fa55555 	.word	0x3fa55555
 80085b8:	00000000 	.word	0x00000000
 80085bc:	3ff00000 	.word	0x3ff00000
 80085c0:	3fe00000 	.word	0x3fe00000
 80085c4:	3fd33332 	.word	0x3fd33332
 80085c8:	3ff00000 	.word	0x3ff00000
 80085cc:	3fe90000 	.word	0x3fe90000
 80085d0:	3fd20000 	.word	0x3fd20000
 80085d4:	00000000 	.word	0x00000000

080085d8 <__kernel_sin>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	ec55 4b10 	vmov	r4, r5, d0
 80085e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80085e4:	b085      	sub	sp, #20
 80085e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80085ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80085ee:	4680      	mov	r8, r0
 80085f0:	d205      	bcs.n	80085fe <__kernel_sin+0x26>
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f8 fa99 	bl	8000b2c <__aeabi_d2iz>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d052      	beq.n	80086a4 <__kernel_sin+0xcc>
 80085fe:	4622      	mov	r2, r4
 8008600:	462b      	mov	r3, r5
 8008602:	4620      	mov	r0, r4
 8008604:	4629      	mov	r1, r5
 8008606:	f7f7 fff7 	bl	80005f8 <__aeabi_dmul>
 800860a:	4682      	mov	sl, r0
 800860c:	468b      	mov	fp, r1
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4620      	mov	r0, r4
 8008614:	4629      	mov	r1, r5
 8008616:	f7f7 ffef 	bl	80005f8 <__aeabi_dmul>
 800861a:	a342      	add	r3, pc, #264	@ (adr r3, 8008724 <__kernel_sin+0x14c>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	e9cd 0100 	strd	r0, r1, [sp]
 8008624:	4650      	mov	r0, sl
 8008626:	4659      	mov	r1, fp
 8008628:	f7f7 ffe6 	bl	80005f8 <__aeabi_dmul>
 800862c:	a33f      	add	r3, pc, #252	@ (adr r3, 800872c <__kernel_sin+0x154>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 fe29 	bl	8000288 <__aeabi_dsub>
 8008636:	4652      	mov	r2, sl
 8008638:	465b      	mov	r3, fp
 800863a:	f7f7 ffdd 	bl	80005f8 <__aeabi_dmul>
 800863e:	a33d      	add	r3, pc, #244	@ (adr r3, 8008734 <__kernel_sin+0x15c>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f7 fe22 	bl	800028c <__adddf3>
 8008648:	4652      	mov	r2, sl
 800864a:	465b      	mov	r3, fp
 800864c:	f7f7 ffd4 	bl	80005f8 <__aeabi_dmul>
 8008650:	a33a      	add	r3, pc, #232	@ (adr r3, 800873c <__kernel_sin+0x164>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	f7f7 fe17 	bl	8000288 <__aeabi_dsub>
 800865a:	4652      	mov	r2, sl
 800865c:	465b      	mov	r3, fp
 800865e:	f7f7 ffcb 	bl	80005f8 <__aeabi_dmul>
 8008662:	a338      	add	r3, pc, #224	@ (adr r3, 8008744 <__kernel_sin+0x16c>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 fe10 	bl	800028c <__adddf3>
 800866c:	4606      	mov	r6, r0
 800866e:	460f      	mov	r7, r1
 8008670:	f1b8 0f00 	cmp.w	r8, #0
 8008674:	d11b      	bne.n	80086ae <__kernel_sin+0xd6>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	a325      	add	r3, pc, #148	@ (adr r3, 8008718 <__kernel_sin+0x140>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 fdfe 	bl	8000288 <__aeabi_dsub>
 800868c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008690:	f7f7 ffb2 	bl	80005f8 <__aeabi_dmul>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 fdf6 	bl	800028c <__adddf3>
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	ec45 4b10 	vmov	d0, r4, r5
 80086a8:	b005      	add	sp, #20
 80086aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <__kernel_sin+0x148>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	4632      	mov	r2, r6
 80086bc:	4680      	mov	r8, r0
 80086be:	4689      	mov	r9, r1
 80086c0:	463b      	mov	r3, r7
 80086c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c6:	f7f7 ff97 	bl	80005f8 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f7 fdd9 	bl	8000288 <__aeabi_dsub>
 80086d6:	4652      	mov	r2, sl
 80086d8:	465b      	mov	r3, fp
 80086da:	f7f7 ff8d 	bl	80005f8 <__aeabi_dmul>
 80086de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086e2:	f7f7 fdd1 	bl	8000288 <__aeabi_dsub>
 80086e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008718 <__kernel_sin+0x140>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	4606      	mov	r6, r0
 80086ee:	460f      	mov	r7, r1
 80086f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086f4:	f7f7 ff80 	bl	80005f8 <__aeabi_dmul>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f7 fdc4 	bl	800028c <__adddf3>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4620      	mov	r0, r4
 800870a:	4629      	mov	r1, r5
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	e7c6      	b.n	80086a0 <__kernel_sin+0xc8>
 8008712:	bf00      	nop
 8008714:	f3af 8000 	nop.w
 8008718:	55555549 	.word	0x55555549
 800871c:	3fc55555 	.word	0x3fc55555
 8008720:	3fe00000 	.word	0x3fe00000
 8008724:	5acfd57c 	.word	0x5acfd57c
 8008728:	3de5d93a 	.word	0x3de5d93a
 800872c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008730:	3e5ae5e6 	.word	0x3e5ae5e6
 8008734:	57b1fe7d 	.word	0x57b1fe7d
 8008738:	3ec71de3 	.word	0x3ec71de3
 800873c:	19c161d5 	.word	0x19c161d5
 8008740:	3f2a01a0 	.word	0x3f2a01a0
 8008744:	1110f8a6 	.word	0x1110f8a6
 8008748:	3f811111 	.word	0x3f811111
 800874c:	00000000 	.word	0x00000000

08008750 <__ieee754_rem_pio2>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	ec57 6b10 	vmov	r6, r7, d0
 8008758:	4bc5      	ldr	r3, [pc, #788]	@ (8008a70 <__ieee754_rem_pio2+0x320>)
 800875a:	b08d      	sub	sp, #52	@ 0x34
 800875c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008760:	4598      	cmp	r8, r3
 8008762:	4604      	mov	r4, r0
 8008764:	9704      	str	r7, [sp, #16]
 8008766:	d807      	bhi.n	8008778 <__ieee754_rem_pio2+0x28>
 8008768:	2200      	movs	r2, #0
 800876a:	2300      	movs	r3, #0
 800876c:	ed80 0b00 	vstr	d0, [r0]
 8008770:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008774:	2500      	movs	r5, #0
 8008776:	e028      	b.n	80087ca <__ieee754_rem_pio2+0x7a>
 8008778:	4bbe      	ldr	r3, [pc, #760]	@ (8008a74 <__ieee754_rem_pio2+0x324>)
 800877a:	4598      	cmp	r8, r3
 800877c:	d878      	bhi.n	8008870 <__ieee754_rem_pio2+0x120>
 800877e:	9b04      	ldr	r3, [sp, #16]
 8008780:	4dbd      	ldr	r5, [pc, #756]	@ (8008a78 <__ieee754_rem_pio2+0x328>)
 8008782:	2b00      	cmp	r3, #0
 8008784:	4630      	mov	r0, r6
 8008786:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008a38 <__ieee754_rem_pio2+0x2e8>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	4639      	mov	r1, r7
 800878e:	dd38      	ble.n	8008802 <__ieee754_rem_pio2+0xb2>
 8008790:	f7f7 fd7a 	bl	8000288 <__aeabi_dsub>
 8008794:	45a8      	cmp	r8, r5
 8008796:	4606      	mov	r6, r0
 8008798:	460f      	mov	r7, r1
 800879a:	d01a      	beq.n	80087d2 <__ieee754_rem_pio2+0x82>
 800879c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008a40 <__ieee754_rem_pio2+0x2f0>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 fd71 	bl	8000288 <__aeabi_dsub>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	4630      	mov	r0, r6
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f7 fd69 	bl	8000288 <__aeabi_dsub>
 80087b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008a40 <__ieee754_rem_pio2+0x2f0>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f7 fd64 	bl	8000288 <__aeabi_dsub>
 80087c0:	e9c4 8900 	strd	r8, r9, [r4]
 80087c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80087c8:	2501      	movs	r5, #1
 80087ca:	4628      	mov	r0, r5
 80087cc:	b00d      	add	sp, #52	@ 0x34
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	a39d      	add	r3, pc, #628	@ (adr r3, 8008a48 <__ieee754_rem_pio2+0x2f8>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 fd56 	bl	8000288 <__aeabi_dsub>
 80087dc:	a39c      	add	r3, pc, #624	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x300>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	4606      	mov	r6, r0
 80087e4:	460f      	mov	r7, r1
 80087e6:	f7f7 fd4f 	bl	8000288 <__aeabi_dsub>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4680      	mov	r8, r0
 80087f0:	4689      	mov	r9, r1
 80087f2:	4630      	mov	r0, r6
 80087f4:	4639      	mov	r1, r7
 80087f6:	f7f7 fd47 	bl	8000288 <__aeabi_dsub>
 80087fa:	a395      	add	r3, pc, #596	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x300>)
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	e7dc      	b.n	80087bc <__ieee754_rem_pio2+0x6c>
 8008802:	f7f7 fd43 	bl	800028c <__adddf3>
 8008806:	45a8      	cmp	r8, r5
 8008808:	4606      	mov	r6, r0
 800880a:	460f      	mov	r7, r1
 800880c:	d018      	beq.n	8008840 <__ieee754_rem_pio2+0xf0>
 800880e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008a40 <__ieee754_rem_pio2+0x2f0>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f7f7 fd3a 	bl	800028c <__adddf3>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4680      	mov	r8, r0
 800881e:	4689      	mov	r9, r1
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f7 fd30 	bl	8000288 <__aeabi_dsub>
 8008828:	a385      	add	r3, pc, #532	@ (adr r3, 8008a40 <__ieee754_rem_pio2+0x2f0>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 fd2d 	bl	800028c <__adddf3>
 8008832:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008836:	e9c4 8900 	strd	r8, r9, [r4]
 800883a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800883e:	e7c4      	b.n	80087ca <__ieee754_rem_pio2+0x7a>
 8008840:	a381      	add	r3, pc, #516	@ (adr r3, 8008a48 <__ieee754_rem_pio2+0x2f8>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fd21 	bl	800028c <__adddf3>
 800884a:	a381      	add	r3, pc, #516	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x300>)
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	4606      	mov	r6, r0
 8008852:	460f      	mov	r7, r1
 8008854:	f7f7 fd1a 	bl	800028c <__adddf3>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd10 	bl	8000288 <__aeabi_dsub>
 8008868:	a379      	add	r3, pc, #484	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x300>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	e7de      	b.n	800882e <__ieee754_rem_pio2+0xde>
 8008870:	4b82      	ldr	r3, [pc, #520]	@ (8008a7c <__ieee754_rem_pio2+0x32c>)
 8008872:	4598      	cmp	r8, r3
 8008874:	f200 80d1 	bhi.w	8008a1a <__ieee754_rem_pio2+0x2ca>
 8008878:	f000 f966 	bl	8008b48 <fabs>
 800887c:	ec57 6b10 	vmov	r6, r7, d0
 8008880:	a375      	add	r3, pc, #468	@ (adr r3, 8008a58 <__ieee754_rem_pio2+0x308>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	4b7c      	ldr	r3, [pc, #496]	@ (8008a80 <__ieee754_rem_pio2+0x330>)
 8008890:	2200      	movs	r2, #0
 8008892:	f7f7 fcfb 	bl	800028c <__adddf3>
 8008896:	f7f8 f949 	bl	8000b2c <__aeabi_d2iz>
 800889a:	4605      	mov	r5, r0
 800889c:	f7f7 fe42 	bl	8000524 <__aeabi_i2d>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088a8:	a363      	add	r3, pc, #396	@ (adr r3, 8008a38 <__ieee754_rem_pio2+0x2e8>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 fea3 	bl	80005f8 <__aeabi_dmul>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f7 fce5 	bl	8000288 <__aeabi_dsub>
 80088be:	a360      	add	r3, pc, #384	@ (adr r3, 8008a40 <__ieee754_rem_pio2+0x2f0>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	4682      	mov	sl, r0
 80088c6:	468b      	mov	fp, r1
 80088c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	2d1f      	cmp	r5, #31
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	dc0c      	bgt.n	80088f2 <__ieee754_rem_pio2+0x1a2>
 80088d8:	4b6a      	ldr	r3, [pc, #424]	@ (8008a84 <__ieee754_rem_pio2+0x334>)
 80088da:	1e6a      	subs	r2, r5, #1
 80088dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e0:	4543      	cmp	r3, r8
 80088e2:	d006      	beq.n	80088f2 <__ieee754_rem_pio2+0x1a2>
 80088e4:	4632      	mov	r2, r6
 80088e6:	463b      	mov	r3, r7
 80088e8:	4650      	mov	r0, sl
 80088ea:	4659      	mov	r1, fp
 80088ec:	f7f7 fccc 	bl	8000288 <__aeabi_dsub>
 80088f0:	e00e      	b.n	8008910 <__ieee754_rem_pio2+0x1c0>
 80088f2:	463b      	mov	r3, r7
 80088f4:	4632      	mov	r2, r6
 80088f6:	4650      	mov	r0, sl
 80088f8:	4659      	mov	r1, fp
 80088fa:	f7f7 fcc5 	bl	8000288 <__aeabi_dsub>
 80088fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008902:	9305      	str	r3, [sp, #20]
 8008904:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008908:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800890c:	2b10      	cmp	r3, #16
 800890e:	dc02      	bgt.n	8008916 <__ieee754_rem_pio2+0x1c6>
 8008910:	e9c4 0100 	strd	r0, r1, [r4]
 8008914:	e039      	b.n	800898a <__ieee754_rem_pio2+0x23a>
 8008916:	a34c      	add	r3, pc, #304	@ (adr r3, 8008a48 <__ieee754_rem_pio2+0x2f8>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	4606      	mov	r6, r0
 8008926:	460f      	mov	r7, r1
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4650      	mov	r0, sl
 800892e:	4659      	mov	r1, fp
 8008930:	f7f7 fcaa 	bl	8000288 <__aeabi_dsub>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4680      	mov	r8, r0
 800893a:	4689      	mov	r9, r1
 800893c:	4650      	mov	r0, sl
 800893e:	4659      	mov	r1, fp
 8008940:	f7f7 fca2 	bl	8000288 <__aeabi_dsub>
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	f7f7 fc9e 	bl	8000288 <__aeabi_dsub>
 800894c:	a340      	add	r3, pc, #256	@ (adr r3, 8008a50 <__ieee754_rem_pio2+0x300>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895a:	f7f7 fe4d 	bl	80005f8 <__aeabi_dmul>
 800895e:	4632      	mov	r2, r6
 8008960:	463b      	mov	r3, r7
 8008962:	f7f7 fc91 	bl	8000288 <__aeabi_dsub>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	4640      	mov	r0, r8
 8008970:	4649      	mov	r1, r9
 8008972:	f7f7 fc89 	bl	8000288 <__aeabi_dsub>
 8008976:	9a05      	ldr	r2, [sp, #20]
 8008978:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b31      	cmp	r3, #49	@ 0x31
 8008980:	dc20      	bgt.n	80089c4 <__ieee754_rem_pio2+0x274>
 8008982:	e9c4 0100 	strd	r0, r1, [r4]
 8008986:	46c2      	mov	sl, r8
 8008988:	46cb      	mov	fp, r9
 800898a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800898e:	4650      	mov	r0, sl
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 fc77 	bl	8000288 <__aeabi_dsub>
 800899a:	463b      	mov	r3, r7
 800899c:	4632      	mov	r2, r6
 800899e:	f7f7 fc73 	bl	8000288 <__aeabi_dsub>
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089aa:	f6bf af0e 	bge.w	80087ca <__ieee754_rem_pio2+0x7a>
 80089ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80089b2:	6063      	str	r3, [r4, #4]
 80089b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089b8:	f8c4 8000 	str.w	r8, [r4]
 80089bc:	60a0      	str	r0, [r4, #8]
 80089be:	60e3      	str	r3, [r4, #12]
 80089c0:	426d      	negs	r5, r5
 80089c2:	e702      	b.n	80087ca <__ieee754_rem_pio2+0x7a>
 80089c4:	a326      	add	r3, pc, #152	@ (adr r3, 8008a60 <__ieee754_rem_pio2+0x310>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ce:	f7f7 fe13 	bl	80005f8 <__aeabi_dmul>
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fc53 	bl	8000288 <__aeabi_dsub>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4682      	mov	sl, r0
 80089e8:	468b      	mov	fp, r1
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fc4b 	bl	8000288 <__aeabi_dsub>
 80089f2:	4632      	mov	r2, r6
 80089f4:	463b      	mov	r3, r7
 80089f6:	f7f7 fc47 	bl	8000288 <__aeabi_dsub>
 80089fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8008a68 <__ieee754_rem_pio2+0x318>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	4606      	mov	r6, r0
 8008a02:	460f      	mov	r7, r1
 8008a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	463b      	mov	r3, r7
 8008a10:	f7f7 fc3a 	bl	8000288 <__aeabi_dsub>
 8008a14:	4606      	mov	r6, r0
 8008a16:	460f      	mov	r7, r1
 8008a18:	e764      	b.n	80088e4 <__ieee754_rem_pio2+0x194>
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a88 <__ieee754_rem_pio2+0x338>)
 8008a1c:	4598      	cmp	r8, r3
 8008a1e:	d935      	bls.n	8008a8c <__ieee754_rem_pio2+0x33c>
 8008a20:	4632      	mov	r2, r6
 8008a22:	463b      	mov	r3, r7
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 fc2e 	bl	8000288 <__aeabi_dsub>
 8008a2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a30:	e9c4 0100 	strd	r0, r1, [r4]
 8008a34:	e69e      	b.n	8008774 <__ieee754_rem_pio2+0x24>
 8008a36:	bf00      	nop
 8008a38:	54400000 	.word	0x54400000
 8008a3c:	3ff921fb 	.word	0x3ff921fb
 8008a40:	1a626331 	.word	0x1a626331
 8008a44:	3dd0b461 	.word	0x3dd0b461
 8008a48:	1a600000 	.word	0x1a600000
 8008a4c:	3dd0b461 	.word	0x3dd0b461
 8008a50:	2e037073 	.word	0x2e037073
 8008a54:	3ba3198a 	.word	0x3ba3198a
 8008a58:	6dc9c883 	.word	0x6dc9c883
 8008a5c:	3fe45f30 	.word	0x3fe45f30
 8008a60:	2e000000 	.word	0x2e000000
 8008a64:	3ba3198a 	.word	0x3ba3198a
 8008a68:	252049c1 	.word	0x252049c1
 8008a6c:	397b839a 	.word	0x397b839a
 8008a70:	3fe921fb 	.word	0x3fe921fb
 8008a74:	4002d97b 	.word	0x4002d97b
 8008a78:	3ff921fb 	.word	0x3ff921fb
 8008a7c:	413921fb 	.word	0x413921fb
 8008a80:	3fe00000 	.word	0x3fe00000
 8008a84:	0800b098 	.word	0x0800b098
 8008a88:	7fefffff 	.word	0x7fefffff
 8008a8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008a90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008a94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008a98:	4630      	mov	r0, r6
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	f7f8 f846 	bl	8000b2c <__aeabi_d2iz>
 8008aa0:	f7f7 fd40 	bl	8000524 <__aeabi_i2d>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ab0:	f7f7 fbea 	bl	8000288 <__aeabi_dsub>
 8008ab4:	4b22      	ldr	r3, [pc, #136]	@ (8008b40 <__ieee754_rem_pio2+0x3f0>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	460f      	mov	r7, r1
 8008abe:	4606      	mov	r6, r0
 8008ac0:	f7f8 f834 	bl	8000b2c <__aeabi_d2iz>
 8008ac4:	f7f7 fd2e 	bl	8000524 <__aeabi_i2d>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4630      	mov	r0, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ad4:	f7f7 fbd8 	bl	8000288 <__aeabi_dsub>
 8008ad8:	4b19      	ldr	r3, [pc, #100]	@ (8008b40 <__ieee754_rem_pio2+0x3f0>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	f7f7 fd8c 	bl	80005f8 <__aeabi_dmul>
 8008ae0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008ae4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008ae8:	f04f 0803 	mov.w	r8, #3
 8008aec:	2600      	movs	r6, #0
 8008aee:	2700      	movs	r7, #0
 8008af0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	46c2      	mov	sl, r8
 8008afa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008afe:	f7f7 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d1f4      	bne.n	8008af0 <__ieee754_rem_pio2+0x3a0>
 8008b06:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <__ieee754_rem_pio2+0x3f4>)
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	462a      	mov	r2, r5
 8008b10:	4653      	mov	r3, sl
 8008b12:	4621      	mov	r1, r4
 8008b14:	a806      	add	r0, sp, #24
 8008b16:	f000 f81f 	bl	8008b58 <__kernel_rem_pio2>
 8008b1a:	9b04      	ldr	r3, [sp, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f6bf ae53 	bge.w	80087ca <__ieee754_rem_pio2+0x7a>
 8008b24:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008b28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b2c:	e9c4 2300 	strd	r2, r3, [r4]
 8008b30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008b34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008b3c:	e740      	b.n	80089c0 <__ieee754_rem_pio2+0x270>
 8008b3e:	bf00      	nop
 8008b40:	41700000 	.word	0x41700000
 8008b44:	0800b118 	.word	0x0800b118

08008b48 <fabs>:
 8008b48:	ec51 0b10 	vmov	r0, r1, d0
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b52:	ec43 2b10 	vmov	d0, r2, r3
 8008b56:	4770      	bx	lr

08008b58 <__kernel_rem_pio2>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ed2d 8b02 	vpush	{d8}
 8008b60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008b64:	f112 0f14 	cmn.w	r2, #20
 8008b68:	9306      	str	r3, [sp, #24]
 8008b6a:	9104      	str	r1, [sp, #16]
 8008b6c:	4bbe      	ldr	r3, [pc, #760]	@ (8008e68 <__kernel_rem_pio2+0x310>)
 8008b6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008b70:	9008      	str	r0, [sp, #32]
 8008b72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	9b06      	ldr	r3, [sp, #24]
 8008b7a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008b7e:	bfa8      	it	ge
 8008b80:	1ed4      	subge	r4, r2, #3
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	bfb2      	itee	lt
 8008b86:	2400      	movlt	r4, #0
 8008b88:	2318      	movge	r3, #24
 8008b8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b8e:	f06f 0317 	mvn.w	r3, #23
 8008b92:	fb04 3303 	mla	r3, r4, r3, r3
 8008b96:	eb03 0b02 	add.w	fp, r3, r2
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	9a05      	ldr	r2, [sp, #20]
 8008b9e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008e58 <__kernel_rem_pio2+0x300>
 8008ba2:	eb03 0802 	add.w	r8, r3, r2
 8008ba6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008ba8:	1aa7      	subs	r7, r4, r2
 8008baa:	ae20      	add	r6, sp, #128	@ 0x80
 8008bac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008bb0:	2500      	movs	r5, #0
 8008bb2:	4545      	cmp	r5, r8
 8008bb4:	dd13      	ble.n	8008bde <__kernel_rem_pio2+0x86>
 8008bb6:	9b06      	ldr	r3, [sp, #24]
 8008bb8:	aa20      	add	r2, sp, #128	@ 0x80
 8008bba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008bbe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	4598      	cmp	r8, r3
 8008bca:	dc31      	bgt.n	8008c30 <__kernel_rem_pio2+0xd8>
 8008bcc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008e58 <__kernel_rem_pio2+0x300>
 8008bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bd8:	462f      	mov	r7, r5
 8008bda:	2600      	movs	r6, #0
 8008bdc:	e01b      	b.n	8008c16 <__kernel_rem_pio2+0xbe>
 8008bde:	42ef      	cmn	r7, r5
 8008be0:	d407      	bmi.n	8008bf2 <__kernel_rem_pio2+0x9a>
 8008be2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008be6:	f7f7 fc9d 	bl	8000524 <__aeabi_i2d>
 8008bea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bee:	3501      	adds	r5, #1
 8008bf0:	e7df      	b.n	8008bb2 <__kernel_rem_pio2+0x5a>
 8008bf2:	ec51 0b18 	vmov	r0, r1, d8
 8008bf6:	e7f8      	b.n	8008bea <__kernel_rem_pio2+0x92>
 8008bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008c00:	f7f7 fcfa 	bl	80005f8 <__aeabi_dmul>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0c:	f7f7 fb3e 	bl	800028c <__adddf3>
 8008c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c14:	3601      	adds	r6, #1
 8008c16:	9b05      	ldr	r3, [sp, #20]
 8008c18:	429e      	cmp	r6, r3
 8008c1a:	f1a7 0708 	sub.w	r7, r7, #8
 8008c1e:	ddeb      	ble.n	8008bf8 <__kernel_rem_pio2+0xa0>
 8008c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c24:	f108 0801 	add.w	r8, r8, #1
 8008c28:	ecaa 7b02 	vstmia	sl!, {d7}
 8008c2c:	3508      	adds	r5, #8
 8008c2e:	e7ca      	b.n	8008bc6 <__kernel_rem_pio2+0x6e>
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	f8dd 8000 	ldr.w	r8, [sp]
 8008c36:	aa0c      	add	r2, sp, #48	@ 0x30
 8008c38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008c40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008c4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c4c:	ab98      	add	r3, sp, #608	@ 0x260
 8008c4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008c52:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008c56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c5a:	ac0c      	add	r4, sp, #48	@ 0x30
 8008c5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008c5e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008c62:	46a1      	mov	r9, r4
 8008c64:	46c2      	mov	sl, r8
 8008c66:	f1ba 0f00 	cmp.w	sl, #0
 8008c6a:	f1a5 0508 	sub.w	r5, r5, #8
 8008c6e:	dc77      	bgt.n	8008d60 <__kernel_rem_pio2+0x208>
 8008c70:	4658      	mov	r0, fp
 8008c72:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008c76:	f000 fac7 	bl	8009208 <scalbn>
 8008c7a:	ec57 6b10 	vmov	r6, r7, d0
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008c84:	4630      	mov	r0, r6
 8008c86:	4639      	mov	r1, r7
 8008c88:	f7f7 fcb6 	bl	80005f8 <__aeabi_dmul>
 8008c8c:	ec41 0b10 	vmov	d0, r0, r1
 8008c90:	f000 fb3a 	bl	8009308 <floor>
 8008c94:	4b75      	ldr	r3, [pc, #468]	@ (8008e6c <__kernel_rem_pio2+0x314>)
 8008c96:	ec51 0b10 	vmov	r0, r1, d0
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f7f7 fcac 	bl	80005f8 <__aeabi_dmul>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	f7f7 faee 	bl	8000288 <__aeabi_dsub>
 8008cac:	460f      	mov	r7, r1
 8008cae:	4606      	mov	r6, r0
 8008cb0:	f7f7 ff3c 	bl	8000b2c <__aeabi_d2iz>
 8008cb4:	9002      	str	r0, [sp, #8]
 8008cb6:	f7f7 fc35 	bl	8000524 <__aeabi_i2d>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	f7f7 fae1 	bl	8000288 <__aeabi_dsub>
 8008cc6:	f1bb 0f00 	cmp.w	fp, #0
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	dd6c      	ble.n	8008daa <__kernel_rem_pio2+0x252>
 8008cd0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8008cd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8008cd6:	9d02      	ldr	r5, [sp, #8]
 8008cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cdc:	f1cb 0018 	rsb	r0, fp, #24
 8008ce0:	fa43 f200 	asr.w	r2, r3, r0
 8008ce4:	4415      	add	r5, r2
 8008ce6:	4082      	lsls	r2, r0
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	aa0c      	add	r2, sp, #48	@ 0x30
 8008cec:	9502      	str	r5, [sp, #8]
 8008cee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008cf2:	f1cb 0217 	rsb	r2, fp, #23
 8008cf6:	fa43 f902 	asr.w	r9, r3, r2
 8008cfa:	f1b9 0f00 	cmp.w	r9, #0
 8008cfe:	dd64      	ble.n	8008dca <__kernel_rem_pio2+0x272>
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	2200      	movs	r2, #0
 8008d04:	3301      	adds	r3, #1
 8008d06:	9302      	str	r3, [sp, #8]
 8008d08:	4615      	mov	r5, r2
 8008d0a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008d0e:	4590      	cmp	r8, r2
 8008d10:	f300 80b8 	bgt.w	8008e84 <__kernel_rem_pio2+0x32c>
 8008d14:	f1bb 0f00 	cmp.w	fp, #0
 8008d18:	dd07      	ble.n	8008d2a <__kernel_rem_pio2+0x1d2>
 8008d1a:	f1bb 0f01 	cmp.w	fp, #1
 8008d1e:	f000 80bf 	beq.w	8008ea0 <__kernel_rem_pio2+0x348>
 8008d22:	f1bb 0f02 	cmp.w	fp, #2
 8008d26:	f000 80c6 	beq.w	8008eb6 <__kernel_rem_pio2+0x35e>
 8008d2a:	f1b9 0f02 	cmp.w	r9, #2
 8008d2e:	d14c      	bne.n	8008dca <__kernel_rem_pio2+0x272>
 8008d30:	4632      	mov	r2, r6
 8008d32:	463b      	mov	r3, r7
 8008d34:	494e      	ldr	r1, [pc, #312]	@ (8008e70 <__kernel_rem_pio2+0x318>)
 8008d36:	2000      	movs	r0, #0
 8008d38:	f7f7 faa6 	bl	8000288 <__aeabi_dsub>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	460f      	mov	r7, r1
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	d042      	beq.n	8008dca <__kernel_rem_pio2+0x272>
 8008d44:	4658      	mov	r0, fp
 8008d46:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008e60 <__kernel_rem_pio2+0x308>
 8008d4a:	f000 fa5d 	bl	8009208 <scalbn>
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	ec53 2b10 	vmov	r2, r3, d0
 8008d56:	f7f7 fa97 	bl	8000288 <__aeabi_dsub>
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	e034      	b.n	8008dca <__kernel_rem_pio2+0x272>
 8008d60:	4b44      	ldr	r3, [pc, #272]	@ (8008e74 <__kernel_rem_pio2+0x31c>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	f7f7 fede 	bl	8000b2c <__aeabi_d2iz>
 8008d70:	f7f7 fbd8 	bl	8000524 <__aeabi_i2d>
 8008d74:	4b40      	ldr	r3, [pc, #256]	@ (8008e78 <__kernel_rem_pio2+0x320>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	4606      	mov	r6, r0
 8008d7a:	460f      	mov	r7, r1
 8008d7c:	f7f7 fc3c 	bl	80005f8 <__aeabi_dmul>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d88:	f7f7 fa7e 	bl	8000288 <__aeabi_dsub>
 8008d8c:	f7f7 fece 	bl	8000b2c <__aeabi_d2iz>
 8008d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d94:	f849 0b04 	str.w	r0, [r9], #4
 8008d98:	4639      	mov	r1, r7
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7f7 fa76 	bl	800028c <__adddf3>
 8008da0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da8:	e75d      	b.n	8008c66 <__kernel_rem_pio2+0x10e>
 8008daa:	d107      	bne.n	8008dbc <__kernel_rem_pio2+0x264>
 8008dac:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008db0:	aa0c      	add	r2, sp, #48	@ 0x30
 8008db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008dba:	e79e      	b.n	8008cfa <__kernel_rem_pio2+0x1a2>
 8008dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8008e7c <__kernel_rem_pio2+0x324>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f7f7 fea0 	bl	8000b04 <__aeabi_dcmpge>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d143      	bne.n	8008e50 <__kernel_rem_pio2+0x2f8>
 8008dc8:	4681      	mov	r9, r0
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4630      	mov	r0, r6
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	f7f7 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f000 80bf 	beq.w	8008f5a <__kernel_rem_pio2+0x402>
 8008ddc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008de0:	2200      	movs	r2, #0
 8008de2:	9900      	ldr	r1, [sp, #0]
 8008de4:	428b      	cmp	r3, r1
 8008de6:	da6e      	bge.n	8008ec6 <__kernel_rem_pio2+0x36e>
 8008de8:	2a00      	cmp	r2, #0
 8008dea:	f000 8089 	beq.w	8008f00 <__kernel_rem_pio2+0x3a8>
 8008dee:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008df2:	ab0c      	add	r3, sp, #48	@ 0x30
 8008df4:	f1ab 0b18 	sub.w	fp, fp, #24
 8008df8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0f6      	beq.n	8008dee <__kernel_rem_pio2+0x296>
 8008e00:	4658      	mov	r0, fp
 8008e02:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008e60 <__kernel_rem_pio2+0x308>
 8008e06:	f000 f9ff 	bl	8009208 <scalbn>
 8008e0a:	f108 0301 	add.w	r3, r8, #1
 8008e0e:	00da      	lsls	r2, r3, #3
 8008e10:	9205      	str	r2, [sp, #20]
 8008e12:	ec55 4b10 	vmov	r4, r5, d0
 8008e16:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008e18:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008e74 <__kernel_rem_pio2+0x31c>
 8008e1c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008e20:	4646      	mov	r6, r8
 8008e22:	f04f 0a00 	mov.w	sl, #0
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	f280 80cf 	bge.w	8008fca <__kernel_rem_pio2+0x472>
 8008e2c:	4644      	mov	r4, r8
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	f2c0 80fd 	blt.w	800902e <__kernel_rem_pio2+0x4d6>
 8008e34:	4b12      	ldr	r3, [pc, #72]	@ (8008e80 <__kernel_rem_pio2+0x328>)
 8008e36:	461f      	mov	r7, r3
 8008e38:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008e3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e3e:	9306      	str	r3, [sp, #24]
 8008e40:	f04f 0a00 	mov.w	sl, #0
 8008e44:	f04f 0b00 	mov.w	fp, #0
 8008e48:	2600      	movs	r6, #0
 8008e4a:	eba8 0504 	sub.w	r5, r8, r4
 8008e4e:	e0e2      	b.n	8009016 <__kernel_rem_pio2+0x4be>
 8008e50:	f04f 0902 	mov.w	r9, #2
 8008e54:	e754      	b.n	8008d00 <__kernel_rem_pio2+0x1a8>
 8008e56:	bf00      	nop
	...
 8008e64:	3ff00000 	.word	0x3ff00000
 8008e68:	0800b260 	.word	0x0800b260
 8008e6c:	40200000 	.word	0x40200000
 8008e70:	3ff00000 	.word	0x3ff00000
 8008e74:	3e700000 	.word	0x3e700000
 8008e78:	41700000 	.word	0x41700000
 8008e7c:	3fe00000 	.word	0x3fe00000
 8008e80:	0800b220 	.word	0x0800b220
 8008e84:	f854 3b04 	ldr.w	r3, [r4], #4
 8008e88:	b945      	cbnz	r5, 8008e9c <__kernel_rem_pio2+0x344>
 8008e8a:	b123      	cbz	r3, 8008e96 <__kernel_rem_pio2+0x33e>
 8008e8c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008e90:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e94:	2301      	movs	r3, #1
 8008e96:	3201      	adds	r2, #1
 8008e98:	461d      	mov	r5, r3
 8008e9a:	e738      	b.n	8008d0e <__kernel_rem_pio2+0x1b6>
 8008e9c:	1acb      	subs	r3, r1, r3
 8008e9e:	e7f7      	b.n	8008e90 <__kernel_rem_pio2+0x338>
 8008ea0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8008ea4:	ab0c      	add	r3, sp, #48	@ 0x30
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008eae:	a90c      	add	r1, sp, #48	@ 0x30
 8008eb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008eb4:	e739      	b.n	8008d2a <__kernel_rem_pio2+0x1d2>
 8008eb6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8008eba:	ab0c      	add	r3, sp, #48	@ 0x30
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ec4:	e7f3      	b.n	8008eae <__kernel_rem_pio2+0x356>
 8008ec6:	a90c      	add	r1, sp, #48	@ 0x30
 8008ec8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	e787      	b.n	8008de2 <__kernel_rem_pio2+0x28a>
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	d0fa      	beq.n	8008ed2 <__kernel_rem_pio2+0x37a>
 8008edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ede:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ee2:	eb0d 0503 	add.w	r5, sp, r3
 8008ee6:	9b06      	ldr	r3, [sp, #24]
 8008ee8:	aa20      	add	r2, sp, #128	@ 0x80
 8008eea:	4443      	add	r3, r8
 8008eec:	f108 0701 	add.w	r7, r8, #1
 8008ef0:	3d98      	subs	r5, #152	@ 0x98
 8008ef2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8008ef6:	4444      	add	r4, r8
 8008ef8:	42bc      	cmp	r4, r7
 8008efa:	da04      	bge.n	8008f06 <__kernel_rem_pio2+0x3ae>
 8008efc:	46a0      	mov	r8, r4
 8008efe:	e6a2      	b.n	8008c46 <__kernel_rem_pio2+0xee>
 8008f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f02:	2401      	movs	r4, #1
 8008f04:	e7e6      	b.n	8008ed4 <__kernel_rem_pio2+0x37c>
 8008f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f08:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008f0c:	f7f7 fb0a 	bl	8000524 <__aeabi_i2d>
 8008f10:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80091d8 <__kernel_rem_pio2+0x680>
 8008f14:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f20:	46b2      	mov	sl, r6
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	9b05      	ldr	r3, [sp, #20]
 8008f28:	4598      	cmp	r8, r3
 8008f2a:	dd05      	ble.n	8008f38 <__kernel_rem_pio2+0x3e0>
 8008f2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f30:	3701      	adds	r7, #1
 8008f32:	eca5 7b02 	vstmia	r5!, {d7}
 8008f36:	e7df      	b.n	8008ef8 <__kernel_rem_pio2+0x3a0>
 8008f38:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008f3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008f40:	f7f7 fb5a 	bl	80005f8 <__aeabi_dmul>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f4c:	f7f7 f99e 	bl	800028c <__adddf3>
 8008f50:	f108 0801 	add.w	r8, r8, #1
 8008f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f58:	e7e5      	b.n	8008f26 <__kernel_rem_pio2+0x3ce>
 8008f5a:	f1cb 0000 	rsb	r0, fp, #0
 8008f5e:	ec47 6b10 	vmov	d0, r6, r7
 8008f62:	f000 f951 	bl	8009208 <scalbn>
 8008f66:	ec55 4b10 	vmov	r4, r5, d0
 8008f6a:	4b9d      	ldr	r3, [pc, #628]	@ (80091e0 <__kernel_rem_pio2+0x688>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fdc7 	bl	8000b04 <__aeabi_dcmpge>
 8008f76:	b300      	cbz	r0, 8008fba <__kernel_rem_pio2+0x462>
 8008f78:	4b9a      	ldr	r3, [pc, #616]	@ (80091e4 <__kernel_rem_pio2+0x68c>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	f7f7 fdd2 	bl	8000b2c <__aeabi_d2iz>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	f7f7 facb 	bl	8000524 <__aeabi_i2d>
 8008f8e:	4b94      	ldr	r3, [pc, #592]	@ (80091e0 <__kernel_rem_pio2+0x688>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	460b      	mov	r3, r1
 8008f98:	4602      	mov	r2, r0
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f7f7 f973 	bl	8000288 <__aeabi_dsub>
 8008fa2:	f7f7 fdc3 	bl	8000b2c <__aeabi_d2iz>
 8008fa6:	ab0c      	add	r3, sp, #48	@ 0x30
 8008fa8:	f10b 0b18 	add.w	fp, fp, #24
 8008fac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008fb0:	f108 0801 	add.w	r8, r8, #1
 8008fb4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008fb8:	e722      	b.n	8008e00 <__kernel_rem_pio2+0x2a8>
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 fdb5 	bl	8000b2c <__aeabi_d2iz>
 8008fc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8008fc4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008fc8:	e71a      	b.n	8008e00 <__kernel_rem_pio2+0x2a8>
 8008fca:	ab0c      	add	r3, sp, #48	@ 0x30
 8008fcc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008fd0:	f7f7 faa8 	bl	8000524 <__aeabi_i2d>
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	462b      	mov	r3, r5
 8008fd8:	f7f7 fb0e 	bl	80005f8 <__aeabi_dmul>
 8008fdc:	4652      	mov	r2, sl
 8008fde:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008fe2:	465b      	mov	r3, fp
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	3e01      	subs	r6, #1
 8008fee:	4604      	mov	r4, r0
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	e718      	b.n	8008e26 <__kernel_rem_pio2+0x2ce>
 8008ff4:	9906      	ldr	r1, [sp, #24]
 8008ff6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008ffa:	9106      	str	r1, [sp, #24]
 8008ffc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4650      	mov	r0, sl
 800900a:	4659      	mov	r1, fp
 800900c:	f7f7 f93e 	bl	800028c <__adddf3>
 8009010:	3601      	adds	r6, #1
 8009012:	4682      	mov	sl, r0
 8009014:	468b      	mov	fp, r1
 8009016:	9b00      	ldr	r3, [sp, #0]
 8009018:	429e      	cmp	r6, r3
 800901a:	dc01      	bgt.n	8009020 <__kernel_rem_pio2+0x4c8>
 800901c:	42b5      	cmp	r5, r6
 800901e:	dae9      	bge.n	8008ff4 <__kernel_rem_pio2+0x49c>
 8009020:	ab48      	add	r3, sp, #288	@ 0x120
 8009022:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009026:	e9c5 ab00 	strd	sl, fp, [r5]
 800902a:	3c01      	subs	r4, #1
 800902c:	e6ff      	b.n	8008e2e <__kernel_rem_pio2+0x2d6>
 800902e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009030:	2b02      	cmp	r3, #2
 8009032:	dc0b      	bgt.n	800904c <__kernel_rem_pio2+0x4f4>
 8009034:	2b00      	cmp	r3, #0
 8009036:	dc39      	bgt.n	80090ac <__kernel_rem_pio2+0x554>
 8009038:	d05d      	beq.n	80090f6 <__kernel_rem_pio2+0x59e>
 800903a:	9b02      	ldr	r3, [sp, #8]
 800903c:	f003 0007 	and.w	r0, r3, #7
 8009040:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009044:	ecbd 8b02 	vpop	{d8}
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800904e:	2b03      	cmp	r3, #3
 8009050:	d1f3      	bne.n	800903a <__kernel_rem_pio2+0x4e2>
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009058:	eb0d 0403 	add.w	r4, sp, r3
 800905c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009060:	4625      	mov	r5, r4
 8009062:	46c2      	mov	sl, r8
 8009064:	f1ba 0f00 	cmp.w	sl, #0
 8009068:	f1a5 0508 	sub.w	r5, r5, #8
 800906c:	dc6b      	bgt.n	8009146 <__kernel_rem_pio2+0x5ee>
 800906e:	4645      	mov	r5, r8
 8009070:	2d01      	cmp	r5, #1
 8009072:	f1a4 0408 	sub.w	r4, r4, #8
 8009076:	f300 8087 	bgt.w	8009188 <__kernel_rem_pio2+0x630>
 800907a:	9c05      	ldr	r4, [sp, #20]
 800907c:	ab48      	add	r3, sp, #288	@ 0x120
 800907e:	441c      	add	r4, r3
 8009080:	2000      	movs	r0, #0
 8009082:	2100      	movs	r1, #0
 8009084:	f1b8 0f01 	cmp.w	r8, #1
 8009088:	f300 809c 	bgt.w	80091c4 <__kernel_rem_pio2+0x66c>
 800908c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009090:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	f040 80a6 	bne.w	80091e8 <__kernel_rem_pio2+0x690>
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	e9c3 7800 	strd	r7, r8, [r3]
 80090a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80090a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80090aa:	e7c6      	b.n	800903a <__kernel_rem_pio2+0x4e2>
 80090ac:	9d05      	ldr	r5, [sp, #20]
 80090ae:	ab48      	add	r3, sp, #288	@ 0x120
 80090b0:	441d      	add	r5, r3
 80090b2:	4644      	mov	r4, r8
 80090b4:	2000      	movs	r0, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	2c00      	cmp	r4, #0
 80090ba:	da35      	bge.n	8009128 <__kernel_rem_pio2+0x5d0>
 80090bc:	f1b9 0f00 	cmp.w	r9, #0
 80090c0:	d038      	beq.n	8009134 <__kernel_rem_pio2+0x5dc>
 80090c2:	4602      	mov	r2, r0
 80090c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090c8:	9c04      	ldr	r4, [sp, #16]
 80090ca:	e9c4 2300 	strd	r2, r3, [r4]
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80090d6:	f7f7 f8d7 	bl	8000288 <__aeabi_dsub>
 80090da:	ad4a      	add	r5, sp, #296	@ 0x128
 80090dc:	2401      	movs	r4, #1
 80090de:	45a0      	cmp	r8, r4
 80090e0:	da2b      	bge.n	800913a <__kernel_rem_pio2+0x5e2>
 80090e2:	f1b9 0f00 	cmp.w	r9, #0
 80090e6:	d002      	beq.n	80090ee <__kernel_rem_pio2+0x596>
 80090e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090ec:	4619      	mov	r1, r3
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090f4:	e7a1      	b.n	800903a <__kernel_rem_pio2+0x4e2>
 80090f6:	9c05      	ldr	r4, [sp, #20]
 80090f8:	ab48      	add	r3, sp, #288	@ 0x120
 80090fa:	441c      	add	r4, r3
 80090fc:	2000      	movs	r0, #0
 80090fe:	2100      	movs	r1, #0
 8009100:	f1b8 0f00 	cmp.w	r8, #0
 8009104:	da09      	bge.n	800911a <__kernel_rem_pio2+0x5c2>
 8009106:	f1b9 0f00 	cmp.w	r9, #0
 800910a:	d002      	beq.n	8009112 <__kernel_rem_pio2+0x5ba>
 800910c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009110:	4619      	mov	r1, r3
 8009112:	9b04      	ldr	r3, [sp, #16]
 8009114:	e9c3 0100 	strd	r0, r1, [r3]
 8009118:	e78f      	b.n	800903a <__kernel_rem_pio2+0x4e2>
 800911a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800911e:	f7f7 f8b5 	bl	800028c <__adddf3>
 8009122:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009126:	e7eb      	b.n	8009100 <__kernel_rem_pio2+0x5a8>
 8009128:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800912c:	f7f7 f8ae 	bl	800028c <__adddf3>
 8009130:	3c01      	subs	r4, #1
 8009132:	e7c1      	b.n	80090b8 <__kernel_rem_pio2+0x560>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	e7c6      	b.n	80090c8 <__kernel_rem_pio2+0x570>
 800913a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800913e:	f7f7 f8a5 	bl	800028c <__adddf3>
 8009142:	3401      	adds	r4, #1
 8009144:	e7cb      	b.n	80090de <__kernel_rem_pio2+0x586>
 8009146:	ed95 7b00 	vldr	d7, [r5]
 800914a:	ed8d 7b00 	vstr	d7, [sp]
 800914e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009156:	ec53 2b17 	vmov	r2, r3, d7
 800915a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800915e:	f7f7 f895 	bl	800028c <__adddf3>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4606      	mov	r6, r0
 8009168:	460f      	mov	r7, r1
 800916a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800916e:	f7f7 f88b 	bl	8000288 <__aeabi_dsub>
 8009172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009176:	f7f7 f889 	bl	800028c <__adddf3>
 800917a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800917e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009182:	e9c5 6700 	strd	r6, r7, [r5]
 8009186:	e76d      	b.n	8009064 <__kernel_rem_pio2+0x50c>
 8009188:	ed94 7b00 	vldr	d7, [r4]
 800918c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009190:	ec51 0b17 	vmov	r0, r1, d7
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	ed8d 7b00 	vstr	d7, [sp]
 800919c:	f7f7 f876 	bl	800028c <__adddf3>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ac:	f7f7 f86c 	bl	8000288 <__aeabi_dsub>
 80091b0:	4652      	mov	r2, sl
 80091b2:	465b      	mov	r3, fp
 80091b4:	f7f7 f86a 	bl	800028c <__adddf3>
 80091b8:	3d01      	subs	r5, #1
 80091ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80091be:	e9c4 6700 	strd	r6, r7, [r4]
 80091c2:	e755      	b.n	8009070 <__kernel_rem_pio2+0x518>
 80091c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091c8:	f7f7 f860 	bl	800028c <__adddf3>
 80091cc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80091d0:	e758      	b.n	8009084 <__kernel_rem_pio2+0x52c>
 80091d2:	bf00      	nop
 80091d4:	f3af 8000 	nop.w
	...
 80091e0:	41700000 	.word	0x41700000
 80091e4:	3e700000 	.word	0x3e700000
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	601f      	str	r7, [r3, #0]
 80091ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80091f2:	605c      	str	r4, [r3, #4]
 80091f4:	609d      	str	r5, [r3, #8]
 80091f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091fa:	60d3      	str	r3, [r2, #12]
 80091fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009200:	6110      	str	r0, [r2, #16]
 8009202:	6153      	str	r3, [r2, #20]
 8009204:	e719      	b.n	800903a <__kernel_rem_pio2+0x4e2>
 8009206:	bf00      	nop

08009208 <scalbn>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	ec55 4b10 	vmov	r4, r5, d0
 800920e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009212:	4606      	mov	r6, r0
 8009214:	462b      	mov	r3, r5
 8009216:	b991      	cbnz	r1, 800923e <scalbn+0x36>
 8009218:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800921c:	4323      	orrs	r3, r4
 800921e:	d03d      	beq.n	800929c <scalbn+0x94>
 8009220:	4b35      	ldr	r3, [pc, #212]	@ (80092f8 <scalbn+0xf0>)
 8009222:	4620      	mov	r0, r4
 8009224:	4629      	mov	r1, r5
 8009226:	2200      	movs	r2, #0
 8009228:	f7f7 f9e6 	bl	80005f8 <__aeabi_dmul>
 800922c:	4b33      	ldr	r3, [pc, #204]	@ (80092fc <scalbn+0xf4>)
 800922e:	429e      	cmp	r6, r3
 8009230:	4604      	mov	r4, r0
 8009232:	460d      	mov	r5, r1
 8009234:	da0f      	bge.n	8009256 <scalbn+0x4e>
 8009236:	a328      	add	r3, pc, #160	@ (adr r3, 80092d8 <scalbn+0xd0>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	e01e      	b.n	800927c <scalbn+0x74>
 800923e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009242:	4291      	cmp	r1, r2
 8009244:	d10b      	bne.n	800925e <scalbn+0x56>
 8009246:	4622      	mov	r2, r4
 8009248:	4620      	mov	r0, r4
 800924a:	4629      	mov	r1, r5
 800924c:	f7f7 f81e 	bl	800028c <__adddf3>
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	e022      	b.n	800929c <scalbn+0x94>
 8009256:	460b      	mov	r3, r1
 8009258:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800925c:	3936      	subs	r1, #54	@ 0x36
 800925e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009262:	4296      	cmp	r6, r2
 8009264:	dd0d      	ble.n	8009282 <scalbn+0x7a>
 8009266:	2d00      	cmp	r5, #0
 8009268:	a11d      	add	r1, pc, #116	@ (adr r1, 80092e0 <scalbn+0xd8>)
 800926a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800926e:	da02      	bge.n	8009276 <scalbn+0x6e>
 8009270:	a11d      	add	r1, pc, #116	@ (adr r1, 80092e8 <scalbn+0xe0>)
 8009272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009276:	a31a      	add	r3, pc, #104	@ (adr r3, 80092e0 <scalbn+0xd8>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f7 f9bc 	bl	80005f8 <__aeabi_dmul>
 8009280:	e7e6      	b.n	8009250 <scalbn+0x48>
 8009282:	1872      	adds	r2, r6, r1
 8009284:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009288:	428a      	cmp	r2, r1
 800928a:	dcec      	bgt.n	8009266 <scalbn+0x5e>
 800928c:	2a00      	cmp	r2, #0
 800928e:	dd08      	ble.n	80092a2 <scalbn+0x9a>
 8009290:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009294:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009298:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800929c:	ec45 4b10 	vmov	d0, r4, r5
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80092a6:	da08      	bge.n	80092ba <scalbn+0xb2>
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80092d8 <scalbn+0xd0>)
 80092ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092b0:	dac1      	bge.n	8009236 <scalbn+0x2e>
 80092b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80092f0 <scalbn+0xe8>)
 80092b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092b8:	e7bd      	b.n	8009236 <scalbn+0x2e>
 80092ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80092be:	3236      	adds	r2, #54	@ 0x36
 80092c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80092c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80092c8:	4620      	mov	r0, r4
 80092ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009300 <scalbn+0xf8>)
 80092cc:	4629      	mov	r1, r5
 80092ce:	2200      	movs	r2, #0
 80092d0:	e7d4      	b.n	800927c <scalbn+0x74>
 80092d2:	bf00      	nop
 80092d4:	f3af 8000 	nop.w
 80092d8:	c2f8f359 	.word	0xc2f8f359
 80092dc:	01a56e1f 	.word	0x01a56e1f
 80092e0:	8800759c 	.word	0x8800759c
 80092e4:	7e37e43c 	.word	0x7e37e43c
 80092e8:	8800759c 	.word	0x8800759c
 80092ec:	fe37e43c 	.word	0xfe37e43c
 80092f0:	c2f8f359 	.word	0xc2f8f359
 80092f4:	81a56e1f 	.word	0x81a56e1f
 80092f8:	43500000 	.word	0x43500000
 80092fc:	ffff3cb0 	.word	0xffff3cb0
 8009300:	3c900000 	.word	0x3c900000
 8009304:	00000000 	.word	0x00000000

08009308 <floor>:
 8009308:	ec51 0b10 	vmov	r0, r1, d0
 800930c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009318:	2e13      	cmp	r6, #19
 800931a:	460c      	mov	r4, r1
 800931c:	4605      	mov	r5, r0
 800931e:	4680      	mov	r8, r0
 8009320:	dc34      	bgt.n	800938c <floor+0x84>
 8009322:	2e00      	cmp	r6, #0
 8009324:	da17      	bge.n	8009356 <floor+0x4e>
 8009326:	a332      	add	r3, pc, #200	@ (adr r3, 80093f0 <floor+0xe8>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	f7f6 ffae 	bl	800028c <__adddf3>
 8009330:	2200      	movs	r2, #0
 8009332:	2300      	movs	r3, #0
 8009334:	f7f7 fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8009338:	b150      	cbz	r0, 8009350 <floor+0x48>
 800933a:	2c00      	cmp	r4, #0
 800933c:	da55      	bge.n	80093ea <floor+0xe2>
 800933e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009342:	432c      	orrs	r4, r5
 8009344:	2500      	movs	r5, #0
 8009346:	42ac      	cmp	r4, r5
 8009348:	4c2b      	ldr	r4, [pc, #172]	@ (80093f8 <floor+0xf0>)
 800934a:	bf08      	it	eq
 800934c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009350:	4621      	mov	r1, r4
 8009352:	4628      	mov	r0, r5
 8009354:	e023      	b.n	800939e <floor+0x96>
 8009356:	4f29      	ldr	r7, [pc, #164]	@ (80093fc <floor+0xf4>)
 8009358:	4137      	asrs	r7, r6
 800935a:	ea01 0307 	and.w	r3, r1, r7
 800935e:	4303      	orrs	r3, r0
 8009360:	d01d      	beq.n	800939e <floor+0x96>
 8009362:	a323      	add	r3, pc, #140	@ (adr r3, 80093f0 <floor+0xe8>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f6 ff90 	bl	800028c <__adddf3>
 800936c:	2200      	movs	r2, #0
 800936e:	2300      	movs	r3, #0
 8009370:	f7f7 fbd2 	bl	8000b18 <__aeabi_dcmpgt>
 8009374:	2800      	cmp	r0, #0
 8009376:	d0eb      	beq.n	8009350 <floor+0x48>
 8009378:	2c00      	cmp	r4, #0
 800937a:	bfbe      	ittt	lt
 800937c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009380:	4133      	asrlt	r3, r6
 8009382:	18e4      	addlt	r4, r4, r3
 8009384:	ea24 0407 	bic.w	r4, r4, r7
 8009388:	2500      	movs	r5, #0
 800938a:	e7e1      	b.n	8009350 <floor+0x48>
 800938c:	2e33      	cmp	r6, #51	@ 0x33
 800938e:	dd0a      	ble.n	80093a6 <floor+0x9e>
 8009390:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009394:	d103      	bne.n	800939e <floor+0x96>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	f7f6 ff77 	bl	800028c <__adddf3>
 800939e:	ec41 0b10 	vmov	d0, r0, r1
 80093a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80093aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80093ae:	40df      	lsrs	r7, r3
 80093b0:	4207      	tst	r7, r0
 80093b2:	d0f4      	beq.n	800939e <floor+0x96>
 80093b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80093f0 <floor+0xe8>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f7f6 ff67 	bl	800028c <__adddf3>
 80093be:	2200      	movs	r2, #0
 80093c0:	2300      	movs	r3, #0
 80093c2:	f7f7 fba9 	bl	8000b18 <__aeabi_dcmpgt>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d0c2      	beq.n	8009350 <floor+0x48>
 80093ca:	2c00      	cmp	r4, #0
 80093cc:	da0a      	bge.n	80093e4 <floor+0xdc>
 80093ce:	2e14      	cmp	r6, #20
 80093d0:	d101      	bne.n	80093d6 <floor+0xce>
 80093d2:	3401      	adds	r4, #1
 80093d4:	e006      	b.n	80093e4 <floor+0xdc>
 80093d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80093da:	2301      	movs	r3, #1
 80093dc:	40b3      	lsls	r3, r6
 80093de:	441d      	add	r5, r3
 80093e0:	4545      	cmp	r5, r8
 80093e2:	d3f6      	bcc.n	80093d2 <floor+0xca>
 80093e4:	ea25 0507 	bic.w	r5, r5, r7
 80093e8:	e7b2      	b.n	8009350 <floor+0x48>
 80093ea:	2500      	movs	r5, #0
 80093ec:	462c      	mov	r4, r5
 80093ee:	e7af      	b.n	8009350 <floor+0x48>
 80093f0:	8800759c 	.word	0x8800759c
 80093f4:	7e37e43c 	.word	0x7e37e43c
 80093f8:	bff00000 	.word	0xbff00000
 80093fc:	000fffff 	.word	0x000fffff

08009400 <_init>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr

0800940c <_fini>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr
