
projeto_final_engd33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b718  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002198  0800b8b8  0800b8b8  0000c8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da50  0800da50  0000fff0  2**0
                  CONTENTS
  4 .ARM          00000008  0800da50  0800da50  0000ea50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da58  0800da58  0000fff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da58  0800da58  0000ea58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da5c  0800da5c  0000ea5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ff0  20000000  0800da60  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  20000ff0  0800ea50  0000fff0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005c4c  0800ea50  00010c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000fff0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018859  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a86  00000000  00000000  00028879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0002c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111b  00000000  00000000  0002d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001902d  00000000  00000000  0002ea63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173d6  00000000  00000000  00047a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b1f0  00000000  00000000  0005ee66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007034  00000000  00000000  000fa09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001010d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000ff0 	.word	0x20000ff0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8a0 	.word	0x0800b8a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000ff4 	.word	0x20000ff4
 80001dc:	0800b8a0 	.word	0x0800b8a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b08d      	sub	sp, #52	@ 0x34
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	4611      	mov	r1, r2
 8000f52:	461a      	mov	r2, r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	81bb      	strh	r3, [r7, #12]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b1e      	cmp	r3, #30
 8000f64:	d964      	bls.n	8001030 <ILI9341_DrawChar+0xe8>
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db60      	blt.n	8001030 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3301      	adds	r3, #1
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3303      	adds	r3, #3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3b20      	subs	r3, #32
 8000f90:	7ffa      	ldrb	r2, [r7, #31]
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	3304      	adds	r3, #4
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000f9e:	7fbb      	ldrb	r3, [r7, #30]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	7f7b      	ldrb	r3, [r7, #29]
 8000fa4:	b29c      	uxth	r4, r3
 8000fa6:	88f9      	ldrh	r1, [r7, #6]
 8000fa8:	89b8      	ldrh	r0, [r7, #12]
 8000faa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4623      	mov	r3, r4
 8000fb0:	f000 fbf4 	bl	800179c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb8:	e035      	b.n	8001026 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	e02b      	b.n	8001018 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000fc0:	7f3b      	ldrb	r3, [r7, #28]
 8000fc2:	6a3a      	ldr	r2, [r7, #32]
 8000fc4:	fb03 f202 	mul.w	r2, r3, r2
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fca:	10db      	asrs	r3, r3, #3
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000fea:	7dfa      	ldrb	r2, [r7, #23]
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00d      	beq.n	8001012 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	89bb      	ldrh	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b298      	uxth	r0, r3
 8001000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001002:	b29a      	uxth	r2, r3
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800100c:	4619      	mov	r1, r3
 800100e:	f000 fb5f 	bl	80016d0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	3301      	adds	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	7fbb      	ldrb	r3, [r7, #30]
 800101a:	6a3a      	ldr	r2, [r7, #32]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbcf      	blt.n	8000fc0 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	3301      	adds	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
 8001026:	7f7b      	ldrb	r3, [r7, #29]
 8001028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800102a:	429a      	cmp	r2, r3
 800102c:	dbc5      	blt.n	8000fba <ILI9341_DrawChar+0x72>
 800102e:	e000      	b.n	8001032 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8001030:	bf00      	nop
			}
		}
	}
}
 8001032:	372c      	adds	r7, #44	@ 0x2c
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	460b      	mov	r3, r1
 8001048:	80fb      	strh	r3, [r7, #6]
 800104a:	4613      	mov	r3, r2
 800104c:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	77bb      	strb	r3, [r7, #30]

	while (*str)
 800105c:	e02d      	b.n	80010ba <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	88b9      	ldrh	r1, [r7, #4]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	460b      	mov	r3, r1
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	f7ff ff69 	bl	8000f48 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3b20      	subs	r3, #32
 800107c:	7ffa      	ldrb	r2, [r7, #31]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3304      	adds	r3, #4
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	1c9a      	adds	r2, r3, #2
 8001094:	7fbb      	ldrb	r3, [r7, #30]
 8001096:	429a      	cmp	r2, r3
 8001098:	da07      	bge.n	80010aa <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	b29a      	uxth	r2, r3
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	4413      	add	r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3302      	adds	r3, #2
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	e004      	b.n	80010b4 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 80010aa:	7fbb      	ldrb	r3, [r7, #30]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4413      	add	r3, r2
 80010b2:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
	while (*str)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1cd      	bne.n	800105e <ILI9341_DrawText+0x26>
	}
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_SPI_TxCpltCallback+0x24>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d104      	bne.n	80010e6 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2108      	movs	r1, #8
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <HAL_SPI_TxCpltCallback+0x28>)
 80010e2:	f002 f8bd 	bl	8003260 <HAL_GPIO_WritePin>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000106c 	.word	0x2000106c
 80010f4:	40020000 	.word	0x40020000

080010f8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001102:	bf00      	nop
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <ILI9341_SPI_Tx+0x30>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b02      	cmp	r3, #2
 8001110:	d1f8      	bne.n	8001104 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <ILI9341_SPI_Tx+0x30>)
 800111a:	f002 fefd 	bl	8003f18 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000106c 	.word	0x2000106c

0800112c <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001138:	bf00      	nop
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <ILI9341_SPI_TxBuffer+0x30>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b02      	cmp	r3, #2
 8001146:	d1f8      	bne.n	800113a <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	461a      	mov	r2, r3
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <ILI9341_SPI_TxBuffer+0x30>)
 8001150:	f002 fee2 	bl	8003f18 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000106c 	.word	0x2000106c

08001160 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800116a:	2200      	movs	r2, #0
 800116c:	2104      	movs	r1, #4
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <ILI9341_WriteCommand+0x30>)
 8001170:	f002 f876 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001174:	2200      	movs	r2, #0
 8001176:	2108      	movs	r1, #8
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <ILI9341_WriteCommand+0x30>)
 800117a:	f002 f871 	bl	8003260 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffb9 	bl	80010f8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800119e:	2201      	movs	r2, #1
 80011a0:	2104      	movs	r1, #4
 80011a2:	4808      	ldr	r0, [pc, #32]	@ (80011c4 <ILI9341_WriteData+0x30>)
 80011a4:	f002 f85c 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80011a8:	2200      	movs	r2, #0
 80011aa:	2108      	movs	r1, #8
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <ILI9341_WriteData+0x30>)
 80011ae:	f002 f857 	bl	8003260 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff9f 	bl	80010f8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020000 	.word	0x40020000

080011c8 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80011d4:	2201      	movs	r2, #1
 80011d6:	2104      	movs	r1, #4
 80011d8:	4808      	ldr	r0, [pc, #32]	@ (80011fc <ILI9341_WriteBuffer+0x34>)
 80011da:	f002 f841 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80011de:	2200      	movs	r2, #0
 80011e0:	2108      	movs	r1, #8
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <ILI9341_WriteBuffer+0x34>)
 80011e4:	f002 f83c 	bl	8003260 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff9d 	bl	800112c <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40020000 	.word	0x40020000

08001200 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	4603      	mov	r3, r0
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
 800121a:	4613      	mov	r3, r2
 800121c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800123e:	202a      	movs	r0, #42	@ 0x2a
 8001240:	f7ff ff8e 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2104      	movs	r1, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffbc 	bl	80011c8 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b29b      	uxth	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001260:	883b      	ldrh	r3, [r7, #0]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800126a:	883b      	ldrh	r3, [r7, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001270:	202b      	movs	r0, #43	@ 0x2b
 8001272:	f7ff ff75 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffa3 	bl	80011c8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001282:	202c      	movs	r0, #44	@ 0x2c
 8001284:	f7ff ff6c 	bl	8001160 <ILI9341_WriteCommand>
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}

08001290 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001294:	2200      	movs	r2, #0
 8001296:	2110      	movs	r1, #16
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <ILI9341_Reset+0x3c>)
 800129a:	f001 ffe1 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f001 fcce 	bl	8002c40 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80012a4:	2200      	movs	r2, #0
 80012a6:	2108      	movs	r1, #8
 80012a8:	4808      	ldr	r0, [pc, #32]	@ (80012cc <ILI9341_Reset+0x3c>)
 80012aa:	f001 ffd9 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fcc6 	bl	8002c40 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80012b4:	2201      	movs	r2, #1
 80012b6:	2110      	movs	r1, #16
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <ILI9341_Reset+0x3c>)
 80012ba:	f001 ffd1 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80012be:	2201      	movs	r2, #1
 80012c0:	2108      	movs	r1, #8
 80012c2:	4802      	ldr	r0, [pc, #8]	@ (80012cc <ILI9341_Reset+0x3c>)
 80012c4:	f001 ffcc 	bl	8003260 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40020000 	.word	0x40020000

080012d0 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80012d4:	2201      	movs	r2, #1
 80012d6:	2110      	movs	r1, #16
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <ILI9341_Enable+0x14>)
 80012da:	f001 ffc1 	bl	8003260 <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020000 	.word	0x40020000

080012e8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80012ec:	f7ff fff0 	bl	80012d0 <ILI9341_Enable>
	ILI9341_Reset();
 80012f0:	f7ff ffce 	bl	8001290 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff ff33 	bl	8001160 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f001 fca0 	bl	8002c40 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001300:	20cb      	movs	r0, #203	@ 0xcb
 8001302:	f7ff ff2d 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001306:	2039      	movs	r0, #57	@ 0x39
 8001308:	f7ff ff44 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800130c:	202c      	movs	r0, #44	@ 0x2c
 800130e:	f7ff ff41 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff ff3e 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001318:	2034      	movs	r0, #52	@ 0x34
 800131a:	f7ff ff3b 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff ff38 	bl	8001194 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001324:	20cf      	movs	r0, #207	@ 0xcf
 8001326:	f7ff ff1b 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff ff32 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001330:	20c1      	movs	r0, #193	@ 0xc1
 8001332:	f7ff ff2f 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001336:	2030      	movs	r0, #48	@ 0x30
 8001338:	f7ff ff2c 	bl	8001194 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800133c:	20e8      	movs	r0, #232	@ 0xe8
 800133e:	f7ff ff0f 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001342:	2085      	movs	r0, #133	@ 0x85
 8001344:	f7ff ff26 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff ff23 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800134e:	2078      	movs	r0, #120	@ 0x78
 8001350:	f7ff ff20 	bl	8001194 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001354:	20ea      	movs	r0, #234	@ 0xea
 8001356:	f7ff ff03 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ff1a 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ff17 	bl	8001194 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001366:	20ed      	movs	r0, #237	@ 0xed
 8001368:	f7ff fefa 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800136c:	2064      	movs	r0, #100	@ 0x64
 800136e:	f7ff ff11 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff ff0e 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001378:	2012      	movs	r0, #18
 800137a:	f7ff ff0b 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800137e:	2081      	movs	r0, #129	@ 0x81
 8001380:	f7ff ff08 	bl	8001194 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001384:	20f7      	movs	r0, #247	@ 0xf7
 8001386:	f7ff feeb 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800138a:	2020      	movs	r0, #32
 800138c:	f7ff ff02 	bl	8001194 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001390:	20c0      	movs	r0, #192	@ 0xc0
 8001392:	f7ff fee5 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001396:	2023      	movs	r0, #35	@ 0x23
 8001398:	f7ff fefc 	bl	8001194 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800139c:	20c1      	movs	r0, #193	@ 0xc1
 800139e:	f7ff fedf 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80013a2:	2010      	movs	r0, #16
 80013a4:	f7ff fef6 	bl	8001194 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80013a8:	20c5      	movs	r0, #197	@ 0xc5
 80013aa:	f7ff fed9 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80013ae:	203e      	movs	r0, #62	@ 0x3e
 80013b0:	f7ff fef0 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80013b4:	2028      	movs	r0, #40	@ 0x28
 80013b6:	f7ff feed 	bl	8001194 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80013ba:	20c7      	movs	r0, #199	@ 0xc7
 80013bc:	f7ff fed0 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80013c0:	2086      	movs	r0, #134	@ 0x86
 80013c2:	f7ff fee7 	bl	8001194 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80013c6:	2036      	movs	r0, #54	@ 0x36
 80013c8:	f7ff feca 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80013cc:	2048      	movs	r0, #72	@ 0x48
 80013ce:	f7ff fee1 	bl	8001194 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80013d2:	203a      	movs	r0, #58	@ 0x3a
 80013d4:	f7ff fec4 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80013d8:	2055      	movs	r0, #85	@ 0x55
 80013da:	f7ff fedb 	bl	8001194 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80013de:	20b1      	movs	r0, #177	@ 0xb1
 80013e0:	f7ff febe 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fed5 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80013ea:	2018      	movs	r0, #24
 80013ec:	f7ff fed2 	bl	8001194 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80013f0:	20b6      	movs	r0, #182	@ 0xb6
 80013f2:	f7ff feb5 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80013f6:	2008      	movs	r0, #8
 80013f8:	f7ff fecc 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80013fc:	2082      	movs	r0, #130	@ 0x82
 80013fe:	f7ff fec9 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001402:	2027      	movs	r0, #39	@ 0x27
 8001404:	f7ff fec6 	bl	8001194 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001408:	20f2      	movs	r0, #242	@ 0xf2
 800140a:	f7ff fea9 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fec0 	bl	8001194 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001414:	2026      	movs	r0, #38	@ 0x26
 8001416:	f7ff fea3 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff feba 	bl	8001194 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001420:	20e0      	movs	r0, #224	@ 0xe0
 8001422:	f7ff fe9d 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001426:	200f      	movs	r0, #15
 8001428:	f7ff feb4 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800142c:	2031      	movs	r0, #49	@ 0x31
 800142e:	f7ff feb1 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001432:	202b      	movs	r0, #43	@ 0x2b
 8001434:	f7ff feae 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001438:	200c      	movs	r0, #12
 800143a:	f7ff feab 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800143e:	200e      	movs	r0, #14
 8001440:	f7ff fea8 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001444:	2008      	movs	r0, #8
 8001446:	f7ff fea5 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800144a:	204e      	movs	r0, #78	@ 0x4e
 800144c:	f7ff fea2 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001450:	20f1      	movs	r0, #241	@ 0xf1
 8001452:	f7ff fe9f 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001456:	2037      	movs	r0, #55	@ 0x37
 8001458:	f7ff fe9c 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800145c:	2007      	movs	r0, #7
 800145e:	f7ff fe99 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001462:	2010      	movs	r0, #16
 8001464:	f7ff fe96 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001468:	2003      	movs	r0, #3
 800146a:	f7ff fe93 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800146e:	200e      	movs	r0, #14
 8001470:	f7ff fe90 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001474:	2009      	movs	r0, #9
 8001476:	f7ff fe8d 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fe8a 	bl	8001194 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001480:	20e1      	movs	r0, #225	@ 0xe1
 8001482:	f7ff fe6d 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fe84 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800148c:	200e      	movs	r0, #14
 800148e:	f7ff fe81 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001492:	2014      	movs	r0, #20
 8001494:	f7ff fe7e 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001498:	2003      	movs	r0, #3
 800149a:	f7ff fe7b 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800149e:	2011      	movs	r0, #17
 80014a0:	f7ff fe78 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80014a4:	2007      	movs	r0, #7
 80014a6:	f7ff fe75 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014aa:	2031      	movs	r0, #49	@ 0x31
 80014ac:	f7ff fe72 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80014b0:	20c1      	movs	r0, #193	@ 0xc1
 80014b2:	f7ff fe6f 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80014b6:	2048      	movs	r0, #72	@ 0x48
 80014b8:	f7ff fe6c 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014bc:	2008      	movs	r0, #8
 80014be:	f7ff fe69 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f7ff fe66 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80014c8:	200c      	movs	r0, #12
 80014ca:	f7ff fe63 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014ce:	2031      	movs	r0, #49	@ 0x31
 80014d0:	f7ff fe60 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fe5d 	bl	8001194 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80014da:	200f      	movs	r0, #15
 80014dc:	f7ff fe5a 	bl	8001194 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80014e0:	2011      	movs	r0, #17
 80014e2:	f7ff fe3d 	bl	8001160 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80014e6:	2064      	movs	r0, #100	@ 0x64
 80014e8:	f001 fbaa 	bl	8002c40 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80014ec:	2029      	movs	r0, #41	@ 0x29
 80014ee:	f7ff fe37 	bl	8001160 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f802 	bl	80014fc <ILI9341_SetRotation>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8001506:	2036      	movs	r0, #54	@ 0x36
 8001508:	f7ff fe2a 	bl	8001160 <ILI9341_WriteCommand>
	HAL_Delay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f001 fb97 	bl	8002c40 <HAL_Delay>

	switch(rotation)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d837      	bhi.n	8001588 <ILI9341_SetRotation+0x8c>
 8001518:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <ILI9341_SetRotation+0x24>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001531 	.word	0x08001531
 8001524:	08001547 	.word	0x08001547
 8001528:	0800155d 	.word	0x0800155d
 800152c:	08001573 	.word	0x08001573
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001530:	2048      	movs	r0, #72	@ 0x48
 8001532:	f7ff fe2f 	bl	8001194 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <ILI9341_SetRotation+0x98>)
 8001538:	22f0      	movs	r2, #240	@ 0xf0
 800153a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <ILI9341_SetRotation+0x9c>)
 800153e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001542:	801a      	strh	r2, [r3, #0]
		break;
 8001544:	e021      	b.n	800158a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001546:	2028      	movs	r0, #40	@ 0x28
 8001548:	f7ff fe24 	bl	8001194 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <ILI9341_SetRotation+0x98>)
 800154e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001552:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <ILI9341_SetRotation+0x9c>)
 8001556:	22f0      	movs	r2, #240	@ 0xf0
 8001558:	801a      	strh	r2, [r3, #0]
		break;
 800155a:	e016      	b.n	800158a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 800155c:	2088      	movs	r0, #136	@ 0x88
 800155e:	f7ff fe19 	bl	8001194 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <ILI9341_SetRotation+0x98>)
 8001564:	22f0      	movs	r2, #240	@ 0xf0
 8001566:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <ILI9341_SetRotation+0x9c>)
 800156a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800156e:	801a      	strh	r2, [r3, #0]
		break;
 8001570:	e00b      	b.n	800158a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001572:	20e8      	movs	r0, #232	@ 0xe8
 8001574:	f7ff fe0e 	bl	8001194 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <ILI9341_SetRotation+0x98>)
 800157a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800157e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <ILI9341_SetRotation+0x9c>)
 8001582:	22f0      	movs	r2, #240	@ 0xf0
 8001584:	801a      	strh	r2, [r3, #0]
		break;
 8001586:	e000      	b.n	800158a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001588:	bf00      	nop
	}
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000002 	.word	0x20000002
 8001598:	20000000 	.word	0x20000000

0800159c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800159c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a0:	b08d      	sub	sp, #52	@ 0x34
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	6039      	str	r1, [r7, #0]
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	466b      	mov	r3, sp
 80015ac:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ba:	d202      	bcs.n	80015c2 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c0:	e002      	b.n	80015c8 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80015c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2104      	movs	r1, #4
 80015cc:	483e      	ldr	r0, [pc, #248]	@ (80016c8 <ILI9341_DrawColorBurst+0x12c>)
 80015ce:	f001 fe47 	bl	8003260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2108      	movs	r1, #8
 80015d6:	483c      	ldr	r0, [pc, #240]	@ (80016c8 <ILI9341_DrawColorBurst+0x12c>)
 80015d8:	f001 fe42 	bl	8003260 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80015e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015e8:	460b      	mov	r3, r1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	2300      	movs	r3, #0
 80015f0:	4688      	mov	r8, r1
 80015f2:	4699      	mov	r9, r3
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001600:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001604:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001608:	2300      	movs	r3, #0
 800160a:	460c      	mov	r4, r1
 800160c:	461d      	mov	r5, r3
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	00eb      	lsls	r3, r5, #3
 8001618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161c:	00e2      	lsls	r2, r4, #3
 800161e:	1dcb      	adds	r3, r1, #7
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	ebad 0d03 	sub.w	sp, sp, r3
 8001628:	466b      	mov	r3, sp
 800162a:	3300      	adds	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001632:	e00e      	b.n	8001652 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001638:	4413      	add	r3, r2
 800163a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800163e:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	3301      	adds	r3, #1
 8001644:	88fa      	ldrh	r2, [r7, #6]
 8001646:	b2d1      	uxtb	r1, r2
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 800164c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164e:	3302      	adds	r3, #2
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001656:	429a      	cmp	r2, r3
 8001658:	d3ec      	bcc.n	8001634 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800166e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001674:	fb01 f202 	mul.w	r2, r1, r2
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d010      	beq.n	80016a4 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
 8001686:	e009      	b.n	800169c <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168a:	b29a      	uxth	r2, r3
 800168c:	230a      	movs	r3, #10
 800168e:	69b9      	ldr	r1, [r7, #24]
 8001690:	480e      	ldr	r0, [pc, #56]	@ (80016cc <ILI9341_DrawColorBurst+0x130>)
 8001692:	f002 fafe 	bl	8003c92 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
 800169c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3f1      	bcc.n	8001688 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	230a      	movs	r3, #10
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	4807      	ldr	r0, [pc, #28]	@ (80016cc <ILI9341_DrawColorBurst+0x130>)
 80016ae:	f002 faf0 	bl	8003c92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2108      	movs	r1, #8
 80016b6:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <ILI9341_DrawColorBurst+0x12c>)
 80016b8:	f001 fdd2 	bl	8003260 <HAL_GPIO_WritePin>
 80016bc:	46b5      	mov	sp, r6
}
 80016be:	bf00      	nop
 80016c0:	3734      	adds	r7, #52	@ 0x34
 80016c2:	46bd      	mov	sp, r7
 80016c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c8:	40020000 	.word	0x40020000
 80016cc:	2000106c 	.word	0x2000106c

080016d0 <ILI9341_DrawPixel>:
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
}

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
 80016da:	460b      	mov	r3, r1
 80016dc:	80bb      	strh	r3, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <ILI9341_DrawPixel+0xc4>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d24d      	bcs.n	800178a <ILI9341_DrawPixel+0xba>
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <ILI9341_DrawPixel+0xc8>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	88ba      	ldrh	r2, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d247      	bcs.n	800178a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	753b      	strb	r3, [r7, #20]
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	757b      	strb	r3, [r7, #21]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	3301      	adds	r3, #1
 800170e:	121b      	asrs	r3, r3, #8
 8001710:	b2db      	uxtb	r3, r3
 8001712:	75bb      	strb	r3, [r7, #22]
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3301      	adds	r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	b29b      	uxth	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	743b      	strb	r3, [r7, #16]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	747b      	strb	r3, [r7, #17]
 800172e:	88bb      	ldrh	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	121b      	asrs	r3, r3, #8
 8001734:	b2db      	uxtb	r3, r3
 8001736:	74bb      	strb	r3, [r7, #18]
 8001738:	88bb      	ldrh	r3, [r7, #4]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	733b      	strb	r3, [r7, #12]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001752:	202a      	movs	r0, #42	@ 0x2a
 8001754:	f7ff fd04 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2104      	movs	r1, #4
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fd32 	bl	80011c8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001764:	202b      	movs	r0, #43	@ 0x2b
 8001766:	f7ff fcfb 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	2104      	movs	r1, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fd29 	bl	80011c8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001776:	202c      	movs	r0, #44	@ 0x2c
 8001778:	f7ff fcf2 	bl	8001160 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fd20 	bl	80011c8 <ILI9341_WriteBuffer>
 8001788:	e000      	b.n	800178c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800178a:	bf00      	nop
}
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000002 	.word	0x20000002
 8001798:	20000000 	.word	0x20000000

0800179c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <ILI9341_DrawRectangle+0xb0>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d23d      	bcs.n	8001842 <ILI9341_DrawRectangle+0xa6>
 80017c6:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <ILI9341_DrawRectangle+0xb4>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d237      	bcs.n	8001842 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a1c      	ldr	r2, [pc, #112]	@ (800184c <ILI9341_DrawRectangle+0xb0>)
 80017da:	8812      	ldrh	r2, [r2, #0]
 80017dc:	b292      	uxth	r2, r2
 80017de:	4293      	cmp	r3, r2
 80017e0:	dd05      	ble.n	80017ee <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <ILI9341_DrawRectangle+0xb0>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80017ee:	88ba      	ldrh	r2, [r7, #4]
 80017f0:	883b      	ldrh	r3, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <ILI9341_DrawRectangle+0xb4>)
 80017f6:	8812      	ldrh	r2, [r2, #0]
 80017f8:	b292      	uxth	r2, r2
 80017fa:	4293      	cmp	r3, r2
 80017fc:	dd05      	ble.n	800180a <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <ILI9341_DrawRectangle+0xb4>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29a      	uxth	r2, r3
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4413      	add	r3, r2
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29c      	uxth	r4, r3
 8001816:	88ba      	ldrh	r2, [r7, #4]
 8001818:	883b      	ldrh	r3, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	88b9      	ldrh	r1, [r7, #4]
 8001824:	88f8      	ldrh	r0, [r7, #6]
 8001826:	4622      	mov	r2, r4
 8001828:	f7ff fcea 	bl	8001200 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800182c:	883b      	ldrh	r3, [r7, #0]
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	461a      	mov	r2, r3
 8001836:	8b3b      	ldrh	r3, [r7, #24]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff feae 	bl	800159c <ILI9341_DrawColorBurst>
 8001840:	e000      	b.n	8001844 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001842:	bf00      	nop
}
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	20000002 	.word	0x20000002
 8001850:	20000000 	.word	0x20000000

08001854 <userRTOS>:


/* =====================INICIALIZAÇÃO DO RTOS===================== */

// Função de inicialização
void userRTOS(void){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af02      	add	r7, sp, #8

	xMutexVelLinearAtual = xSemaphoreCreateMutex();
 800185a:	2001      	movs	r0, #1
 800185c:	f003 fb77 	bl	8004f4e <xQueueCreateMutex>
 8001860:	4603      	mov	r3, r0
 8001862:	4a3a      	ldr	r2, [pc, #232]	@ (800194c <userRTOS+0xf8>)
 8001864:	6013      	str	r3, [r2, #0]
	xMutexVelAngularAtual = xSemaphoreCreateMutex();
 8001866:	2001      	movs	r0, #1
 8001868:	f003 fb71 	bl	8004f4e <xQueueCreateMutex>
 800186c:	4603      	mov	r3, r0
 800186e:	4a38      	ldr	r2, [pc, #224]	@ (8001950 <userRTOS+0xfc>)
 8001870:	6013      	str	r3, [r2, #0]
	xMutexPosicaoAtual = xSemaphoreCreateMutex();
 8001872:	2001      	movs	r0, #1
 8001874:	f003 fb6b 	bl	8004f4e <xQueueCreateMutex>
 8001878:	4603      	mov	r3, r0
 800187a:	4a36      	ldr	r2, [pc, #216]	@ (8001954 <userRTOS+0x100>)
 800187c:	6013      	str	r3, [r2, #0]

	xQueueCorrente = xQueueCreate(50, sizeof(dataset));
 800187e:	2200      	movs	r2, #0
 8001880:	2110      	movs	r1, #16
 8001882:	2032      	movs	r0, #50	@ 0x32
 8001884:	f003 faeb 	bl	8004e5e <xQueueGenericCreate>
 8001888:	4603      	mov	r3, r0
 800188a:	4a33      	ldr	r2, [pc, #204]	@ (8001958 <userRTOS+0x104>)
 800188c:	6013      	str	r3, [r2, #0]
	xQueueVelAngular = xQueueCreate(30, sizeof(dataset));
 800188e:	2200      	movs	r2, #0
 8001890:	2110      	movs	r1, #16
 8001892:	201e      	movs	r0, #30
 8001894:	f003 fae3 	bl	8004e5e <xQueueGenericCreate>
 8001898:	4603      	mov	r3, r0
 800189a:	4a30      	ldr	r2, [pc, #192]	@ (800195c <userRTOS+0x108>)
 800189c:	6013      	str	r3, [r2, #0]
	xQueuePosicao = xQueueCreate(5, sizeof(dataset));
 800189e:	2200      	movs	r2, #0
 80018a0:	2110      	movs	r1, #16
 80018a2:	2005      	movs	r0, #5
 80018a4:	f003 fadb 	bl	8004e5e <xQueueGenericCreate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001960 <userRTOS+0x10c>)
 80018ac:	6013      	str	r3, [r2, #0]

	xTaskCreate(vDisplayManager,
 80018ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <userRTOS+0x110>)
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	2301      	movs	r3, #1
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018bc:	492a      	ldr	r1, [pc, #168]	@ (8001968 <userRTOS+0x114>)
 80018be:	482b      	ldr	r0, [pc, #172]	@ (800196c <userRTOS+0x118>)
 80018c0:	f004 f8d6 	bl	8005a70 <xTaskCreate>
				2048,
				(void*) 0,
				1,
				&xHandlerDisplayManager);

	xTaskCreate(vTaskGerarQueueCorrente,
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2305      	movs	r3, #5
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	4927      	ldr	r1, [pc, #156]	@ (8001970 <userRTOS+0x11c>)
 80018d2:	4828      	ldr	r0, [pc, #160]	@ (8001974 <userRTOS+0x120>)
 80018d4:	f004 f8cc 	bl	8005a70 <xTaskCreate>
				128,
				(void*) 0,
				5,
				NULL);

	xTaskCreate(vTaskGerarQueueVelAngular,
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2304      	movs	r3, #4
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	4924      	ldr	r1, [pc, #144]	@ (8001978 <userRTOS+0x124>)
 80018e6:	4825      	ldr	r0, [pc, #148]	@ (800197c <userRTOS+0x128>)
 80018e8:	f004 f8c2 	bl	8005a70 <xTaskCreate>
				128,
				(void*) 0,
				4,
				NULL);

	xTaskCreate(vTaskGerarQueuePosicao,
 80018ec:	2300      	movs	r3, #0
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2303      	movs	r3, #3
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	4921      	ldr	r1, [pc, #132]	@ (8001980 <userRTOS+0x12c>)
 80018fa:	4822      	ldr	r0, [pc, #136]	@ (8001984 <userRTOS+0x130>)
 80018fc:	f004 f8b8 	bl	8005a70 <xTaskCreate>
				128,
				(void*) 0,
				3,
				NULL);

	xTaskCreate(vTaskQueueCorrenteReader,
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800190e:	491e      	ldr	r1, [pc, #120]	@ (8001988 <userRTOS+0x134>)
 8001910:	481e      	ldr	r0, [pc, #120]	@ (800198c <userRTOS+0x138>)
 8001912:	f004 f8ad 	bl	8005a70 <xTaskCreate>
				256,
				(void*) 0,
				2,
				NULL);

	xTaskCreate(vTaskQueueVelAngularReader,
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2302      	movs	r3, #2
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001924:	491a      	ldr	r1, [pc, #104]	@ (8001990 <userRTOS+0x13c>)
 8001926:	481b      	ldr	r0, [pc, #108]	@ (8001994 <userRTOS+0x140>)
 8001928:	f004 f8a2 	bl	8005a70 <xTaskCreate>
				256,
				(void*) 0,
				2,
				NULL);

	xTaskCreate(vTaskQueuePosicaoReader,
 800192c:	2300      	movs	r3, #0
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	2302      	movs	r3, #2
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2300      	movs	r3, #0
 8001936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800193a:	4917      	ldr	r1, [pc, #92]	@ (8001998 <userRTOS+0x144>)
 800193c:	4817      	ldr	r0, [pc, #92]	@ (800199c <userRTOS+0x148>)
 800193e:	f004 f897 	bl	8005a70 <xTaskCreate>
				256,
				(void*) 0,
				2,
				NULL);

	vTaskStartScheduler();
 8001942:	f004 faa9 	bl	8005e98 <vTaskStartScheduler>

    while(1);
 8001946:	bf00      	nop
 8001948:	e7fd      	b.n	8001946 <userRTOS+0xf2>
 800194a:	bf00      	nop
 800194c:	20001060 	.word	0x20001060
 8001950:	20001064 	.word	0x20001064
 8001954:	20001068 	.word	0x20001068
 8001958:	20001050 	.word	0x20001050
 800195c:	20001054 	.word	0x20001054
 8001960:	20001058 	.word	0x20001058
 8001964:	2000104c 	.word	0x2000104c
 8001968:	0800b8b8 	.word	0x0800b8b8
 800196c:	080019a1 	.word	0x080019a1
 8001970:	0800b8c8 	.word	0x0800b8c8
 8001974:	08001a21 	.word	0x08001a21
 8001978:	0800b8dc 	.word	0x0800b8dc
 800197c:	08001ab5 	.word	0x08001ab5
 8001980:	0800b8f4 	.word	0x0800b8f4
 8001984:	08001b49 	.word	0x08001b49
 8001988:	0800b908 	.word	0x0800b908
 800198c:	08001bdd 	.word	0x08001bdd
 8001990:	0800b91c 	.word	0x0800b91c
 8001994:	08001c51 	.word	0x08001c51
 8001998:	0800b934 	.word	0x0800b934
 800199c:	08001f1d 	.word	0x08001f1d

080019a0 <vDisplayManager>:


/* =========================TASKS DO RTOS========================= */

// Gerenciamento da tela
void vDisplayManager(void *p){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;;
	uint16_t sIndice = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	81fb      	strh	r3, [r7, #14]
	while(1){
		xLastWakeTime = xTaskGetTickCount();
 80019ac:	f004 fb90 	bl	80060d0 <xTaskGetTickCount>
 80019b0:	4603      	mov	r3, r0
 80019b2:	60bb      	str	r3, [r7, #8]
		if(sIndice >= 9){
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d91f      	bls.n	80019fa <vDisplayManager+0x5a>
			switch(sTelaAtual) {
 80019ba:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <vDisplayManager+0x7c>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d00e      	beq.n	80019e0 <vDisplayManager+0x40>
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	dc10      	bgt.n	80019e8 <vDisplayManager+0x48>
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d002      	beq.n	80019d0 <vDisplayManager+0x30>
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d004      	beq.n	80019d8 <vDisplayManager+0x38>
    		        break;
    		    case TELA3:
    		       	sTelaAtual = TELA1;
    		        break;
    		    default:
    		        break;
 80019ce:	e00b      	b.n	80019e8 <vDisplayManager+0x48>
    		        sTelaAtual = TELA2;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <vDisplayManager+0x7c>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	801a      	strh	r2, [r3, #0]
    		        break;
 80019d6:	e008      	b.n	80019ea <vDisplayManager+0x4a>
    		        sTelaAtual = TELA3;
 80019d8:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <vDisplayManager+0x7c>)
 80019da:	2203      	movs	r2, #3
 80019dc:	801a      	strh	r2, [r3, #0]
    		        break;
 80019de:	e004      	b.n	80019ea <vDisplayManager+0x4a>
    		       	sTelaAtual = TELA1;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <vDisplayManager+0x7c>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	801a      	strh	r2, [r3, #0]
    		        break;
 80019e6:	e000      	b.n	80019ea <vDisplayManager+0x4a>
    		        break;
 80019e8:	bf00      	nop
    		}
			baseTela(sTelaAtual);
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <vDisplayManager+0x7c>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fbb4 	bl	800215c <baseTela>
			sIndice = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	81fb      	strh	r3, [r7, #14]
 80019f8:	e002      	b.n	8001a00 <vDisplayManager+0x60>
		}else{
			sIndice++;
 80019fa:	89fb      	ldrh	r3, [r7, #14]
 80019fc:	3301      	adds	r3, #1
 80019fe:	81fb      	strh	r3, [r7, #14]
		}
		dadosTela(sTelaAtual);
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <vDisplayManager+0x7c>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fd6f 	bl	80024e8 <dadosTela>
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(REFRESH_TELA));
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	f240 21bb 	movw	r1, #699	@ 0x2bb
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 f98a 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001a18:	e7c8      	b.n	80019ac <vDisplayManager+0xc>
 8001a1a:	bf00      	nop
 8001a1c:	20000e14 	.word	0x20000e14

08001a20 <vTaskGerarQueueCorrente>:
	}
}

// Geração de dados de corrente e envio para queue
void vTaskGerarQueueCorrente(void *p) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	dataset correntes;
	uint16_t sIndice = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	83fb      	strh	r3, [r7, #30]
	while(1) {
		xLastWakeTime = xTaskGetTickCount();
 8001a2c:	f004 fb50 	bl	80060d0 <xTaskGetTickCount>
 8001a30:	4603      	mov	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]
		correntes.x = vetorCorrenteX[sIndice];
 8001a34:	8bfb      	ldrh	r3, [r7, #30]
 8001a36:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa0 <vTaskGerarQueueCorrente+0x80>)
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60bb      	str	r3, [r7, #8]
		correntes.y = vetorCorrenteY[sIndice];
 8001a40:	8bfb      	ldrh	r3, [r7, #30]
 8001a42:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <vTaskGerarQueueCorrente+0x84>)
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
		correntes.z = vetorCorrenteZ[sIndice];
 8001a4c:	8bfb      	ldrh	r3, [r7, #30]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <vTaskGerarQueueCorrente+0x88>)
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
		correntes.timestamp = xLastWakeTime;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	617b      	str	r3, [r7, #20]
		if(sIndice >= LENGTH_LUT - 1){
 8001a5c:	8bfb      	ldrh	r3, [r7, #30]
 8001a5e:	2b62      	cmp	r3, #98	@ 0x62
 8001a60:	d902      	bls.n	8001a68 <vTaskGerarQueueCorrente+0x48>
			sIndice = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	83fb      	strh	r3, [r7, #30]
 8001a66:	e002      	b.n	8001a6e <vTaskGerarQueueCorrente+0x4e>
		}else{
			sIndice++;
 8001a68:	8bfb      	ldrh	r3, [r7, #30]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	83fb      	strh	r3, [r7, #30]
		}
		if(xQueueSendToBack(xQueueCorrente, &correntes, 0) == errQUEUE_FULL){
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <vTaskGerarQueueCorrente+0x8c>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	f107 0108 	add.w	r1, r7, #8
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f003 fa81 	bl	8004f80 <xQueueGenericSend>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <vTaskGerarQueueCorrente+0x70>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a8a:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <vTaskGerarQueueCorrente+0x90>)
 8001a8c:	f001 fbe8 	bl	8003260 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1));
 8001a90:	f107 0318 	add.w	r3, r7, #24
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f948 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001a9c:	e7c6      	b.n	8001a2c <vTaskGerarQueueCorrente+0xc>
 8001a9e:	bf00      	nop
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000194 	.word	0x20000194
 8001aa8:	20000324 	.word	0x20000324
 8001aac:	20001050 	.word	0x20001050
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <vTaskGerarQueueVelAngular>:
	}
}

// Geração de dados de velocidade angular e envio para queue
void vTaskGerarQueueVelAngular(void *p) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	dataset velAngular;
	uint16_t sIndice = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	83fb      	strh	r3, [r7, #30]
	while(1) {
		xLastWakeTime = xTaskGetTickCount();
 8001ac0:	f004 fb06 	bl	80060d0 <xTaskGetTickCount>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	61bb      	str	r3, [r7, #24]
		velAngular.x = vetorVelAngX[sIndice];
 8001ac8:	8bfb      	ldrh	r3, [r7, #30]
 8001aca:	4a1a      	ldr	r2, [pc, #104]	@ (8001b34 <vTaskGerarQueueVelAngular+0x80>)
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60bb      	str	r3, [r7, #8]
		velAngular.y = vetorVelAngY[sIndice];
 8001ad4:	8bfb      	ldrh	r3, [r7, #30]
 8001ad6:	4a18      	ldr	r2, [pc, #96]	@ (8001b38 <vTaskGerarQueueVelAngular+0x84>)
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]
		velAngular.z = vetorVelAngZ[sIndice];
 8001ae0:	8bfb      	ldrh	r3, [r7, #30]
 8001ae2:	4a16      	ldr	r2, [pc, #88]	@ (8001b3c <vTaskGerarQueueVelAngular+0x88>)
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
		velAngular.timestamp = xLastWakeTime;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	617b      	str	r3, [r7, #20]
		if(sIndice >= LENGTH_LUT - 1){
 8001af0:	8bfb      	ldrh	r3, [r7, #30]
 8001af2:	2b62      	cmp	r3, #98	@ 0x62
 8001af4:	d902      	bls.n	8001afc <vTaskGerarQueueVelAngular+0x48>
			sIndice = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	e002      	b.n	8001b02 <vTaskGerarQueueVelAngular+0x4e>
		}else{
			sIndice++;
 8001afc:	8bfb      	ldrh	r3, [r7, #30]
 8001afe:	3301      	adds	r3, #1
 8001b00:	83fb      	strh	r3, [r7, #30]
		}
		if(xQueueSendToBack(xQueueVelAngular, &velAngular, 0) == errQUEUE_FULL){
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <vTaskGerarQueueVelAngular+0x8c>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f107 0108 	add.w	r1, r7, #8
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f003 fa37 	bl	8004f80 <xQueueGenericSend>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <vTaskGerarQueueVelAngular+0x70>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1e:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <vTaskGerarQueueVelAngular+0x90>)
 8001b20:	f001 fb9e 	bl	8003260 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(10));
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	210a      	movs	r1, #10
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 f8fe 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001b30:	e7c6      	b.n	8001ac0 <vTaskGerarQueueVelAngular+0xc>
 8001b32:	bf00      	nop
 8001b34:	200004b4 	.word	0x200004b4
 8001b38:	20000644 	.word	0x20000644
 8001b3c:	200007d4 	.word	0x200007d4
 8001b40:	20001054 	.word	0x20001054
 8001b44:	40020800 	.word	0x40020800

08001b48 <vTaskGerarQueuePosicao>:
	}
}

// Geração de dados de GPS e envio para queue
void vTaskGerarQueuePosicao(void *p) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	dataset posicao;
	uint16_t sIndice = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	83fb      	strh	r3, [r7, #30]
	while(1) {
		xLastWakeTime = xTaskGetTickCount();
 8001b54:	f004 fabc 	bl	80060d0 <xTaskGetTickCount>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	61bb      	str	r3, [r7, #24]
		posicao.x = vetorPosicaoX[sIndice];
 8001b5c:	8bfb      	ldrh	r3, [r7, #30]
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc8 <vTaskGerarQueuePosicao+0x80>)
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60bb      	str	r3, [r7, #8]
		posicao.y = vetorPosicaoY[sIndice];
 8001b68:	8bfb      	ldrh	r3, [r7, #30]
 8001b6a:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <vTaskGerarQueuePosicao+0x84>)
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]
		posicao.z = vetorPosicaoZ[sIndice];
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <vTaskGerarQueuePosicao+0x88>)
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
		posicao.timestamp = xLastWakeTime;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	617b      	str	r3, [r7, #20]
		if(sIndice >= LENGTH_LUT - 1){
 8001b84:	8bfb      	ldrh	r3, [r7, #30]
 8001b86:	2b62      	cmp	r3, #98	@ 0x62
 8001b88:	d902      	bls.n	8001b90 <vTaskGerarQueuePosicao+0x48>
			sIndice = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	83fb      	strh	r3, [r7, #30]
 8001b8e:	e002      	b.n	8001b96 <vTaskGerarQueuePosicao+0x4e>
		}else{
			sIndice++;
 8001b90:	8bfb      	ldrh	r3, [r7, #30]
 8001b92:	3301      	adds	r3, #1
 8001b94:	83fb      	strh	r3, [r7, #30]
		}
		if(xQueueSendToBack(xQueuePosicao, &posicao, 0) == errQUEUE_FULL){
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <vTaskGerarQueuePosicao+0x8c>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f107 0108 	add.w	r1, r7, #8
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f003 f9ed 	bl	8004f80 <xQueueGenericSend>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <vTaskGerarQueuePosicao+0x70>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb2:	4809      	ldr	r0, [pc, #36]	@ (8001bd8 <vTaskGerarQueuePosicao+0x90>)
 8001bb4:	f001 fb54 	bl	8003260 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	2164      	movs	r1, #100	@ 0x64
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f8b4 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001bc4:	e7c6      	b.n	8001b54 <vTaskGerarQueuePosicao+0xc>
 8001bc6:	bf00      	nop
 8001bc8:	20000964 	.word	0x20000964
 8001bcc:	20000af4 	.word	0x20000af4
 8001bd0:	20000c84 	.word	0x20000c84
 8001bd4:	20001058 	.word	0x20001058
 8001bd8:	40020800 	.word	0x40020800

08001bdc <vTaskQueueCorrenteReader>:
	}
}

// Leitura de dados de corrente da queue
void vTaskQueueCorrenteReader(void *p) {
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8001be4:	2301      	movs	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;
	dataset corrente;
	while (1) {
		xLastWakeTime = xTaskGetTickCount();
 8001be8:	f004 fa72 	bl	80060d0 <xTaskGetTickCount>
 8001bec:	4603      	mov	r3, r0
 8001bee:	61bb      	str	r3, [r7, #24]
		while(xQueueReceive(xQueueCorrente, &corrente, 0) != errQUEUE_EMPTY){
 8001bf0:	e016      	b.n	8001c20 <vTaskQueueCorrenteReader+0x44>
			if(xSemaphoreTake(xMutexCorrenteAtual, xMaxMutexDelay) == pdPASS){
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <vTaskQueueCorrenteReader+0x68>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69f9      	ldr	r1, [r7, #28]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 fc43 	bl	8005484 <xQueueSemaphoreTake>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10d      	bne.n	8001c20 <vTaskQueueCorrenteReader+0x44>
				xCorrenteAtual = corrente;
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <vTaskQueueCorrenteReader+0x6c>)
 8001c06:	461c      	mov	r4, r3
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexCorrenteAtual);
 8001c12:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <vTaskQueueCorrenteReader+0x68>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f003 f9b0 	bl	8004f80 <xQueueGenericSend>
		while(xQueueReceive(xQueueCorrente, &corrente, 0) != errQUEUE_EMPTY){
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <vTaskQueueCorrenteReader+0x70>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f107 0108 	add.w	r1, r7, #8
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fb48 	bl	80052c0 <xQueueReceive>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1dd      	bne.n	8001bf2 <vTaskQueueCorrenteReader+0x16>
			}
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(125));
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	217d      	movs	r1, #125	@ 0x7d
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 f875 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001c42:	e7d1      	b.n	8001be8 <vTaskQueueCorrenteReader+0xc>
 8001c44:	2000105c 	.word	0x2000105c
 8001c48:	2000103c 	.word	0x2000103c
 8001c4c:	20001050 	.word	0x20001050

08001c50 <vTaskQueueVelAngularReader>:
	}
}

// Leitura de dados de velocidade angular da queue
void vTaskQueueVelAngularReader(void *p) {
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b09a      	sub	sp, #104	@ 0x68
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8001c58:	2301      	movs	r3, #1
 8001c5a:	667b      	str	r3, [r7, #100]	@ 0x64
	const uint16_t L_cm = 20;
 8001c5c:	2314      	movs	r3, #20
 8001c5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	const uint16_t r_cm = 15;
 8001c62:	230f      	movs	r3, #15
 8001c64:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	const float alpha1 = 0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const float alpha2 = 2*M_PI/3;
 8001c6e:	4ba4      	ldr	r3, [pc, #656]	@ (8001f00 <vTaskQueueVelAngularReader+0x2b0>)
 8001c70:	65bb      	str	r3, [r7, #88]	@ 0x58
	const float alpha3 = 4*M_PI/3;
 8001c72:	4ba4      	ldr	r3, [pc, #656]	@ (8001f04 <vTaskQueueVelAngularReader+0x2b4>)
 8001c74:	657b      	str	r3, [r7, #84]	@ 0x54
	const float sin_alpha1 = sin(alpha1);
 8001c76:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001c78:	f7fe fc6e 	bl	8000558 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	ec43 2b10 	vmov	d0, r2, r3
 8001c84:	f008 fddc 	bl	800a840 <sin>
 8001c88:	ec53 2b10 	vmov	r2, r3, d0
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ff92 	bl	8000bb8 <__aeabi_d2f>
 8001c94:	4603      	mov	r3, r0
 8001c96:	653b      	str	r3, [r7, #80]	@ 0x50
	const float sin_alpha2 = sin(alpha2);
 8001c98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c9a:	f7fe fc5d 	bl	8000558 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ec43 2b10 	vmov	d0, r2, r3
 8001ca6:	f008 fdcb 	bl	800a840 <sin>
 8001caa:	ec53 2b10 	vmov	r2, r3, d0
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff81 	bl	8000bb8 <__aeabi_d2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const float sin_alpha3 = sin(alpha3);
 8001cba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001cbc:	f7fe fc4c 	bl	8000558 <__aeabi_f2d>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	ec43 2b10 	vmov	d0, r2, r3
 8001cc8:	f008 fdba 	bl	800a840 <sin>
 8001ccc:	ec53 2b10 	vmov	r2, r3, d0
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe ff70 	bl	8000bb8 <__aeabi_d2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
	const float cos_alpha1 = cos(alpha1);
 8001cdc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001cde:	f7fe fc3b 	bl	8000558 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	ec43 2b10 	vmov	d0, r2, r3
 8001cea:	f008 fd55 	bl	800a798 <cos>
 8001cee:	ec53 2b10 	vmov	r2, r3, d0
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff5f 	bl	8000bb8 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	647b      	str	r3, [r7, #68]	@ 0x44
	const float cos_alpha2 = cos(alpha2);
 8001cfe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001d00:	f7fe fc2a 	bl	8000558 <__aeabi_f2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	ec43 2b10 	vmov	d0, r2, r3
 8001d0c:	f008 fd44 	bl	800a798 <cos>
 8001d10:	ec53 2b10 	vmov	r2, r3, d0
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe ff4e 	bl	8000bb8 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	643b      	str	r3, [r7, #64]	@ 0x40
	const float cos_alpha3 = cos(alpha3);
 8001d20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d22:	f7fe fc19 	bl	8000558 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	ec43 2b10 	vmov	d0, r2, r3
 8001d2e:	f008 fd33 	bl	800a798 <cos>
 8001d32:	ec53 2b10 	vmov	r2, r3, d0
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff3d 	bl	8000bb8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
	TickType_t xLastWakeTime;
	float linearVX, linearVY, linearW;
	dataset velAngular, velLinear;
	while (1) {
		xLastWakeTime = xTaskGetTickCount();
 8001d42:	f004 f9c5 	bl	80060d0 <xTaskGetTickCount>
 8001d46:	4603      	mov	r3, r0
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		while(xQueueReceive(xQueueVelAngular, &velAngular, 0) != errQUEUE_EMPTY) {
 8001d4a:	e0c0      	b.n	8001ece <vTaskQueueVelAngularReader+0x27e>
			linearVX = r_cm*(2.0/3.0)*(-(sin_alpha1*velAngular.x)-(sin_alpha2*velAngular.y)-(sin_alpha3*velAngular.z));
 8001d4c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbef 	bl	8000534 <__aeabi_i2d>
 8001d56:	a368      	add	r3, pc, #416	@ (adr r3, 8001ef8 <vTaskQueueVelAngularReader+0x2a8>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc54 	bl	8000608 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d6c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d74:	eeb1 7a67 	vneg.f32	s14, s15
 8001d78:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d7c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d88:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001d8c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	ee17 0a90 	vmov	r0, s15
 8001d9c:	f7fe fbdc 	bl	8000558 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fc2e 	bl	8000608 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff00 	bl	8000bb8 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	63bb      	str	r3, [r7, #56]	@ 0x38
			linearVY = r_cm*(2.0/3.0)*((cos_alpha1*velAngular.x)+(cos_alpha2*velAngular.y)+(cos_alpha3*velAngular.z));
 8001dbc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbb7 	bl	8000534 <__aeabi_i2d>
 8001dc6:	a34c      	add	r3, pc, #304	@ (adr r3, 8001ef8 <vTaskQueueVelAngularReader+0x2a8>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc1c 	bl	8000608 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ddc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de4:	edd7 6a08 	vldr	s13, [r7, #32]
 8001de8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001df8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	ee17 0a90 	vmov	r0, s15
 8001e08:	f7fe fba6 	bl	8000558 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe fbf8 	bl	8000608 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe feca 	bl	8000bb8 <__aeabi_d2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	637b      	str	r3, [r7, #52]	@ 0x34
			linearW = (r_cm*(velAngular.x+velAngular.y+velAngular.z))/(3*L_cm);
 8001e28:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e40:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e48:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e4c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e62:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			velLinear.x = linearVX;
 8001e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e68:	60fb      	str	r3, [r7, #12]
			velLinear.y = linearVY;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6c:	613b      	str	r3, [r7, #16]
			velLinear.z = linearW;
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e70:	617b      	str	r3, [r7, #20]

			if(xSemaphoreTake(xMutexVelLinearAtual, xMaxMutexDelay) == pdPASS){
 8001e72:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <vTaskQueueVelAngularReader+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fb03 	bl	8005484 <xQueueSemaphoreTake>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10d      	bne.n	8001ea0 <vTaskQueueVelAngularReader+0x250>
				xVelLinearAtual = velLinear;
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <vTaskQueueVelAngularReader+0x2bc>)
 8001e86:	461c      	mov	r4, r3
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexVelLinearAtual);
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <vTaskQueueVelAngularReader+0x2b8>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f003 f870 	bl	8004f80 <xQueueGenericSend>
			}

			if(xSemaphoreTake(xMutexVelAngularAtual, xMaxMutexDelay) == pdPASS){
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <vTaskQueueVelAngularReader+0x2c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 faec 	bl	8005484 <xQueueSemaphoreTake>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10d      	bne.n	8001ece <vTaskQueueVelAngularReader+0x27e>
				xVelAngularAtual = velAngular;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <vTaskQueueVelAngularReader+0x2c4>)
 8001eb4:	461c      	mov	r4, r3
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexVelAngularAtual);
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <vTaskQueueVelAngularReader+0x2c0>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	f003 f859 	bl	8004f80 <xQueueGenericSend>
		while(xQueueReceive(xQueueVelAngular, &velAngular, 0) != errQUEUE_EMPTY) {
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <vTaskQueueVelAngularReader+0x2c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f107 011c 	add.w	r1, r7, #28
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 f9f1 	bl	80052c0 <xQueueReceive>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f af33 	bne.w	8001d4c <vTaskQueueVelAngularReader+0xfc>
			}
		}

		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(100));
 8001ee6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eea:	2164      	movs	r1, #100	@ 0x64
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 ff1d 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001ef2:	e726      	b.n	8001d42 <vTaskQueueVelAngularReader+0xf2>
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	55555555 	.word	0x55555555
 8001efc:	3fe55555 	.word	0x3fe55555
 8001f00:	40060a92 	.word	0x40060a92
 8001f04:	40860a92 	.word	0x40860a92
 8001f08:	20001060 	.word	0x20001060
 8001f0c:	2000100c 	.word	0x2000100c
 8001f10:	20001064 	.word	0x20001064
 8001f14:	2000102c 	.word	0x2000102c
 8001f18:	20001054 	.word	0x20001054

08001f1c <vTaskQueuePosicaoReader>:
	}
}

// Leitura de dados de GPS da queue
void vTaskQueuePosicaoReader(void *p) {
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8001f24:	2301      	movs	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;
	dataset posicao;
	while (1) {
		xLastWakeTime = xTaskGetTickCount();
 8001f28:	f004 f8d2 	bl	80060d0 <xTaskGetTickCount>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	61bb      	str	r3, [r7, #24]
		while(xQueueReceive(xQueuePosicao, &posicao, 0) != errQUEUE_EMPTY){
 8001f30:	e016      	b.n	8001f60 <vTaskQueuePosicaoReader+0x44>
			if(xSemaphoreTake(xMutexPosicaoAtual, xMaxMutexDelay) == pdPASS){
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <vTaskQueuePosicaoReader+0x68>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69f9      	ldr	r1, [r7, #28]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 faa3 	bl	8005484 <xQueueSemaphoreTake>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10d      	bne.n	8001f60 <vTaskQueuePosicaoReader+0x44>
				xPosicaoAtual = posicao;
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <vTaskQueuePosicaoReader+0x6c>)
 8001f46:	461c      	mov	r4, r3
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				xSemaphoreGive(xMutexPosicaoAtual);
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <vTaskQueuePosicaoReader+0x68>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f003 f810 	bl	8004f80 <xQueueGenericSend>
		while(xQueueReceive(xQueuePosicao, &posicao, 0) != errQUEUE_EMPTY){
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <vTaskQueuePosicaoReader+0x70>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f107 0108 	add.w	r1, r7, #8
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 f9a8 	bl	80052c0 <xQueueReceive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1dd      	bne.n	8001f32 <vTaskQueuePosicaoReader+0x16>
			}
		}
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(125));
 8001f76:	f107 0318 	add.w	r3, r7, #24
 8001f7a:	217d      	movs	r1, #125	@ 0x7d
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fed5 	bl	8005d2c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001f82:	e7d1      	b.n	8001f28 <vTaskQueuePosicaoReader+0xc>
 8001f84:	20001068 	.word	0x20001068
 8001f88:	2000101c 	.word	0x2000101c
 8001f8c:	20001058 	.word	0x20001058

08001f90 <inicializar>:
}

/* ======================FUNÇÕES AUXILIARES======================= */

// Inicialização da tela executada antes da inicialização do RTOS
void inicializar(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8001f94:	f7ff f9a8 	bl	80012e8 <ILI9341_Init>
	ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f7ff faaf 	bl	80014fc <ILI9341_SetRotation>
	baseTela(sTelaAtual);
 8001f9e:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <inicializar+0x1c>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f8da 	bl	800215c <baseTela>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000e14 	.word	0x20000e14

08001fb0 <funcBaseTela1>:
		ILI9341_DrawText(textBuffer, FONT1, 31+(i*59), 202, WHITE, BLACK);
	}
}

// Base da Tela 1
void funcBaseTela1(void){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af02      	add	r7, sp, #8
	ILI9341_DrawText("Vel. Linear e Posicao", FONT4, 25, 11, WHITE, NAVY);
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	230b      	movs	r3, #11
 8001fc2:	2219      	movs	r2, #25
 8001fc4:	4919      	ldr	r1, [pc, #100]	@ (800202c <funcBaseTela1+0x7c>)
 8001fc6:	481a      	ldr	r0, [pc, #104]	@ (8002030 <funcBaseTela1+0x80>)
 8001fc8:	f7ff f836 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Vel. X (cm/s):", FONT3, 25, 60, LIGHTBLUE, BLACK);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	f248 63de 	movw	r3, #34526	@ 0x86de
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	233c      	movs	r3, #60	@ 0x3c
 8001fd8:	2219      	movs	r2, #25
 8001fda:	4916      	ldr	r1, [pc, #88]	@ (8002034 <funcBaseTela1+0x84>)
 8001fdc:	4816      	ldr	r0, [pc, #88]	@ (8002038 <funcBaseTela1+0x88>)
 8001fde:	f7ff f82b 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Vel. Y (cm/s)", FONT3, 25, 120, MAGENTA, BLACK);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2378      	movs	r3, #120	@ 0x78
 8001fee:	2219      	movs	r2, #25
 8001ff0:	4910      	ldr	r1, [pc, #64]	@ (8002034 <funcBaseTela1+0x84>)
 8001ff2:	4812      	ldr	r0, [pc, #72]	@ (800203c <funcBaseTela1+0x8c>)
 8001ff4:	f7ff f820 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Pos. X (cm):", FONT3, 165, 60, GREEN, BLACK);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	233c      	movs	r3, #60	@ 0x3c
 8002004:	22a5      	movs	r2, #165	@ 0xa5
 8002006:	490b      	ldr	r1, [pc, #44]	@ (8002034 <funcBaseTela1+0x84>)
 8002008:	480d      	ldr	r0, [pc, #52]	@ (8002040 <funcBaseTela1+0x90>)
 800200a:	f7ff f815 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Pos. Y (cm):", FONT3, 165, 120, DARKORANGE, BLACK);
 800200e:	2300      	movs	r3, #0
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f64d 3384 	movw	r3, #56196	@ 0xdb84
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2378      	movs	r3, #120	@ 0x78
 800201a:	22a5      	movs	r2, #165	@ 0xa5
 800201c:	4905      	ldr	r1, [pc, #20]	@ (8002034 <funcBaseTela1+0x84>)
 800201e:	4809      	ldr	r0, [pc, #36]	@ (8002044 <funcBaseTela1+0x94>)
 8002020:	f7ff f80a 	bl	8001038 <ILI9341_DrawText>
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	0800c384 	.word	0x0800c384
 8002030:	0800b950 	.word	0x0800b950
 8002034:	0800ba20 	.word	0x0800ba20
 8002038:	0800b968 	.word	0x0800b968
 800203c:	0800b978 	.word	0x0800b978
 8002040:	0800b988 	.word	0x0800b988
 8002044:	0800b998 	.word	0x0800b998

08002048 <funcBaseTela2>:

// Base da Tela 2
void funcBaseTela2(void){
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af02      	add	r7, sp, #8
	ILI9341_DrawText("Velocidade Angular", FONT4, 25, 11, WHITE, NAVY);
 800204e:	230f      	movs	r3, #15
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	230b      	movs	r3, #11
 800205a:	2219      	movs	r2, #25
 800205c:	4919      	ldr	r1, [pc, #100]	@ (80020c4 <funcBaseTela2+0x7c>)
 800205e:	481a      	ldr	r0, [pc, #104]	@ (80020c8 <funcBaseTela2+0x80>)
 8002060:	f7fe ffea 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Motor 1:", FONT3, 25, 60, LIGHTBLUE, BLACK);
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	f248 63de 	movw	r3, #34526	@ 0x86de
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	233c      	movs	r3, #60	@ 0x3c
 8002070:	2219      	movs	r2, #25
 8002072:	4916      	ldr	r1, [pc, #88]	@ (80020cc <funcBaseTela2+0x84>)
 8002074:	4816      	ldr	r0, [pc, #88]	@ (80020d0 <funcBaseTela2+0x88>)
 8002076:	f7fe ffdf 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Motor 2:", FONT3, 25, 120, MAGENTA, BLACK);
 800207a:	2300      	movs	r3, #0
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2378      	movs	r3, #120	@ 0x78
 8002086:	2219      	movs	r2, #25
 8002088:	4910      	ldr	r1, [pc, #64]	@ (80020cc <funcBaseTela2+0x84>)
 800208a:	4812      	ldr	r0, [pc, #72]	@ (80020d4 <funcBaseTela2+0x8c>)
 800208c:	f7fe ffd4 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Motor 3:", FONT3, 165, 60, GREEN, BLACK);
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	233c      	movs	r3, #60	@ 0x3c
 800209c:	22a5      	movs	r2, #165	@ 0xa5
 800209e:	490b      	ldr	r1, [pc, #44]	@ (80020cc <funcBaseTela2+0x84>)
 80020a0:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <funcBaseTela2+0x90>)
 80020a2:	f7fe ffc9 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("W:", FONT3, 165, 120, DARKORANGE, BLACK);
 80020a6:	2300      	movs	r3, #0
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	f64d 3384 	movw	r3, #56196	@ 0xdb84
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2378      	movs	r3, #120	@ 0x78
 80020b2:	22a5      	movs	r2, #165	@ 0xa5
 80020b4:	4905      	ldr	r1, [pc, #20]	@ (80020cc <funcBaseTela2+0x84>)
 80020b6:	4809      	ldr	r0, [pc, #36]	@ (80020dc <funcBaseTela2+0x94>)
 80020b8:	f7fe ffbe 	bl	8001038 <ILI9341_DrawText>
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	0800c384 	.word	0x0800c384
 80020c8:	0800b9a8 	.word	0x0800b9a8
 80020cc:	0800ba20 	.word	0x0800ba20
 80020d0:	0800b9bc 	.word	0x0800b9bc
 80020d4:	0800b9c8 	.word	0x0800b9c8
 80020d8:	0800b9d4 	.word	0x0800b9d4
 80020dc:	0800b9e0 	.word	0x0800b9e0

080020e0 <funcBaseTela3>:

// Base da Tela 3
void funcBaseTela3(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af02      	add	r7, sp, #8
	ILI9341_DrawText("Velocidade Angular", FONT4, 25, 11, WHITE, NAVY);
 80020e6:	230f      	movs	r3, #15
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	230b      	movs	r3, #11
 80020f2:	2219      	movs	r2, #25
 80020f4:	4913      	ldr	r1, [pc, #76]	@ (8002144 <funcBaseTela3+0x64>)
 80020f6:	4814      	ldr	r0, [pc, #80]	@ (8002148 <funcBaseTela3+0x68>)
 80020f8:	f7fe ff9e 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Motor 1:", FONT3, 25, 60, LIGHTBLUE, BLACK);
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	f248 63de 	movw	r3, #34526	@ 0x86de
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	233c      	movs	r3, #60	@ 0x3c
 8002108:	2219      	movs	r2, #25
 800210a:	4910      	ldr	r1, [pc, #64]	@ (800214c <funcBaseTela3+0x6c>)
 800210c:	4810      	ldr	r0, [pc, #64]	@ (8002150 <funcBaseTela3+0x70>)
 800210e:	f7fe ff93 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Motor 2:", FONT3, 25, 120, MAGENTA, BLACK);
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2378      	movs	r3, #120	@ 0x78
 800211e:	2219      	movs	r2, #25
 8002120:	490a      	ldr	r1, [pc, #40]	@ (800214c <funcBaseTela3+0x6c>)
 8002122:	480c      	ldr	r0, [pc, #48]	@ (8002154 <funcBaseTela3+0x74>)
 8002124:	f7fe ff88 	bl	8001038 <ILI9341_DrawText>
	ILI9341_DrawText("Motor 3:", FONT3, 165, 60, GREEN, BLACK);
 8002128:	2300      	movs	r3, #0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	233c      	movs	r3, #60	@ 0x3c
 8002134:	22a5      	movs	r2, #165	@ 0xa5
 8002136:	4905      	ldr	r1, [pc, #20]	@ (800214c <funcBaseTela3+0x6c>)
 8002138:	4807      	ldr	r0, [pc, #28]	@ (8002158 <funcBaseTela3+0x78>)
 800213a:	f7fe ff7d 	bl	8001038 <ILI9341_DrawText>
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	0800c384 	.word	0x0800c384
 8002148:	0800b9a8 	.word	0x0800b9a8
 800214c:	0800ba20 	.word	0x0800ba20
 8002150:	0800b9bc 	.word	0x0800b9bc
 8002154:	0800b9c8 	.word	0x0800b9c8
 8002158:	0800b9d4 	.word	0x0800b9d4

0800215c <baseTela>:

// Seleção de base de tela
void baseTela(uint16_t sNumTela){
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af02      	add	r7, sp, #8
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
	ILI9341_DrawRectangle(0, 36, 320, 204, BLACK);
 8002166:	2300      	movs	r3, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	23cc      	movs	r3, #204	@ 0xcc
 800216c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002170:	2124      	movs	r1, #36	@ 0x24
 8002172:	2000      	movs	r0, #0
 8002174:	f7ff fb12 	bl	800179c <ILI9341_DrawRectangle>
	ILI9341_DrawRectangle(0, 0, 320, 36, NAVY);
 8002178:	230f      	movs	r3, #15
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2324      	movs	r3, #36	@ 0x24
 800217e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002182:	2100      	movs	r1, #0
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff fb09 	bl	800179c <ILI9341_DrawRectangle>
	switch(sNumTela){
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d00c      	beq.n	80021aa <baseTela+0x4e>
 8002190:	2b03      	cmp	r3, #3
 8002192:	dc0d      	bgt.n	80021b0 <baseTela+0x54>
 8002194:	2b01      	cmp	r3, #1
 8002196:	d002      	beq.n	800219e <baseTela+0x42>
 8002198:	2b02      	cmp	r3, #2
 800219a:	d003      	beq.n	80021a4 <baseTela+0x48>
			break;
		case TELA3:
			funcBaseTela3();
			break;
		default:
			break;
 800219c:	e008      	b.n	80021b0 <baseTela+0x54>
			funcBaseTela1();
 800219e:	f7ff ff07 	bl	8001fb0 <funcBaseTela1>
			break;
 80021a2:	e006      	b.n	80021b2 <baseTela+0x56>
			funcBaseTela2();
 80021a4:	f7ff ff50 	bl	8002048 <funcBaseTela2>
			break;
 80021a8:	e003      	b.n	80021b2 <baseTela+0x56>
			funcBaseTela3();
 80021aa:	f7ff ff99 	bl	80020e0 <funcBaseTela3>
			break;
 80021ae:	e000      	b.n	80021b2 <baseTela+0x56>
			break;
 80021b0:	bf00      	nop
	}
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <funcDadosTela1>:

// Exibição de valores da tela 1
void funcDadosTela1(void){
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b091      	sub	sp, #68	@ 0x44
 80021c0:	af02      	add	r7, sp, #8
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 80021c2:	2301      	movs	r3, #1
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
	dataset velLinear;
	dataset posicao;
	char textBuffer[20];

	if(xSemaphoreTake(xMutexVelLinearAtual, xMaxMutexDelay) == pdPASS){
 80021c6:	4b42      	ldr	r3, [pc, #264]	@ (80022d0 <funcDadosTela1+0x114>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 f959 	bl	8005484 <xQueueSemaphoreTake>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10c      	bne.n	80021f2 <funcDadosTela1+0x36>
		velLinear = xVelLinearAtual;
 80021d8:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <funcDadosTela1+0x118>)
 80021da:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexVelLinearAtual);
 80021e4:	4b3a      	ldr	r3, [pc, #232]	@ (80022d0 <funcDadosTela1+0x114>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	2300      	movs	r3, #0
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	f002 fec7 	bl	8004f80 <xQueueGenericSend>
	}
	if(xSemaphoreTake(xMutexPosicaoAtual, xMaxMutexDelay) == pdPASS){
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <funcDadosTela1+0x11c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 f943 	bl	8005484 <xQueueSemaphoreTake>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b01      	cmp	r3, #1
 8002202:	d10c      	bne.n	800221e <funcDadosTela1+0x62>
		posicao = xPosicaoAtual;
 8002204:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <funcDadosTela1+0x120>)
 8002206:	f107 0414 	add.w	r4, r7, #20
 800220a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexPosicaoAtual);
 8002210:	4b31      	ldr	r3, [pc, #196]	@ (80022d8 <funcDadosTela1+0x11c>)
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	2300      	movs	r3, #0
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	f002 feb1 	bl	8004f80 <xQueueGenericSend>
	}

	sprintf(textBuffer, "%.1f    ", velLinear.x);
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f999 	bl	8000558 <__aeabi_f2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4638      	mov	r0, r7
 800222c:	492c      	ldr	r1, [pc, #176]	@ (80022e0 <funcDadosTela1+0x124>)
 800222e:	f006 f92d 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 80, LIGHTBLUE, BLACK);
 8002232:	4638      	mov	r0, r7
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	f248 63de 	movw	r3, #34526	@ 0x86de
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2350      	movs	r3, #80	@ 0x50
 8002240:	2219      	movs	r2, #25
 8002242:	4928      	ldr	r1, [pc, #160]	@ (80022e4 <funcDadosTela1+0x128>)
 8002244:	f7fe fef8 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", velLinear.y);
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f984 	bl	8000558 <__aeabi_f2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4638      	mov	r0, r7
 8002256:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <funcDadosTela1+0x124>)
 8002258:	f006 f918 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 140, MAGENTA, BLACK);
 800225c:	4638      	mov	r0, r7
 800225e:	2300      	movs	r3, #0
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	238c      	movs	r3, #140	@ 0x8c
 800226a:	2219      	movs	r2, #25
 800226c:	491d      	ldr	r1, [pc, #116]	@ (80022e4 <funcDadosTela1+0x128>)
 800226e:	f7fe fee3 	bl	8001038 <ILI9341_DrawText>

	sprintf(textBuffer, "%.2f    ", posicao.x);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f96f 	bl	8000558 <__aeabi_f2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4638      	mov	r0, r7
 8002280:	4919      	ldr	r1, [pc, #100]	@ (80022e8 <funcDadosTela1+0x12c>)
 8002282:	f006 f903 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 80, GREEN, BLACK);
 8002286:	4638      	mov	r0, r7
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2350      	movs	r3, #80	@ 0x50
 8002294:	22a5      	movs	r2, #165	@ 0xa5
 8002296:	4913      	ldr	r1, [pc, #76]	@ (80022e4 <funcDadosTela1+0x128>)
 8002298:	f7fe fece 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.2f    ", posicao.y);
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4638      	mov	r0, r7
 80022aa:	490f      	ldr	r1, [pc, #60]	@ (80022e8 <funcDadosTela1+0x12c>)
 80022ac:	f006 f8ee 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 140, DARKORANGE, BLACK);
 80022b0:	4638      	mov	r0, r7
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f64d 3384 	movw	r3, #56196	@ 0xdb84
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	238c      	movs	r3, #140	@ 0x8c
 80022be:	22a5      	movs	r2, #165	@ 0xa5
 80022c0:	4908      	ldr	r1, [pc, #32]	@ (80022e4 <funcDadosTela1+0x128>)
 80022c2:	f7fe feb9 	bl	8001038 <ILI9341_DrawText>
}
 80022c6:	bf00      	nop
 80022c8:	373c      	adds	r7, #60	@ 0x3c
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20001060 	.word	0x20001060
 80022d4:	2000100c 	.word	0x2000100c
 80022d8:	20001068 	.word	0x20001068
 80022dc:	2000101c 	.word	0x2000101c
 80022e0:	0800b9e4 	.word	0x0800b9e4
 80022e4:	0800c384 	.word	0x0800c384
 80022e8:	0800b9f0 	.word	0x0800b9f0

080022ec <funcDadosTela2>:

// Exibição do gráfico da tela 2

void funcDadosTela2(void){
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b091      	sub	sp, #68	@ 0x44
 80022f0:	af02      	add	r7, sp, #8
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 80022f2:	2301      	movs	r3, #1
 80022f4:	637b      	str	r3, [r7, #52]	@ 0x34
	dataset velAngular;
	dataset velLinear;
	char textBuffer[20];

	if(xSemaphoreTake(xMutexVelLinearAtual, xMaxMutexDelay) == pdPASS){
 80022f6:	4b42      	ldr	r3, [pc, #264]	@ (8002400 <funcDadosTela2+0x114>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 f8c1 	bl	8005484 <xQueueSemaphoreTake>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <funcDadosTela2+0x36>
		velLinear = xVelLinearAtual;
 8002308:	4b3e      	ldr	r3, [pc, #248]	@ (8002404 <funcDadosTela2+0x118>)
 800230a:	f107 0414 	add.w	r4, r7, #20
 800230e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexVelLinearAtual);
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <funcDadosTela2+0x114>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	f002 fe2f 	bl	8004f80 <xQueueGenericSend>
	}
	if(xSemaphoreTake(xMutexVelAngularAtual, xMaxMutexDelay) == pdPASS){
 8002322:	4b39      	ldr	r3, [pc, #228]	@ (8002408 <funcDadosTela2+0x11c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f8ab 	bl	8005484 <xQueueSemaphoreTake>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10c      	bne.n	800234e <funcDadosTela2+0x62>
		velAngular = xVelAngularAtual;
 8002334:	4b35      	ldr	r3, [pc, #212]	@ (800240c <funcDadosTela2+0x120>)
 8002336:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800233a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800233c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexVelAngularAtual);
 8002340:	4b31      	ldr	r3, [pc, #196]	@ (8002408 <funcDadosTela2+0x11c>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	f002 fe19 	bl	8004f80 <xQueueGenericSend>
	}

	sprintf(textBuffer, "%.1f    ", velAngular.x);
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f901 	bl	8000558 <__aeabi_f2d>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4638      	mov	r0, r7
 800235c:	492c      	ldr	r1, [pc, #176]	@ (8002410 <funcDadosTela2+0x124>)
 800235e:	f006 f895 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 80, LIGHTBLUE, BLACK);
 8002362:	4638      	mov	r0, r7
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	f248 63de 	movw	r3, #34526	@ 0x86de
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2350      	movs	r3, #80	@ 0x50
 8002370:	2219      	movs	r2, #25
 8002372:	4928      	ldr	r1, [pc, #160]	@ (8002414 <funcDadosTela2+0x128>)
 8002374:	f7fe fe60 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", velAngular.y);
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8ec 	bl	8000558 <__aeabi_f2d>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4638      	mov	r0, r7
 8002386:	4922      	ldr	r1, [pc, #136]	@ (8002410 <funcDadosTela2+0x124>)
 8002388:	f006 f880 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 140, MAGENTA, BLACK);
 800238c:	4638      	mov	r0, r7
 800238e:	2300      	movs	r3, #0
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	238c      	movs	r3, #140	@ 0x8c
 800239a:	2219      	movs	r2, #25
 800239c:	491d      	ldr	r1, [pc, #116]	@ (8002414 <funcDadosTela2+0x128>)
 800239e:	f7fe fe4b 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", velAngular.z);
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8d7 	bl	8000558 <__aeabi_f2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4638      	mov	r0, r7
 80023b0:	4917      	ldr	r1, [pc, #92]	@ (8002410 <funcDadosTela2+0x124>)
 80023b2:	f006 f86b 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 80, YELLOW, BLACK);
 80023b6:	4638      	mov	r0, r7
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2350      	movs	r3, #80	@ 0x50
 80023c4:	22a5      	movs	r2, #165	@ 0xa5
 80023c6:	4913      	ldr	r1, [pc, #76]	@ (8002414 <funcDadosTela2+0x128>)
 80023c8:	f7fe fe36 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.2f    ", velLinear.z);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8c2 	bl	8000558 <__aeabi_f2d>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4638      	mov	r0, r7
 80023da:	490f      	ldr	r1, [pc, #60]	@ (8002418 <funcDadosTela2+0x12c>)
 80023dc:	f006 f856 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 140, GREEN, BLACK);
 80023e0:	4638      	mov	r0, r7
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	238c      	movs	r3, #140	@ 0x8c
 80023ee:	22a5      	movs	r2, #165	@ 0xa5
 80023f0:	4908      	ldr	r1, [pc, #32]	@ (8002414 <funcDadosTela2+0x128>)
 80023f2:	f7fe fe21 	bl	8001038 <ILI9341_DrawText>

}
 80023f6:	bf00      	nop
 80023f8:	373c      	adds	r7, #60	@ 0x3c
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}
 80023fe:	bf00      	nop
 8002400:	20001060 	.word	0x20001060
 8002404:	2000100c 	.word	0x2000100c
 8002408:	20001064 	.word	0x20001064
 800240c:	2000102c 	.word	0x2000102c
 8002410:	0800b9e4 	.word	0x0800b9e4
 8002414:	0800c384 	.word	0x0800c384
 8002418:	0800b9f0 	.word	0x0800b9f0

0800241c <funcDadosTela3>:

// Exibição do gráfico da tela 3
void funcDadosTela3(void){
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b08d      	sub	sp, #52	@ 0x34
 8002420:	af02      	add	r7, sp, #8
	const TickType_t xMaxMutexDelay = pdMS_TO_TICKS(1);
 8002422:	2301      	movs	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
	dataset corrente;
	char textBuffer[20];

	if(xSemaphoreTake(xMutexCorrenteAtual, xMaxMutexDelay) == pdPASS){
 8002426:	4b2c      	ldr	r3, [pc, #176]	@ (80024d8 <funcDadosTela3+0xbc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800242c:	4618      	mov	r0, r3
 800242e:	f003 f829 	bl	8005484 <xQueueSemaphoreTake>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <funcDadosTela3+0x36>
		corrente = xCorrenteAtual;
 8002438:	4b28      	ldr	r3, [pc, #160]	@ (80024dc <funcDadosTela3+0xc0>)
 800243a:	f107 0414 	add.w	r4, r7, #20
 800243e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xMutexCorrenteAtual);
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <funcDadosTela3+0xbc>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	f002 fd97 	bl	8004f80 <xQueueGenericSend>
	}

	sprintf(textBuffer, "%.1f    ", corrente.x);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f87f 	bl	8000558 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4638      	mov	r0, r7
 8002460:	491f      	ldr	r1, [pc, #124]	@ (80024e0 <funcDadosTela3+0xc4>)
 8002462:	f006 f813 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 80, LIGHTBLUE, BLACK);
 8002466:	4638      	mov	r0, r7
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	f248 63de 	movw	r3, #34526	@ 0x86de
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2350      	movs	r3, #80	@ 0x50
 8002474:	2219      	movs	r2, #25
 8002476:	491b      	ldr	r1, [pc, #108]	@ (80024e4 <funcDadosTela3+0xc8>)
 8002478:	f7fe fdde 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", corrente.y);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f86a 	bl	8000558 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4638      	mov	r0, r7
 800248a:	4915      	ldr	r1, [pc, #84]	@ (80024e0 <funcDadosTela3+0xc4>)
 800248c:	f005 fffe 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 25, 140, MAGENTA, BLACK);
 8002490:	4638      	mov	r0, r7
 8002492:	2300      	movs	r3, #0
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	238c      	movs	r3, #140	@ 0x8c
 800249e:	2219      	movs	r2, #25
 80024a0:	4910      	ldr	r1, [pc, #64]	@ (80024e4 <funcDadosTela3+0xc8>)
 80024a2:	f7fe fdc9 	bl	8001038 <ILI9341_DrawText>
	sprintf(textBuffer, "%.1f    ", corrente.z);
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f855 	bl	8000558 <__aeabi_f2d>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4638      	mov	r0, r7
 80024b4:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <funcDadosTela3+0xc4>)
 80024b6:	f005 ffe9 	bl	800848c <siprintf>
	ILI9341_DrawText(textBuffer, FONT4, 165, 80, YELLOW, BLACK);
 80024ba:	4638      	mov	r0, r7
 80024bc:	2300      	movs	r3, #0
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2350      	movs	r3, #80	@ 0x50
 80024c8:	22a5      	movs	r2, #165	@ 0xa5
 80024ca:	4906      	ldr	r1, [pc, #24]	@ (80024e4 <funcDadosTela3+0xc8>)
 80024cc:	f7fe fdb4 	bl	8001038 <ILI9341_DrawText>
}
 80024d0:	bf00      	nop
 80024d2:	372c      	adds	r7, #44	@ 0x2c
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	2000105c 	.word	0x2000105c
 80024dc:	2000103c 	.word	0x2000103c
 80024e0:	0800b9e4 	.word	0x0800b9e4
 80024e4:	0800c384 	.word	0x0800c384

080024e8 <dadosTela>:

// Exibição de dados na tela
void dadosTela(uint16_t sNumTela){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
	switch(sNumTela){
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d00c      	beq.n	8002512 <dadosTela+0x2a>
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	dc0d      	bgt.n	8002518 <dadosTela+0x30>
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d002      	beq.n	8002506 <dadosTela+0x1e>
 8002500:	2b02      	cmp	r3, #2
 8002502:	d003      	beq.n	800250c <dadosTela+0x24>
			break;
		case TELA3:
			funcDadosTela3();
			break;
		default:
			break;
 8002504:	e008      	b.n	8002518 <dadosTela+0x30>
			funcDadosTela1();
 8002506:	f7ff fe59 	bl	80021bc <funcDadosTela1>
			break;
 800250a:	e006      	b.n	800251a <dadosTela+0x32>
			funcDadosTela2();
 800250c:	f7ff feee 	bl	80022ec <funcDadosTela2>
			break;
 8002510:	e003      	b.n	800251a <dadosTela+0x32>
			funcDadosTela3();
 8002512:	f7ff ff83 	bl	800241c <funcDadosTela3>
			break;
 8002516:	e000      	b.n	800251a <dadosTela+0x32>
			break;
 8002518:	bf00      	nop
	}
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002528:	f000 fb48 	bl	8002bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800252c:	f000 f81c 	bl	8002568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002530:	f000 f8ae 	bl	8002690 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002534:	f000 f876 	bl	8002624 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  inicializar();
 8002538:	f7ff fd2a 	bl	8001f90 <inicializar>
  userRTOS();
 800253c:	f7ff f98a 	bl	8001854 <userRTOS>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002540:	f002 f9c6 	bl	80048d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002544:	4a05      	ldr	r2, [pc, #20]	@ (800255c <main+0x38>)
 8002546:	2100      	movs	r1, #0
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <main+0x3c>)
 800254a:	f002 fa0b 	bl	8004964 <osThreadNew>
 800254e:	4603      	mov	r3, r0
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <main+0x40>)
 8002552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002554:	f002 f9e0 	bl	8004918 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <main+0x34>
 800255c:	0800d4c8 	.word	0x0800d4c8
 8002560:	08002761 	.word	0x08002761
 8002564:	200010c4 	.word	0x200010c4

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	@ 0x50
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2230      	movs	r2, #48	@ 0x30
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f005 ffeb 	bl	8008552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <SystemClock_Config+0xb4>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	4a21      	ldr	r2, [pc, #132]	@ (800261c <SystemClock_Config+0xb4>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	@ 0x40
 800259c:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <SystemClock_Config+0xb4>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <SystemClock_Config+0xb8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <SystemClock_Config+0xb8>)
 80025b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <SystemClock_Config+0xb8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025c4:	2302      	movs	r3, #2
 80025c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025cc:	2310      	movs	r3, #16
 80025ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d4:	f107 0320 	add.w	r3, r7, #32
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fe5b 	bl	8003294 <HAL_RCC_OscConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80025e4:	f000 f8d6 	bl	8002794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e8:	230f      	movs	r3, #15
 80025ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f001 f8be 	bl	8003784 <HAL_RCC_ClockConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800260e:	f000 f8c1 	bl	8002794 <Error_Handler>
  }
}
 8002612:	bf00      	nop
 8002614:	3750      	adds	r7, #80	@ 0x50
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40007000 	.word	0x40007000

08002624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002628:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <MX_SPI1_Init+0x64>)
 800262a:	4a18      	ldr	r2, [pc, #96]	@ (800268c <MX_SPI1_Init+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002630:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <MX_SPI1_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <MX_SPI1_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <MX_SPI1_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002662:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <MX_SPI1_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002670:	220a      	movs	r2, #10
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002674:	4804      	ldr	r0, [pc, #16]	@ (8002688 <MX_SPI1_Init+0x64>)
 8002676:	f001 fa83 	bl	8003b80 <HAL_SPI_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002680:	f000 f888 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	2000106c 	.word	0x2000106c
 800268c:	40013000 	.word	0x40013000

08002690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a29      	ldr	r2, [pc, #164]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b27      	ldr	r3, [pc, #156]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a22      	ldr	r2, [pc, #136]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <MX_GPIO_Init+0xc4>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80026fa:	2201      	movs	r2, #1
 80026fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002700:	4815      	ldr	r0, [pc, #84]	@ (8002758 <MX_GPIO_Init+0xc8>)
 8002702:	f000 fdad 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 8002706:	2201      	movs	r2, #1
 8002708:	211c      	movs	r1, #28
 800270a:	4814      	ldr	r0, [pc, #80]	@ (800275c <MX_GPIO_Init+0xcc>)
 800270c:	f000 fda8 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4619      	mov	r1, r3
 8002728:	480b      	ldr	r0, [pc, #44]	@ (8002758 <MX_GPIO_Init+0xc8>)
 800272a:	f000 fc15 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin|TFT_RST_Pin;
 800272e:	231c      	movs	r3, #28
 8002730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 030c 	add.w	r3, r7, #12
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_GPIO_Init+0xcc>)
 8002746:	f000 fc07 	bl	8002f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40020800 	.word	0x40020800
 800275c:	40020000 	.word	0x40020000

08002760 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002768:	2001      	movs	r0, #1
 800276a:	f002 f98d 	bl	8004a88 <osDelay>
 800276e:	e7fb      	b.n	8002768 <StartDefaultTask+0x8>

08002770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002782:	f000 fa3d 	bl	8002c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <Error_Handler+0x8>

080027a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_MspInit+0x54>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_MspInit+0x54>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <HAL_MspInit+0x54>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_MspInit+0x54>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <HAL_MspInit+0x54>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_MspInit+0x54>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	210f      	movs	r1, #15
 80027e2:	f06f 0001 	mvn.w	r0, #1
 80027e6:	f000 fb07 	bl	8002df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <HAL_SPI_MspInit+0x84>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12b      	bne.n	8002872 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_SPI_MspInit+0x88>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <HAL_SPI_MspInit+0x88>)
 8002824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002828:	6453      	str	r3, [r2, #68]	@ 0x44
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_SPI_MspInit+0x88>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_SPI_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_SPI_MspInit+0x88>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <HAL_SPI_MspInit+0x88>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002852:	23e0      	movs	r3, #224	@ 0xe0
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002862:	2305      	movs	r3, #5
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <HAL_SPI_MspInit+0x8c>)
 800286e:	f000 fb73 	bl	8002f58 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002872:	bf00      	nop
 8002874:	3728      	adds	r7, #40	@ 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40013000 	.word	0x40013000
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	@ 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b2e      	ldr	r3, [pc, #184]	@ (8002958 <HAL_InitTick+0xd0>)
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002958 <HAL_InitTick+0xd0>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_InitTick+0xd0>)
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 f92c 	bl	8003b1c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028c4:	f001 f916 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 80028c8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028cc:	4a23      	ldr	r2, [pc, #140]	@ (800295c <HAL_InitTick+0xd4>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	3b01      	subs	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028d8:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <HAL_InitTick+0xd8>)
 80028da:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_InitTick+0xdc>)
 80028dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028de:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <HAL_InitTick+0xd8>)
 80028e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002960 <HAL_InitTick+0xd8>)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <HAL_InitTick+0xd8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_InitTick+0xd8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_InitTick+0xd8>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028fe:	4818      	ldr	r0, [pc, #96]	@ (8002960 <HAL_InitTick+0xd8>)
 8002900:	f001 fd2e 	bl	8004360 <HAL_TIM_Base_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800290a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11b      	bne.n	800294a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002912:	4813      	ldr	r0, [pc, #76]	@ (8002960 <HAL_InitTick+0xd8>)
 8002914:	f001 fd7e 	bl	8004414 <HAL_TIM_Base_Start_IT>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800291e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002922:	2b00      	cmp	r3, #0
 8002924:	d111      	bne.n	800294a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002926:	2019      	movs	r0, #25
 8002928:	f000 fa82 	bl	8002e30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	d808      	bhi.n	8002944 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002932:	2200      	movs	r2, #0
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	2019      	movs	r0, #25
 8002938:	f000 fa5e 	bl	8002df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800293c:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_InitTick+0xe0>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e002      	b.n	800294a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800294a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800294e:	4618      	mov	r0, r3
 8002950:	3730      	adds	r7, #48	@ 0x30
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	431bde83 	.word	0x431bde83
 8002960:	200010c8 	.word	0x200010c8
 8002964:	40010000 	.word	0x40010000
 8002968:	20000e1c 	.word	0x20000e1c

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029aa:	f001 fd95 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200010c8 	.word	0x200010c8

080029b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return 1;
 80029bc:	2301      	movs	r3, #1
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_kill>:

int _kill(int pid, int sig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029d2:	f005 fe67 	bl	80086a4 <__errno>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2216      	movs	r2, #22
 80029da:	601a      	str	r2, [r3, #0]
  return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_exit>:

void _exit (int status)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffe7 	bl	80029c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029fa:	bf00      	nop
 80029fc:	e7fd      	b.n	80029fa <_exit+0x12>

080029fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e00a      	b.n	8002a26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a10:	f3af 8000 	nop.w
 8002a14:	4601      	mov	r1, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	60ba      	str	r2, [r7, #8]
 8002a1c:	b2ca      	uxtb	r2, r1
 8002a1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3301      	adds	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dbf0      	blt.n	8002a10 <_read+0x12>
  }

  return len;
 8002a2e:	687b      	ldr	r3, [r7, #4]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e009      	b.n	8002a5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	60ba      	str	r2, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dbf1      	blt.n	8002a4a <_write+0x12>
  }
  return len;
 8002a66:	687b      	ldr	r3, [r7, #4]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_close>:

int _close(int file)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a98:	605a      	str	r2, [r3, #4]
  return 0;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_isatty>:

int _isatty(int file)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ab0:	2301      	movs	r3, #1
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f005 fdcc 	bl	80086a4 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20020000 	.word	0x20020000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	20001110 	.word	0x20001110
 8002b40:	20005c50 	.word	0x20005c50

08002b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ba0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b6c:	f7ff ffea 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b70:	480c      	ldr	r0, [pc, #48]	@ (8002ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b72:	490d      	ldr	r1, [pc, #52]	@ (8002ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b74:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b88:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b96:	f005 fd8b 	bl	80086b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9a:	f7ff fcc3 	bl	8002524 <main>
  bx  lr    
 8002b9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba8:	20000ff0 	.word	0x20000ff0
  ldr r2, =_sidata
 8002bac:	0800da60 	.word	0x0800da60
  ldr r2, =_sbss
 8002bb0:	20000ff0 	.word	0x20000ff0
  ldr r4, =_ebss
 8002bb4:	20005c4c 	.word	0x20005c4c

08002bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC_IRQHandler>
	...

08002bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_Init+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <HAL_Init+0x40>)
 8002bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_Init+0x40>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_Init+0x40>)
 8002bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <HAL_Init+0x40>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f000 f8fc 	bl	8002de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bea:	200f      	movs	r0, #15
 8002bec:	f7ff fe4c 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf0:	f7ff fdd6 	bl	80027a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_IncTick+0x20>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_IncTick+0x24>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <HAL_IncTick+0x24>)
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000e20 	.word	0x20000e20
 8002c24:	20001114 	.word	0x20001114

08002c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_GetTick+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20001114 	.word	0x20001114

08002c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff ffee 	bl	8002c28 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c58:	d005      	beq.n	8002c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_Delay+0x44>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c66:	bf00      	nop
 8002c68:	f7ff ffde 	bl	8002c28 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d8f7      	bhi.n	8002c68 <HAL_Delay+0x28>
  {
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000e20 	.word	0x20000e20

08002c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 0307 	and.w	r3, r3, #7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db0b      	blt.n	8002d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4907      	ldr	r1, [pc, #28]	@ (8002d24 <__NVIC_EnableIRQ+0x38>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100

08002d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db0a      	blt.n	8002d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	490c      	ldr	r1, [pc, #48]	@ (8002d74 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d50:	e00a      	b.n	8002d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	4908      	ldr	r1, [pc, #32]	@ (8002d78 <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	440b      	add	r3, r1
 8002d66:	761a      	strb	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000e100 	.word	0xe000e100
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	@ 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f1c3 0307 	rsb	r3, r3, #7
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	bf28      	it	cs
 8002d9a:	2304      	movcs	r3, #4
 8002d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3304      	adds	r3, #4
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d902      	bls.n	8002dac <NVIC_EncodePriority+0x30>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3b03      	subs	r3, #3
 8002daa:	e000      	b.n	8002dae <NVIC_EncodePriority+0x32>
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43d9      	mvns	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	4313      	orrs	r3, r2
         );
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	@ 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff4c 	bl	8002c88 <__NVIC_SetPriorityGrouping>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0a:	f7ff ff61 	bl	8002cd0 <__NVIC_GetPriorityGrouping>
 8002e0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6978      	ldr	r0, [r7, #20]
 8002e16:	f7ff ffb1 	bl	8002d7c <NVIC_EncodePriority>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff80 	bl	8002d28 <__NVIC_SetPriority>
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff54 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_DMA_Start_IT+0x26>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e040      	b.n	8002ef4 <HAL_DMA_Start_IT+0xa8>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d12f      	bne.n	8002ee6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f82e 	bl	8002efc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	223f      	movs	r2, #63	@ 0x3f
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0216 	orr.w	r2, r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0208 	orr.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e005      	b.n	8002ef2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b40      	cmp	r3, #64	@ 0x40
 8002f28:	d108      	bne.n	8002f3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f3a:	e007      	b.n	8002f4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e159      	b.n	8003228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f040 8148 	bne.w	8003222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d005      	beq.n	8002faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d130      	bne.n	800300c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0201 	and.w	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b03      	cmp	r3, #3
 8003016:	d017      	beq.n	8003048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d123      	bne.n	800309c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a2 	beq.w	8003222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b57      	ldr	r3, [pc, #348]	@ (8003240 <HAL_GPIO_Init+0x2e8>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <HAL_GPIO_Init+0x2e8>)
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ee:	4b54      	ldr	r3, [pc, #336]	@ (8003240 <HAL_GPIO_Init+0x2e8>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fa:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_GPIO_Init+0x2ec>)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a49      	ldr	r2, [pc, #292]	@ (8003248 <HAL_GPIO_Init+0x2f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x202>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a48      	ldr	r2, [pc, #288]	@ (800324c <HAL_GPIO_Init+0x2f4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x1fe>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a47      	ldr	r2, [pc, #284]	@ (8003250 <HAL_GPIO_Init+0x2f8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x1fa>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a46      	ldr	r2, [pc, #280]	@ (8003254 <HAL_GPIO_Init+0x2fc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x1f6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a45      	ldr	r2, [pc, #276]	@ (8003258 <HAL_GPIO_Init+0x300>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x1f2>
 8003146:	2304      	movs	r3, #4
 8003148:	e008      	b.n	800315c <HAL_GPIO_Init+0x204>
 800314a:	2307      	movs	r3, #7
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x204>
 800314e:	2303      	movs	r3, #3
 8003150:	e004      	b.n	800315c <HAL_GPIO_Init+0x204>
 8003152:	2302      	movs	r3, #2
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x204>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x204>
 800315a:	2300      	movs	r3, #0
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f002 0203 	and.w	r2, r2, #3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4093      	lsls	r3, r2
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316c:	4935      	ldr	r1, [pc, #212]	@ (8003244 <HAL_GPIO_Init+0x2ec>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317a:	4b38      	ldr	r3, [pc, #224]	@ (800325c <HAL_GPIO_Init+0x304>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319e:	4a2f      	ldr	r2, [pc, #188]	@ (800325c <HAL_GPIO_Init+0x304>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a4:	4b2d      	ldr	r3, [pc, #180]	@ (800325c <HAL_GPIO_Init+0x304>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c8:	4a24      	ldr	r2, [pc, #144]	@ (800325c <HAL_GPIO_Init+0x304>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <HAL_GPIO_Init+0x304>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f2:	4a1a      	ldr	r2, [pc, #104]	@ (800325c <HAL_GPIO_Init+0x304>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <HAL_GPIO_Init+0x304>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800321c:	4a0f      	ldr	r2, [pc, #60]	@ (800325c <HAL_GPIO_Init+0x304>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	f67f aea2 	bls.w	8002f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3724      	adds	r7, #36	@ 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40013800 	.word	0x40013800
 8003248:	40020000 	.word	0x40020000
 800324c:	40020400 	.word	0x40020400
 8003250:	40020800 	.word	0x40020800
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40021000 	.word	0x40021000
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003270:	787b      	ldrb	r3, [r7, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800327c:	e003      	b.n	8003286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	619a      	str	r2, [r3, #24]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e267      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d075      	beq.n	800339e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b2:	4b88      	ldr	r3, [pc, #544]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d00c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b85      	ldr	r3, [pc, #532]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b82      	ldr	r3, [pc, #520]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b7e      	ldr	r3, [pc, #504]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05b      	beq.n	800339c <HAL_RCC_OscConfig+0x108>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d157      	bne.n	800339c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e242      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x74>
 80032fa:	4b76      	ldr	r3, [pc, #472]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a75      	ldr	r2, [pc, #468]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x98>
 8003312:	4b70      	ldr	r3, [pc, #448]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6f      	ldr	r2, [pc, #444]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b6d      	ldr	r3, [pc, #436]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6c      	ldr	r2, [pc, #432]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 800332c:	4b69      	ldr	r3, [pc, #420]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a68      	ldr	r2, [pc, #416]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b66      	ldr	r3, [pc, #408]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a65      	ldr	r2, [pc, #404]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff fc6c 	bl	8002c28 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7ff fc68 	bl	8002c28 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e207      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b5b      	ldr	r3, [pc, #364]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xc0>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7ff fc58 	bl	8002c28 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7ff fc54 	bl	8002c28 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1f3      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b51      	ldr	r3, [pc, #324]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0xe8>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033aa:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b47      	ldr	r3, [pc, #284]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b44      	ldr	r3, [pc, #272]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b41      	ldr	r3, [pc, #260]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x152>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c7      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4937      	ldr	r1, [pc, #220]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b34      	ldr	r3, [pc, #208]	@ (80034d8 <HAL_RCC_OscConfig+0x244>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7ff fc0d 	bl	8002c28 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7ff fc09 	bl	8002c28 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a8      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b28      	ldr	r3, [pc, #160]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4925      	ldr	r1, [pc, #148]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_RCC_OscConfig+0x244>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7ff fbec 	bl	8002c28 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003454:	f7ff fbe8 	bl	8002c28 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e187      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d036      	beq.n	80034ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b15      	ldr	r3, [pc, #84]	@ (80034dc <HAL_RCC_OscConfig+0x248>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7ff fbcc 	bl	8002c28 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003494:	f7ff fbc8 	bl	8002c28 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e167      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <HAL_RCC_OscConfig+0x240>)
 80034a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x200>
 80034b2:	e01b      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b4:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_OscConfig+0x248>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7ff fbb5 	bl	8002c28 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	e00e      	b.n	80034e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c2:	f7ff fbb1 	bl	8002c28 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d907      	bls.n	80034e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e150      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	42470000 	.word	0x42470000
 80034dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b88      	ldr	r3, [pc, #544]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ea      	bne.n	80034c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8097 	beq.w	8003628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b81      	ldr	r3, [pc, #516]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	4b7d      	ldr	r3, [pc, #500]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	4a7c      	ldr	r2, [pc, #496]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	@ 0x40
 800351a:	4b7a      	ldr	r3, [pc, #488]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b77      	ldr	r3, [pc, #476]	@ (8003708 <HAL_RCC_OscConfig+0x474>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d118      	bne.n	8003568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b74      	ldr	r3, [pc, #464]	@ (8003708 <HAL_RCC_OscConfig+0x474>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a73      	ldr	r2, [pc, #460]	@ (8003708 <HAL_RCC_OscConfig+0x474>)
 800353c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7ff fb71 	bl	8002c28 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7ff fb6d 	bl	8002c28 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e10c      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <HAL_RCC_OscConfig+0x474>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x2ea>
 8003570:	4b64      	ldr	r3, [pc, #400]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003574:	4a63      	ldr	r2, [pc, #396]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	@ 0x70
 800357c:	e01c      	b.n	80035b8 <HAL_RCC_OscConfig+0x324>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b05      	cmp	r3, #5
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x30c>
 8003586:	4b5f      	ldr	r3, [pc, #380]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	4a5e      	ldr	r2, [pc, #376]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	@ 0x70
 8003592:	4b5c      	ldr	r3, [pc, #368]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	4a5b      	ldr	r2, [pc, #364]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	@ 0x70
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0x324>
 80035a0:	4b58      	ldr	r3, [pc, #352]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	4a57      	ldr	r2, [pc, #348]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ac:	4b55      	ldr	r3, [pc, #340]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	4a54      	ldr	r2, [pc, #336]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d015      	beq.n	80035ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7ff fb32 	bl	8002c28 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7ff fb2e 	bl	8002c28 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0cb      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	4b49      	ldr	r3, [pc, #292]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ee      	beq.n	80035c8 <HAL_RCC_OscConfig+0x334>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7ff fb1c 	bl	8002c28 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7ff fb18 	bl	8002c28 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0b5      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	4b3e      	ldr	r3, [pc, #248]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ee      	bne.n	80035f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361c:	4b39      	ldr	r3, [pc, #228]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	4a38      	ldr	r2, [pc, #224]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a1 	beq.w	8003774 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003632:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b08      	cmp	r3, #8
 800363c:	d05c      	beq.n	80036f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d141      	bne.n	80036ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b31      	ldr	r3, [pc, #196]	@ (800370c <HAL_RCC_OscConfig+0x478>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7ff faec 	bl	8002c28 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7ff fae8 	bl	8002c28 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e087      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	491b      	ldr	r1, [pc, #108]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369c:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x478>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7ff fac1 	bl	8002c28 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036aa:	f7ff fabd 	bl	8002c28 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e05c      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x416>
 80036c8:	e054      	b.n	8003774 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <HAL_RCC_OscConfig+0x478>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7ff faaa 	bl	8002c28 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7ff faa6 	bl	8002c28 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e045      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_RCC_OscConfig+0x470>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x444>
 80036f6:	e03d      	b.n	8003774 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e038      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
 800370c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003710:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_RCC_OscConfig+0x4ec>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d028      	beq.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d121      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d11a      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	3b01      	subs	r3, #1
 800375a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d107      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800

08003784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cc      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b68      	ldr	r3, [pc, #416]	@ (800393c <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d90c      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b65      	ldr	r3, [pc, #404]	@ (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	@ (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a58      	ldr	r2, [pc, #352]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a52      	ldr	r2, [pc, #328]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d044      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d119      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d003      	beq.n	8003842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	2b03      	cmp	r3, #3
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b3f      	ldr	r3, [pc, #252]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003852:	4b3b      	ldr	r3, [pc, #236]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e067      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b37      	ldr	r3, [pc, #220]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4934      	ldr	r1, [pc, #208]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003874:	f7ff f9d8 	bl	8002c28 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	e00a      	b.n	8003892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7ff f9d4 	bl	8002c28 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e04f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 020c 	and.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1eb      	bne.n	800387c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a4:	4b25      	ldr	r3, [pc, #148]	@ (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d20c      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b22      	ldr	r3, [pc, #136]	@ (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	@ (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f6:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	@ (8003944 <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe ffac 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00
 8003940:	40023800 	.word	0x40023800
 8003944:	0800d4ec 	.word	0x0800d4ec
 8003948:	20000e18 	.word	0x20000e18
 800394c:	20000e1c 	.word	0x20000e1c

08003950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b090      	sub	sp, #64	@ 0x40
 8003956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	637b      	str	r3, [r7, #52]	@ 0x34
 800395c:	2300      	movs	r3, #0
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003960:	2300      	movs	r3, #0
 8003962:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003968:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d00d      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x40>
 8003974:	2b08      	cmp	r3, #8
 8003976:	f200 80a1 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x16c>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x34>
 800397e:	2b04      	cmp	r3, #4
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x3a>
 8003982:	e09b      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b53      	ldr	r3, [pc, #332]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003988:	e09b      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398a:	4b53      	ldr	r3, [pc, #332]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 800398c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800398e:	e098      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003990:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003998:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d028      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	2200      	movs	r2, #0
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039b8:	2100      	movs	r1, #0
 80039ba:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039bc:	fb03 f201 	mul.w	r2, r3, r1
 80039c0:	2300      	movs	r3, #0
 80039c2:	fb00 f303 	mul.w	r3, r0, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	4a43      	ldr	r2, [pc, #268]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ca:	fba0 1202 	umull	r1, r2, r0, r2
 80039ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039d0:	460a      	mov	r2, r1
 80039d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d6:	4413      	add	r3, r2
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	2200      	movs	r2, #0
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	61fa      	str	r2, [r7, #28]
 80039e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039ea:	f7fd f935 	bl	8000c58 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4613      	mov	r3, r2
 80039f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f6:	e053      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f8:	4b35      	ldr	r3, [pc, #212]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	2200      	movs	r2, #0
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	617a      	str	r2, [r7, #20]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a0a:	f04f 0b00 	mov.w	fp, #0
 8003a0e:	4652      	mov	r2, sl
 8003a10:	465b      	mov	r3, fp
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a20:	0150      	lsls	r0, r2, #5
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	ebb2 080a 	subs.w	r8, r2, sl
 8003a2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a42:	ebb2 0408 	subs.w	r4, r2, r8
 8003a46:	eb63 0509 	sbc.w	r5, r3, r9
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	00eb      	lsls	r3, r5, #3
 8003a54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a58:	00e2      	lsls	r2, r4, #3
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	eb14 030a 	adds.w	r3, r4, sl
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	eb45 030b 	adc.w	r3, r5, fp
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a76:	4629      	mov	r1, r5
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a80:	4621      	mov	r1, r4
 8003a82:	028a      	lsls	r2, r1, #10
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	60fa      	str	r2, [r7, #12]
 8003a90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a94:	f7fd f8e0 	bl	8000c58 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ab0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003abe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3740      	adds	r7, #64	@ 0x40
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	017d7840 	.word	0x017d7840

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000e18 	.word	0x20000e18

08003af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0b5b      	lsrs	r3, r3, #13
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	0800d4fc 	.word	0x0800d4fc

08003b1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	220f      	movs	r2, #15
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b44:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCC_GetClockConfig+0x5c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <HAL_RCC_GetClockConfig+0x60>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e07b      	b.n	8003c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d108      	bne.n	8003bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ba2:	d009      	beq.n	8003bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
 8003baa:	e005      	b.n	8003bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fe fe10 	bl	80027f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0104 	and.w	r1, r3, #4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	f003 0210 	and.w	r2, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b088      	sub	sp, #32
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_SPI_Transmit+0x22>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e12d      	b.n	8003f10 <HAL_SPI_Transmit+0x27e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cbc:	f7fe ffb4 	bl	8002c28 <HAL_GetTick>
 8003cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cd6:	e116      	b.n	8003f06 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0x52>
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce8:	e10d      	b.n	8003f06 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2203      	movs	r2, #3
 8003cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d30:	d10f      	bne.n	8003d52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d007      	beq.n	8003d70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d78:	d14f      	bne.n	8003e1a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Transmit+0xf6>
 8003d82:	8afb      	ldrh	r3, [r7, #22]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d142      	bne.n	8003e0e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	1c9a      	adds	r2, r3, #2
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dac:	e02f      	b.n	8003e0e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d112      	bne.n	8003de2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003de0:	e015      	b.n	8003e0e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de2:	f7fe ff21 	bl	8002c28 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d803      	bhi.n	8003dfa <HAL_SPI_Transmit+0x168>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003df8:	d102      	bne.n	8003e00 <HAL_SPI_Transmit+0x16e>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e0c:	e07b      	b.n	8003f06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ca      	bne.n	8003dae <HAL_SPI_Transmit+0x11c>
 8003e18:	e050      	b.n	8003ebc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Transmit+0x196>
 8003e22:	8afb      	ldrh	r3, [r7, #22]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d144      	bne.n	8003eb2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e4e:	e030      	b.n	8003eb2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d113      	bne.n	8003e86 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e84:	e015      	b.n	8003eb2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e86:	f7fe fecf 	bl	8002c28 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d803      	bhi.n	8003e9e <HAL_SPI_Transmit+0x20c>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e9c:	d102      	bne.n	8003ea4 <HAL_SPI_Transmit+0x212>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003eb0:	e029      	b.n	8003f06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1c9      	bne.n	8003e50 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f9f9 	bl	80042b8 <SPI_EndRxTxTransaction>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e003      	b.n	8003f06 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_SPI_Transmit_DMA+0x20>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e097      	b.n	8004068 <HAL_SPI_Transmit_DMA+0x150>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f50:	e085      	b.n	800405e <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_Transmit_DMA+0x46>
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f62:	e07c      	b.n	800405e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2203      	movs	r2, #3
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003faa:	d10f      	bne.n	8003fcc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd0:	4a27      	ldr	r2, [pc, #156]	@ (8004070 <HAL_SPI_Transmit_DMA+0x158>)
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd8:	4a26      	ldr	r2, [pc, #152]	@ (8004074 <HAL_SPI_Transmit_DMA+0x15c>)
 8003fda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe0:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <HAL_SPI_Transmit_DMA+0x160>)
 8003fe2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe8:	2200      	movs	r2, #0
 8003fea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004002:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004004:	f7fe ff22 	bl	8002e4c <HAL_DMA_Start_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800401e:	e01e      	b.n	800405e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402a:	2b40      	cmp	r3, #64	@ 0x40
 800402c:	d007      	beq.n	800403e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0220 	orr.w	r2, r2, #32
 800404c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0202 	orr.w	r2, r2, #2
 800405c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	0800414d 	.word	0x0800414d
 8004074:	080040a5 	.word	0x080040a5
 8004078:	08004169 	.word	0x08004169

0800407c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b2:	f7fe fdb9 	bl	8002c28 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c6:	d03b      	beq.n	8004140 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0220 	bic.w	r2, r2, #32
 80040d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0202 	bic.w	r2, r2, #2
 80040e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	2164      	movs	r1, #100	@ 0x64
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f000 f8e3 	bl	80042b8 <SPI_EndRxTxTransaction>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004138:	6978      	ldr	r0, [r7, #20]
 800413a:	f7ff ffa9 	bl	8004090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800413e:	e002      	b.n	8004146 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004140:	6978      	ldr	r0, [r7, #20]
 8004142:	f7fc ffc3 	bl	80010cc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff ff8e 	bl	800407c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0203 	bic.w	r2, r2, #3
 8004184:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	f043 0210 	orr.w	r2, r3, #16
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff ff78 	bl	8004090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b8:	f7fe fd36 	bl	8002c28 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4413      	add	r3, r2
 80041c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c8:	f7fe fd2e 	bl	8002c28 <HAL_GetTick>
 80041cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ce:	4b39      	ldr	r3, [pc, #228]	@ (80042b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	015b      	lsls	r3, r3, #5
 80041d4:	0d1b      	lsrs	r3, r3, #20
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041de:	e054      	b.n	800428a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e6:	d050      	beq.n	800428a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e8:	f7fe fd1e 	bl	8002c28 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d13d      	bne.n	800427a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800420c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004216:	d111      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004220:	d004      	beq.n	800422c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d107      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800423a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004244:	d10f      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e017      	b.n	80042aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3b01      	subs	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d19b      	bne.n	80041e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000e18 	.word	0x20000e18

080042b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2201      	movs	r2, #1
 80042cc:	2102      	movs	r1, #2
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff ff6a 	bl	80041a8 <SPI_WaitFlagStateUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e032      	b.n	8004350 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <SPI_EndRxTxTransaction+0xa0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <SPI_EndRxTxTransaction+0xa4>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	0d5b      	lsrs	r3, r3, #21
 80042f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004308:	d112      	bne.n	8004330 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2200      	movs	r2, #0
 8004312:	2180      	movs	r1, #128	@ 0x80
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff ff47 	bl	80041a8 <SPI_WaitFlagStateUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d016      	beq.n	800434e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e00f      	b.n	8004350 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3b01      	subs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004346:	2b80      	cmp	r3, #128	@ 0x80
 8004348:	d0f2      	beq.n	8004330 <SPI_EndRxTxTransaction+0x78>
 800434a:	e000      	b.n	800434e <SPI_EndRxTxTransaction+0x96>
        break;
 800434c:	bf00      	nop
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000e18 	.word	0x20000e18
 800435c:	165e9f81 	.word	0x165e9f81

08004360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e041      	b.n	80043f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f839 	bl	80043fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f000 f9b2 	bl	8004708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e044      	b.n	80044b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1e      	ldr	r2, [pc, #120]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x6c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004456:	d013      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x6c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1a      	ldr	r2, [pc, #104]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x6c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <HAL_TIM_Base_Start_IT+0xb8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x6c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x6c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a16      	ldr	r2, [pc, #88]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d111      	bne.n	80044a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b06      	cmp	r3, #6
 8004490:	d010      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a2:	e007      	b.n	80044b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40014000 	.word	0x40014000

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d020      	beq.n	800453c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8d2 	bl	80046cc <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8c4 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8d5 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0204 	mvn.w	r2, #4
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8ac 	bl	80046cc <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f89e 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8af 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0208 	mvn.w	r2, #8
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2204      	movs	r2, #4
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f886 	bl	80046cc <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f878 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f889 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f860 	bl	80046cc <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f852 	bl	80046b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f863 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0201 	mvn.w	r2, #1
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fe f896 	bl	8002770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8e6 	bl	8004834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f834 	bl	80046f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0220 	mvn.w	r2, #32
 80046a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8b8 	bl	8004820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3a      	ldr	r2, [pc, #232]	@ (8004804 <TIM_Base_SetConfig+0xfc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00f      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a37      	ldr	r2, [pc, #220]	@ (8004808 <TIM_Base_SetConfig+0x100>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a36      	ldr	r2, [pc, #216]	@ (800480c <TIM_Base_SetConfig+0x104>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0x38>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a35      	ldr	r2, [pc, #212]	@ (8004810 <TIM_Base_SetConfig+0x108>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <TIM_Base_SetConfig+0xfc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01b      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004760:	d017      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a28      	ldr	r2, [pc, #160]	@ (8004808 <TIM_Base_SetConfig+0x100>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a27      	ldr	r2, [pc, #156]	@ (800480c <TIM_Base_SetConfig+0x104>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00f      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a26      	ldr	r2, [pc, #152]	@ (8004810 <TIM_Base_SetConfig+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00b      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a25      	ldr	r2, [pc, #148]	@ (8004814 <TIM_Base_SetConfig+0x10c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a24      	ldr	r2, [pc, #144]	@ (8004818 <TIM_Base_SetConfig+0x110>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a23      	ldr	r2, [pc, #140]	@ (800481c <TIM_Base_SetConfig+0x114>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d108      	bne.n	80047a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004804 <TIM_Base_SetConfig+0xfc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d103      	bne.n	80047d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	611a      	str	r2, [r3, #16]
  }
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800

08004820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <__NVIC_SetPriority>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004858:	2b00      	cmp	r3, #0
 800485a:	db0a      	blt.n	8004872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	b2da      	uxtb	r2, r3
 8004860:	490c      	ldr	r1, [pc, #48]	@ (8004894 <__NVIC_SetPriority+0x4c>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	440b      	add	r3, r1
 800486c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004870:	e00a      	b.n	8004888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4908      	ldr	r1, [pc, #32]	@ (8004898 <__NVIC_SetPriority+0x50>)
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	3b04      	subs	r3, #4
 8004880:	0112      	lsls	r2, r2, #4
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	440b      	add	r3, r1
 8004886:	761a      	strb	r2, [r3, #24]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	e000e100 	.word	0xe000e100
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048a0:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <SysTick_Handler+0x1c>)
 80048a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048a4:	f001 ff5c 	bl	8006760 <xTaskGetSchedulerState>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048ae:	f002 fe53 	bl	8007558 <xPortSysTickHandler>
  }
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000e010 	.word	0xe000e010

080048bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048c0:	2100      	movs	r1, #0
 80048c2:	f06f 0004 	mvn.w	r0, #4
 80048c6:	f7ff ffbf 	bl	8004848 <__NVIC_SetPriority>
#endif
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048d6:	f3ef 8305 	mrs	r3, IPSR
 80048da:	603b      	str	r3, [r7, #0]
  return(result);
 80048dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048e2:	f06f 0305 	mvn.w	r3, #5
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e00c      	b.n	8004904 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <osKernelInitialize+0x44>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d105      	bne.n	80048fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <osKernelInitialize+0x44>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e002      	b.n	8004904 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004904:	687b      	ldr	r3, [r7, #4]
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20001118 	.word	0x20001118

08004918 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800491e:	f3ef 8305 	mrs	r3, IPSR
 8004922:	603b      	str	r3, [r7, #0]
  return(result);
 8004924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <osKernelStart+0x1a>
    stat = osErrorISR;
 800492a:	f06f 0305 	mvn.w	r3, #5
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	e010      	b.n	8004954 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <osKernelStart+0x48>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d109      	bne.n	800494e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800493a:	f7ff ffbf 	bl	80048bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800493e:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <osKernelStart+0x48>)
 8004940:	2202      	movs	r2, #2
 8004942:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004944:	f001 faa8 	bl	8005e98 <vTaskStartScheduler>
      stat = osOK;
 8004948:	2300      	movs	r3, #0
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e002      	b.n	8004954 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004954:	687b      	ldr	r3, [r7, #4]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20001118 	.word	0x20001118

08004964 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b08e      	sub	sp, #56	@ 0x38
 8004968:	af04      	add	r7, sp, #16
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004974:	f3ef 8305 	mrs	r3, IPSR
 8004978:	617b      	str	r3, [r7, #20]
  return(result);
 800497a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800497c:	2b00      	cmp	r3, #0
 800497e:	d17e      	bne.n	8004a7e <osThreadNew+0x11a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d07b      	beq.n	8004a7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800498a:	2318      	movs	r3, #24
 800498c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004996:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d045      	beq.n	8004a2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <osThreadNew+0x48>
        name = attr->name;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <osThreadNew+0x6e>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b38      	cmp	r3, #56	@ 0x38
 80049c4:	d805      	bhi.n	80049d2 <osThreadNew+0x6e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <osThreadNew+0x72>
        return (NULL);
 80049d2:	2300      	movs	r3, #0
 80049d4:	e054      	b.n	8004a80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00e      	beq.n	8004a0c <osThreadNew+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2ba7      	cmp	r3, #167	@ 0xa7
 80049f4:	d90a      	bls.n	8004a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <osThreadNew+0xa8>
        mem = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e010      	b.n	8004a2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <osThreadNew+0xca>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d108      	bne.n	8004a2e <osThreadNew+0xca>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <osThreadNew+0xca>
          mem = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e001      	b.n	8004a2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d110      	bne.n	8004a56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a3c:	9202      	str	r2, [sp, #8]
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 ffb0 	bl	80059b0 <xTaskCreateStatic>
 8004a50:	4603      	mov	r3, r0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e013      	b.n	8004a7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d110      	bne.n	8004a7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	f107 0310 	add.w	r3, r7, #16
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fffe 	bl	8005a70 <xTaskCreate>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <osThreadNew+0x11a>
            hTask = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a7e:	693b      	ldr	r3, [r7, #16]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3728      	adds	r7, #40	@ 0x28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a90:	f3ef 8305 	mrs	r3, IPSR
 8004a94:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <osDelay+0x1c>
    stat = osErrorISR;
 8004a9c:	f06f 0305 	mvn.w	r3, #5
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e007      	b.n	8004ab4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f001 f9bc 	bl	8005e2c <vTaskDelay>
    }
  }

  return (stat);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a07      	ldr	r2, [pc, #28]	@ (8004aec <vApplicationGetIdleTaskMemory+0x2c>)
 8004ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a06      	ldr	r2, [pc, #24]	@ (8004af0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	2000111c 	.word	0x2000111c
 8004af0:	200011c4 	.word	0x200011c4

08004af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a07      	ldr	r2, [pc, #28]	@ (8004b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a06      	ldr	r2, [pc, #24]	@ (8004b24 <vApplicationGetTimerTaskMemory+0x30>)
 8004b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b12:	601a      	str	r2, [r3, #0]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	200013c4 	.word	0x200013c4
 8004b24:	2000146c 	.word	0x2000146c

08004b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f103 0208 	add.w	r2, r3, #8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f103 0208 	add.w	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f103 0208 	add.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004be0:	d103      	bne.n	8004bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e00c      	b.n	8004c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3308      	adds	r3, #8
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e002      	b.n	8004bf8 <vListInsert+0x2e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d2f6      	bcs.n	8004bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6892      	ldr	r2, [r2, #8]
 8004c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6852      	ldr	r2, [r2, #4]
 8004c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d103      	bne.n	8004c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1e5a      	subs	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cbc:	f002 fbbc 	bl	8007438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	68f9      	ldr	r1, [r7, #12]
 8004cca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cec:	3b01      	subs	r3, #1
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	22ff      	movs	r2, #255	@ 0xff
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	22ff      	movs	r2, #255	@ 0xff
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d114      	bne.n	8004d3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 fb58 	bl	80063d4 <xTaskRemoveFromEventList>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d012      	beq.n	8004d50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d60 <xQueueGenericReset+0xd0>)
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	e009      	b.n	8004d50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3310      	adds	r3, #16
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fef1 	bl	8004b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3324      	adds	r3, #36	@ 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff feec 	bl	8004b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d50:	f002 fba4 	bl	800749c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d54:	2301      	movs	r3, #1
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08e      	sub	sp, #56	@ 0x38
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <xQueueGenericCreateStatic+0x56>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <xQueueGenericCreateStatic+0x5a>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueGenericCreateStatic+0x5c>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <xQueueGenericCreateStatic+0x84>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <xQueueGenericCreateStatic+0x88>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <xQueueGenericCreateStatic+0x8a>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	61fb      	str	r3, [r7, #28]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e0a:	2350      	movs	r3, #80	@ 0x50
 8004e0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b50      	cmp	r3, #80	@ 0x50
 8004e12:	d00b      	beq.n	8004e2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	61bb      	str	r3, [r7, #24]
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f840 	bl	8004ed4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3730      	adds	r7, #48	@ 0x30
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b08a      	sub	sp, #40	@ 0x28
 8004e62:	af02      	add	r7, sp, #8
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	613b      	str	r3, [r7, #16]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3350      	adds	r3, #80	@ 0x50
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f002 fbef 	bl	800767c <pvPortMalloc>
 8004e9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d011      	beq.n	8004eca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3350      	adds	r3, #80	@ 0x50
 8004eae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eb8:	79fa      	ldrb	r2, [r7, #7]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f805 	bl	8004ed4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eca:	69bb      	ldr	r3, [r7, #24]
	}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f02:	2101      	movs	r1, #1
 8004f04:	69b8      	ldr	r0, [r7, #24]
 8004f06:	f7ff fec3 	bl	8004c90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2100      	movs	r1, #0
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f81d 	bl	8004f80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	461a      	mov	r2, r3
 8004f64:	6939      	ldr	r1, [r7, #16]
 8004f66:	6978      	ldr	r0, [r7, #20]
 8004f68:	f7ff ff79 	bl	8004e5e <xQueueGenericCreate>
 8004f6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ffd3 	bl	8004f1a <prvInitialiseMutex>

		return xNewQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
	}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	@ 0x38
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <xQueueGenericSend+0x34>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <xQueueGenericSend+0x42>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <xQueueGenericSend+0x46>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <xQueueGenericSend+0x48>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <xQueueGenericSend+0x64>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d103      	bne.n	8004ff2 <xQueueGenericSend+0x72>
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <xQueueGenericSend+0x76>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <xQueueGenericSend+0x78>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <xQueueGenericSend+0x94>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005014:	f001 fba4 	bl	8006760 <xTaskGetSchedulerState>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <xQueueGenericSend+0xa4>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <xQueueGenericSend+0xa8>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <xQueueGenericSend+0xaa>
 8005028:	2300      	movs	r3, #0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <xQueueGenericSend+0xc6>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	61fb      	str	r3, [r7, #28]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005046:	f002 f9f7 	bl	8007438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <xQueueGenericSend+0xdc>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d129      	bne.n	80050b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005062:	f000 fb37 	bl	80056d4 <prvCopyDataToQueue>
 8005066:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	3324      	adds	r3, #36	@ 0x24
 8005074:	4618      	mov	r0, r3
 8005076:	f001 f9ad 	bl	80063d4 <xTaskRemoveFromEventList>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005080:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <xQueueGenericSend+0x200>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	e00a      	b.n	80050a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005098:	4b39      	ldr	r3, [pc, #228]	@ (8005180 <xQueueGenericSend+0x200>)
 800509a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050a8:	f002 f9f8 	bl	800749c <vPortExitCritical>
				return pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e063      	b.n	8005178 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050b6:	f002 f9f1 	bl	800749c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e05c      	b.n	8005178 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f9e7 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d2:	f002 f9e3 	bl	800749c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d6:	f000 ff4f 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050da:	f002 f9ad 	bl	8007438 <vPortEnterCritical>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ea:	d103      	bne.n	80050f4 <xQueueGenericSend+0x174>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fa:	b25b      	sxtb	r3, r3
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005100:	d103      	bne.n	800510a <xQueueGenericSend+0x18a>
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510a:	f002 f9c7 	bl	800749c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800510e:	1d3a      	adds	r2, r7, #4
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f9d6 	bl	80064c8 <xTaskCheckForTimeOut>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d124      	bne.n	800516c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005122:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005124:	f000 fbce 	bl	80058c4 <prvIsQueueFull>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	3310      	adds	r3, #16
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f8fa 	bl	8006330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800513c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800513e:	f000 fb59 	bl	80057f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005142:	f000 ff27 	bl	8005f94 <xTaskResumeAll>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	f47f af7c 	bne.w	8005046 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800514e:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <xQueueGenericSend+0x200>)
 8005150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	e772      	b.n	8005046 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005162:	f000 fb47 	bl	80057f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005166:	f000 ff15 	bl	8005f94 <xTaskResumeAll>
 800516a:	e76c      	b.n	8005046 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800516c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800516e:	f000 fb41 	bl	80057f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005172:	f000 ff0f 	bl	8005f94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005176:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005178:	4618      	mov	r0, r3
 800517a:	3738      	adds	r7, #56	@ 0x38
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b090      	sub	sp, #64	@ 0x40
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051ae:	bf00      	nop
 80051b0:	bf00      	nop
 80051b2:	e7fd      	b.n	80051b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <xQueueGenericSendFromISR+0x3e>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueGenericSendFromISR+0x42>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueGenericSendFromISR+0x44>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d103      	bne.n	80051f2 <xQueueGenericSendFromISR+0x6e>
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <xQueueGenericSendFromISR+0x72>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xQueueGenericSendFromISR+0x74>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005214:	f002 f9f0 	bl	80075f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005218:	f3ef 8211 	mrs	r2, BASEPRI
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	61fa      	str	r2, [r7, #28]
 800522e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005230:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <xQueueGenericSendFromISR+0xc2>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d12f      	bne.n	80052a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800524c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800525c:	f000 fa3a 	bl	80056d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005260:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005268:	d112      	bne.n	8005290 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800526a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005274:	3324      	adds	r3, #36	@ 0x24
 8005276:	4618      	mov	r0, r3
 8005278:	f001 f8ac 	bl	80063d4 <xTaskRemoveFromEventList>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00e      	beq.n	80052a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e007      	b.n	80052a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005290:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005294:	3301      	adds	r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	b25a      	sxtb	r2, r3
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052a0:	2301      	movs	r3, #1
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052a4:	e001      	b.n	80052aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3740      	adds	r7, #64	@ 0x40
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08c      	sub	sp, #48	@ 0x30
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <xQueueReceive+0x32>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	623b      	str	r3, [r7, #32]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <xQueueReceive+0x40>
 80052f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <xQueueReceive+0x44>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <xQueueReceive+0x46>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <xQueueReceive+0x62>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	61fb      	str	r3, [r7, #28]
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005322:	f001 fa1d 	bl	8006760 <xTaskGetSchedulerState>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <xQueueReceive+0x72>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <xQueueReceive+0x76>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <xQueueReceive+0x78>
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10b      	bne.n	8005354 <xQueueReceive+0x94>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	61bb      	str	r3, [r7, #24]
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	e7fd      	b.n	8005350 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005354:	f002 f870 	bl	8007438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01f      	beq.n	80053a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005368:	f000 fa1e 	bl	80057a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00f      	beq.n	800539c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	3310      	adds	r3, #16
 8005380:	4618      	mov	r0, r3
 8005382:	f001 f827 	bl	80063d4 <xTaskRemoveFromEventList>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800538c:	4b3c      	ldr	r3, [pc, #240]	@ (8005480 <xQueueReceive+0x1c0>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800539c:	f002 f87e 	bl	800749c <vPortExitCritical>
				return pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e069      	b.n	8005478 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053aa:	f002 f877 	bl	800749c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e062      	b.n	8005478 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053b8:	f107 0310 	add.w	r3, r7, #16
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 f86d 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053c2:	2301      	movs	r3, #1
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053c6:	f002 f869 	bl	800749c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ca:	f000 fdd5 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ce:	f002 f833 	bl	8007438 <vPortEnterCritical>
 80053d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053de:	d103      	bne.n	80053e8 <xQueueReceive+0x128>
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053f4:	d103      	bne.n	80053fe <xQueueReceive+0x13e>
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053fe:	f002 f84d 	bl	800749c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005402:	1d3a      	adds	r2, r7, #4
 8005404:	f107 0310 	add.w	r3, r7, #16
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f85c 	bl	80064c8 <xTaskCheckForTimeOut>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d123      	bne.n	800545e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005418:	f000 fa3e 	bl	8005898 <prvIsQueueEmpty>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d017      	beq.n	8005452 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	3324      	adds	r3, #36	@ 0x24
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f000 ff80 	bl	8006330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005432:	f000 f9df 	bl	80057f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005436:	f000 fdad 	bl	8005f94 <xTaskResumeAll>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d189      	bne.n	8005354 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005440:	4b0f      	ldr	r3, [pc, #60]	@ (8005480 <xQueueReceive+0x1c0>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	e780      	b.n	8005354 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005454:	f000 f9ce 	bl	80057f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005458:	f000 fd9c 	bl	8005f94 <xTaskResumeAll>
 800545c:	e77a      	b.n	8005354 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800545e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005460:	f000 f9c8 	bl	80057f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005464:	f000 fd96 	bl	8005f94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005468:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800546a:	f000 fa15 	bl	8005898 <prvIsQueueEmpty>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	f43f af6f 	beq.w	8005354 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005476:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005478:	4618      	mov	r0, r3
 800547a:	3730      	adds	r7, #48	@ 0x30
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	@ 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	623b      	str	r3, [r7, #32]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	61fb      	str	r3, [r7, #28]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054d8:	f001 f942 	bl	8006760 <xTaskGetSchedulerState>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <xQueueSemaphoreTake+0x64>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xQueueSemaphoreTake+0x68>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <xQueueSemaphoreTake+0x6a>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xQueueSemaphoreTake+0x86>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	61bb      	str	r3, [r7, #24]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800550a:	f001 ff95 	bl	8007438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d024      	beq.n	8005564 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800552a:	f001 fa93 	bl	8006a54 <pvTaskIncrementMutexHeldCount>
 800552e:	4602      	mov	r2, r0
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800553c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553e:	3310      	adds	r3, #16
 8005540:	4618      	mov	r0, r3
 8005542:	f000 ff47 	bl	80063d4 <xTaskRemoveFromEventList>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800554c:	4b54      	ldr	r3, [pc, #336]	@ (80056a0 <xQueueSemaphoreTake+0x21c>)
 800554e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800555c:	f001 ff9e 	bl	800749c <vPortExitCritical>
				return pdPASS;
 8005560:	2301      	movs	r3, #1
 8005562:	e098      	b.n	8005696 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d112      	bne.n	8005590 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	617b      	str	r3, [r7, #20]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005588:	f001 ff88 	bl	800749c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800558c:	2300      	movs	r3, #0
 800558e:	e082      	b.n	8005696 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005596:	f107 030c 	add.w	r3, r7, #12
 800559a:	4618      	mov	r0, r3
 800559c:	f000 ff7e 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a4:	f001 ff7a 	bl	800749c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055a8:	f000 fce6 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ac:	f001 ff44 	bl	8007438 <vPortEnterCritical>
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055b6:	b25b      	sxtb	r3, r3
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055bc:	d103      	bne.n	80055c6 <xQueueSemaphoreTake+0x142>
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055d2:	d103      	bne.n	80055dc <xQueueSemaphoreTake+0x158>
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055dc:	f001 ff5e 	bl	800749c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e0:	463a      	mov	r2, r7
 80055e2:	f107 030c 	add.w	r3, r7, #12
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 ff6d 	bl	80064c8 <xTaskCheckForTimeOut>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d132      	bne.n	800565a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055f6:	f000 f94f 	bl	8005898 <prvIsQueueEmpty>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d026      	beq.n	800564e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005608:	f001 ff16 	bl	8007438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f8c3 	bl	800679c <xTaskPriorityInherit>
 8005616:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005618:	f001 ff40 	bl	800749c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561e:	3324      	adds	r3, #36	@ 0x24
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fe83 	bl	8006330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800562a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800562c:	f000 f8e2 	bl	80057f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005630:	f000 fcb0 	bl	8005f94 <xTaskResumeAll>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	f47f af67 	bne.w	800550a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800563c:	4b18      	ldr	r3, [pc, #96]	@ (80056a0 <xQueueSemaphoreTake+0x21c>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	e75d      	b.n	800550a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800564e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005650:	f000 f8d0 	bl	80057f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005654:	f000 fc9e 	bl	8005f94 <xTaskResumeAll>
 8005658:	e757      	b.n	800550a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800565a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800565c:	f000 f8ca 	bl	80057f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005660:	f000 fc98 	bl	8005f94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005664:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005666:	f000 f917 	bl	8005898 <prvIsQueueEmpty>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	f43f af4c 	beq.w	800550a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005678:	f001 fede 	bl	8007438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800567c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800567e:	f000 f811 	bl	80056a4 <prvGetDisinheritPriorityAfterTimeout>
 8005682:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f95e 	bl	800694c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005690:	f001 ff04 	bl	800749c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005696:	4618      	mov	r0, r3
 8005698:	3738      	adds	r7, #56	@ 0x38
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d006      	beq.n	80056c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e001      	b.n	80056c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056c6:	68fb      	ldr	r3, [r7, #12]
	}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d14d      	bne.n	8005796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f8b4 	bl	800686c <xTaskPriorityDisinherit>
 8005704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	e043      	b.n	8005796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d119      	bne.n	8005748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6858      	ldr	r0, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	461a      	mov	r2, r3
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	f002 ffed 	bl	80086fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	441a      	add	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d32b      	bcc.n	8005796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	e026      	b.n	8005796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68d8      	ldr	r0, [r3, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	461a      	mov	r2, r3
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	f002 ffd3 	bl	80086fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	425b      	negs	r3, r3
 8005762:	441a      	add	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d207      	bcs.n	8005784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577c:	425b      	negs	r3, r3
 800577e:	441a      	add	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d105      	bne.n	8005796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	3b01      	subs	r3, #1
 8005794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	441a      	add	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d303      	bcc.n	80057dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68d9      	ldr	r1, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	461a      	mov	r2, r3
 80057e6:	6838      	ldr	r0, [r7, #0]
 80057e8:	f002 ff89 	bl	80086fe <memcpy>
	}
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057fc:	f001 fe1c 	bl	8007438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005808:	e011      	b.n	800582e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d012      	beq.n	8005838 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3324      	adds	r3, #36	@ 0x24
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fddc 	bl	80063d4 <xTaskRemoveFromEventList>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005822:	f000 feb5 	bl	8006590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	3b01      	subs	r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800582e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dce9      	bgt.n	800580a <prvUnlockQueue+0x16>
 8005836:	e000      	b.n	800583a <prvUnlockQueue+0x46>
					break;
 8005838:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	22ff      	movs	r2, #255	@ 0xff
 800583e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005842:	f001 fe2b 	bl	800749c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005846:	f001 fdf7 	bl	8007438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005850:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005852:	e011      	b.n	8005878 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d012      	beq.n	8005882 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3310      	adds	r3, #16
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fdb7 	bl	80063d4 <xTaskRemoveFromEventList>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800586c:	f000 fe90 	bl	8006590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005870:	7bbb      	ldrb	r3, [r7, #14]
 8005872:	3b01      	subs	r3, #1
 8005874:	b2db      	uxtb	r3, r3
 8005876:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800587c:	2b00      	cmp	r3, #0
 800587e:	dce9      	bgt.n	8005854 <prvUnlockQueue+0x60>
 8005880:	e000      	b.n	8005884 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005882:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	22ff      	movs	r2, #255	@ 0xff
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800588c:	f001 fe06 	bl	800749c <vPortExitCritical>
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a0:	f001 fdca 	bl	8007438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e001      	b.n	80058b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058b6:	f001 fdf1 	bl	800749c <vPortExitCritical>

	return xReturn;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058cc:	f001 fdb4 	bl	8007438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d102      	bne.n	80058e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e001      	b.n	80058e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058e6:	f001 fdd9 	bl	800749c <vPortExitCritical>

	return xReturn;
 80058ea:	68fb      	ldr	r3, [r7, #12]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e014      	b.n	800592e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005904:	4a0f      	ldr	r2, [pc, #60]	@ (8005944 <vQueueAddToRegistry+0x50>)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005910:	490c      	ldr	r1, [pc, #48]	@ (8005944 <vQueueAddToRegistry+0x50>)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800591a:	4a0a      	ldr	r2, [pc, #40]	@ (8005944 <vQueueAddToRegistry+0x50>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005926:	e006      	b.n	8005936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b07      	cmp	r3, #7
 8005932:	d9e7      	bls.n	8005904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2000186c 	.word	0x2000186c

08005948 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005958:	f001 fd6e 	bl	8007438 <vPortEnterCritical>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005962:	b25b      	sxtb	r3, r3
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005968:	d103      	bne.n	8005972 <vQueueWaitForMessageRestricted+0x2a>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800597e:	d103      	bne.n	8005988 <vQueueWaitForMessageRestricted+0x40>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005988:	f001 fd88 	bl	800749c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3324      	adds	r3, #36	@ 0x24
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fced 	bl	800637c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff ff26 	bl	80057f4 <prvUnlockQueue>
	}
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08e      	sub	sp, #56	@ 0x38
 80059b4:	af04      	add	r7, sp, #16
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	623b      	str	r3, [r7, #32]
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	61fb      	str	r3, [r7, #28]
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059fa:	23a8      	movs	r3, #168	@ 0xa8
 80059fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2ba8      	cmp	r3, #168	@ 0xa8
 8005a02:	d00b      	beq.n	8005a1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61bb      	str	r3, [r7, #24]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01e      	beq.n	8005a62 <xTaskCreateStatic+0xb2>
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01b      	beq.n	8005a62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	9302      	str	r3, [sp, #8]
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f851 	bl	8005afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a5c:	f000 f8f6 	bl	8005c4c <prvAddNewTaskToReadyList>
 8005a60:	e001      	b.n	8005a66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a66:	697b      	ldr	r3, [r7, #20]
	}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3728      	adds	r7, #40	@ 0x28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08c      	sub	sp, #48	@ 0x30
 8005a74:	af04      	add	r7, sp, #16
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fdf9 	bl	800767c <pvPortMalloc>
 8005a8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00e      	beq.n	8005ab0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a92:	20a8      	movs	r0, #168	@ 0xa8
 8005a94:	f001 fdf2 	bl	800767c <pvPortMalloc>
 8005a98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aa6:	e005      	b.n	8005ab4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	f001 feb5 	bl	8007818 <vPortFree>
 8005aae:	e001      	b.n	8005ab4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9303      	str	r3, [sp, #12]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	9302      	str	r3, [sp, #8]
 8005acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f80f 	bl	8005afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ade:	69f8      	ldr	r0, [r7, #28]
 8005ae0:	f000 f8b4 	bl	8005c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e002      	b.n	8005af0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005aee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005af0:	69bb      	ldr	r3, [r7, #24]
	}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	461a      	mov	r2, r3
 8005b14:	21a5      	movs	r1, #165	@ 0xa5
 8005b16:	f002 fd1c 	bl	8008552 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b24:	3b01      	subs	r3, #1
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f023 0307 	bic.w	r3, r3, #7
 8005b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	617b      	str	r3, [r7, #20]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01f      	beq.n	8005b9c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	e012      	b.n	8005b88 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	7819      	ldrb	r1, [r3, #0]
 8005b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	3334      	adds	r3, #52	@ 0x34
 8005b72:	460a      	mov	r2, r1
 8005b74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d006      	beq.n	8005b90 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d9e9      	bls.n	8005b62 <prvInitialiseNewTask+0x66>
 8005b8e:	e000      	b.n	8005b92 <prvInitialiseNewTask+0x96>
			{
				break;
 8005b90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b9a:	e003      	b.n	8005ba4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	2b37      	cmp	r3, #55	@ 0x37
 8005ba8:	d901      	bls.n	8005bae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005baa:	2337      	movs	r3, #55	@ 0x37
 8005bac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe ffcf 	bl	8004b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	3318      	adds	r3, #24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe ffca 	bl	8004b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	3354      	adds	r3, #84	@ 0x54
 8005bfe:	224c      	movs	r2, #76	@ 0x4c
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f002 fca5 	bl	8008552 <memset>
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c40 <prvInitialiseNewTask+0x144>)
 8005c0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	4a0c      	ldr	r2, [pc, #48]	@ (8005c44 <prvInitialiseNewTask+0x148>)
 8005c12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c16:	4a0c      	ldr	r2, [pc, #48]	@ (8005c48 <prvInitialiseNewTask+0x14c>)
 8005c18:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	69b8      	ldr	r0, [r7, #24]
 8005c20:	f001 fada 	bl	80071d8 <pxPortInitialiseStack>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c36:	bf00      	nop
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20005b00 	.word	0x20005b00
 8005c44:	20005b68 	.word	0x20005b68
 8005c48:	20005bd0 	.word	0x20005bd0

08005c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c54:	f001 fbf0 	bl	8007438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c58:	4b2d      	ldr	r3, [pc, #180]	@ (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c62:	4b2c      	ldr	r3, [pc, #176]	@ (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c70:	4b27      	ldr	r3, [pc, #156]	@ (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d110      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c78:	f000 fcae 	bl	80065d8 <prvInitialiseTaskLists>
 8005c7c:	e00d      	b.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c7e:	4b26      	ldr	r3, [pc, #152]	@ (8005d18 <prvAddNewTaskToReadyList+0xcc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c86:	4b23      	ldr	r3, [pc, #140]	@ (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d802      	bhi.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c94:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <prvAddNewTaskToReadyList+0xd0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d1c <prvAddNewTaskToReadyList+0xd0>)
 8005ca2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <prvAddNewTaskToReadyList+0xd0>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d20 <prvAddNewTaskToReadyList+0xd4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d903      	bls.n	8005cc0 <prvAddNewTaskToReadyList+0x74>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	4a18      	ldr	r2, [pc, #96]	@ (8005d20 <prvAddNewTaskToReadyList+0xd4>)
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4a15      	ldr	r2, [pc, #84]	@ (8005d24 <prvAddNewTaskToReadyList+0xd8>)
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7fe ff53 	bl	8004b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cdc:	f001 fbde 	bl	800749c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d18 <prvAddNewTaskToReadyList+0xcc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00e      	beq.n	8005d06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d207      	bcs.n	8005d06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <prvAddNewTaskToReadyList+0xdc>)
 8005cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20001d80 	.word	0x20001d80
 8005d14:	200018ac 	.word	0x200018ac
 8005d18:	20001d8c 	.word	0x20001d8c
 8005d1c:	20001d9c 	.word	0x20001d9c
 8005d20:	20001d88 	.word	0x20001d88
 8005d24:	200018b0 	.word	0x200018b0
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	@ 0x28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <vTaskDelayUntil+0x2c>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	617b      	str	r3, [r7, #20]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <vTaskDelayUntil+0x4a>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	613b      	str	r3, [r7, #16]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8005d76:	4b2a      	ldr	r3, [pc, #168]	@ (8005e20 <vTaskDelayUntil+0xf4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <vTaskDelayUntil+0x6a>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60fb      	str	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8005d96:	f000 f8ef 	bl	8005f78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005d9a:	4b22      	ldr	r3, [pc, #136]	@ (8005e24 <vTaskDelayUntil+0xf8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	4413      	add	r3, r2
 8005da8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d20b      	bcs.n	8005dcc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d211      	bcs.n	8005de2 <vTaskDelayUntil+0xb6>
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d90d      	bls.n	8005de2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dca:	e00a      	b.n	8005de2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d303      	bcc.n	8005dde <vTaskDelayUntil+0xb2>
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d901      	bls.n	8005de2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d006      	beq.n	8005dfc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fe40 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005dfc:	f000 f8ca 	bl	8005f94 <xTaskResumeAll>
 8005e00:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8005e08:	4b07      	ldr	r3, [pc, #28]	@ (8005e28 <vTaskDelayUntil+0xfc>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e18:	bf00      	nop
 8005e1a:	3728      	adds	r7, #40	@ 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20001da8 	.word	0x20001da8
 8005e24:	20001d84 	.word	0x20001d84
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d018      	beq.n	8005e70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e3e:	4b14      	ldr	r3, [pc, #80]	@ (8005e90 <vTaskDelay+0x64>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <vTaskDelay+0x32>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e5e:	f000 f88b 	bl	8005f78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e62:	2100      	movs	r1, #0
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fe09 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e6a:	f000 f893 	bl	8005f94 <xTaskResumeAll>
 8005e6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e76:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <vTaskDelay+0x68>)
 8005e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20001da8 	.word	0x20001da8
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	@ 0x28
 8005e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ea6:	463a      	mov	r2, r7
 8005ea8:	1d39      	adds	r1, r7, #4
 8005eaa:	f107 0308 	add.w	r3, r7, #8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fe06 	bl	8004ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	9202      	str	r2, [sp, #8]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	460a      	mov	r2, r1
 8005ec6:	4924      	ldr	r1, [pc, #144]	@ (8005f58 <vTaskStartScheduler+0xc0>)
 8005ec8:	4824      	ldr	r0, [pc, #144]	@ (8005f5c <vTaskStartScheduler+0xc4>)
 8005eca:	f7ff fd71 	bl	80059b0 <xTaskCreateStatic>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a23      	ldr	r2, [pc, #140]	@ (8005f60 <vTaskStartScheduler+0xc8>)
 8005ed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ed4:	4b22      	ldr	r3, [pc, #136]	@ (8005f60 <vTaskStartScheduler+0xc8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e001      	b.n	8005ee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d102      	bne.n	8005ef2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005eec:	f000 fe1a 	bl	8006b24 <xTimerCreateTimerTask>
 8005ef0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d11b      	bne.n	8005f30 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	613b      	str	r3, [r7, #16]
}
 8005f0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f0c:	4b15      	ldr	r3, [pc, #84]	@ (8005f64 <vTaskStartScheduler+0xcc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3354      	adds	r3, #84	@ 0x54
 8005f12:	4a15      	ldr	r2, [pc, #84]	@ (8005f68 <vTaskStartScheduler+0xd0>)
 8005f14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <vTaskStartScheduler+0xd4>)
 8005f18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f1e:	4b14      	ldr	r3, [pc, #80]	@ (8005f70 <vTaskStartScheduler+0xd8>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f24:	4b13      	ldr	r3, [pc, #76]	@ (8005f74 <vTaskStartScheduler+0xdc>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f2a:	f001 f9e1 	bl	80072f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f2e:	e00f      	b.n	8005f50 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f36:	d10b      	bne.n	8005f50 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <vTaskStartScheduler+0xb4>
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	0800ba08 	.word	0x0800ba08
 8005f5c:	080065a9 	.word	0x080065a9
 8005f60:	20001da4 	.word	0x20001da4
 8005f64:	200018ac 	.word	0x200018ac
 8005f68:	20000e34 	.word	0x20000e34
 8005f6c:	20001da0 	.word	0x20001da0
 8005f70:	20001d8c 	.word	0x20001d8c
 8005f74:	20001d84 	.word	0x20001d84

08005f78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f7c:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <vTaskSuspendAll+0x18>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	4a03      	ldr	r2, [pc, #12]	@ (8005f90 <vTaskSuspendAll+0x18>)
 8005f84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20001da8 	.word	0x20001da8

08005f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fa2:	4b42      	ldr	r3, [pc, #264]	@ (80060ac <xTaskResumeAll+0x118>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fc2:	f001 fa39 	bl	8007438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fc6:	4b39      	ldr	r3, [pc, #228]	@ (80060ac <xTaskResumeAll+0x118>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4a37      	ldr	r2, [pc, #220]	@ (80060ac <xTaskResumeAll+0x118>)
 8005fce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd0:	4b36      	ldr	r3, [pc, #216]	@ (80060ac <xTaskResumeAll+0x118>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d162      	bne.n	800609e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fd8:	4b35      	ldr	r3, [pc, #212]	@ (80060b0 <xTaskResumeAll+0x11c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05e      	beq.n	800609e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe0:	e02f      	b.n	8006042 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe2:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <xTaskResumeAll+0x120>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3318      	adds	r3, #24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fe24 	bl	8004c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fe1f 	bl	8004c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	4b2d      	ldr	r3, [pc, #180]	@ (80060b8 <xTaskResumeAll+0x124>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d903      	bls.n	8006012 <xTaskResumeAll+0x7e>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	4a2a      	ldr	r2, [pc, #168]	@ (80060b8 <xTaskResumeAll+0x124>)
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4a27      	ldr	r2, [pc, #156]	@ (80060bc <xTaskResumeAll+0x128>)
 8006020:	441a      	add	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3304      	adds	r3, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f7fe fdaa 	bl	8004b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006032:	4b23      	ldr	r3, [pc, #140]	@ (80060c0 <xTaskResumeAll+0x12c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800603c:	4b21      	ldr	r3, [pc, #132]	@ (80060c4 <xTaskResumeAll+0x130>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006042:	4b1c      	ldr	r3, [pc, #112]	@ (80060b4 <xTaskResumeAll+0x120>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1cb      	bne.n	8005fe2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006050:	f000 fb66 	bl	8006720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006054:	4b1c      	ldr	r3, [pc, #112]	@ (80060c8 <xTaskResumeAll+0x134>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d010      	beq.n	8006082 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006060:	f000 f846 	bl	80060f0 <xTaskIncrementTick>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800606a:	4b16      	ldr	r3, [pc, #88]	@ (80060c4 <xTaskResumeAll+0x130>)
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f1      	bne.n	8006060 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800607c:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <xTaskResumeAll+0x134>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <xTaskResumeAll+0x130>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800608a:	2301      	movs	r3, #1
 800608c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800608e:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <xTaskResumeAll+0x138>)
 8006090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800609e:	f001 f9fd 	bl	800749c <vPortExitCritical>

	return xAlreadyYielded;
 80060a2:	68bb      	ldr	r3, [r7, #8]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20001da8 	.word	0x20001da8
 80060b0:	20001d80 	.word	0x20001d80
 80060b4:	20001d40 	.word	0x20001d40
 80060b8:	20001d88 	.word	0x20001d88
 80060bc:	200018b0 	.word	0x200018b0
 80060c0:	200018ac 	.word	0x200018ac
 80060c4:	20001d94 	.word	0x20001d94
 80060c8:	20001d90 	.word	0x20001d90
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060d6:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <xTaskGetTickCount+0x1c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060dc:	687b      	ldr	r3, [r7, #4]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20001d84 	.word	0x20001d84

080060f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006238 <xTaskIncrementTick+0x148>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 8090 	bne.w	8006224 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006104:	4b4d      	ldr	r3, [pc, #308]	@ (800623c <xTaskIncrementTick+0x14c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800610c:	4a4b      	ldr	r2, [pc, #300]	@ (800623c <xTaskIncrementTick+0x14c>)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d121      	bne.n	800615c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006118:	4b49      	ldr	r3, [pc, #292]	@ (8006240 <xTaskIncrementTick+0x150>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	603b      	str	r3, [r7, #0]
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <xTaskIncrementTick+0x46>
 800613a:	4b41      	ldr	r3, [pc, #260]	@ (8006240 <xTaskIncrementTick+0x150>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	4b40      	ldr	r3, [pc, #256]	@ (8006244 <xTaskIncrementTick+0x154>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3e      	ldr	r2, [pc, #248]	@ (8006240 <xTaskIncrementTick+0x150>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4a3e      	ldr	r2, [pc, #248]	@ (8006244 <xTaskIncrementTick+0x154>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b3e      	ldr	r3, [pc, #248]	@ (8006248 <xTaskIncrementTick+0x158>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	4a3c      	ldr	r2, [pc, #240]	@ (8006248 <xTaskIncrementTick+0x158>)
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	f000 fae2 	bl	8006720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800615c:	4b3b      	ldr	r3, [pc, #236]	@ (800624c <xTaskIncrementTick+0x15c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	429a      	cmp	r2, r3
 8006164:	d349      	bcc.n	80061fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006166:	4b36      	ldr	r3, [pc, #216]	@ (8006240 <xTaskIncrementTick+0x150>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006170:	4b36      	ldr	r3, [pc, #216]	@ (800624c <xTaskIncrementTick+0x15c>)
 8006172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006176:	601a      	str	r2, [r3, #0]
					break;
 8006178:	e03f      	b.n	80061fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617a:	4b31      	ldr	r3, [pc, #196]	@ (8006240 <xTaskIncrementTick+0x150>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d203      	bcs.n	800619a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006192:	4a2e      	ldr	r2, [pc, #184]	@ (800624c <xTaskIncrementTick+0x15c>)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006198:	e02f      	b.n	80061fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3304      	adds	r3, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fd4c 	bl	8004c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	3318      	adds	r3, #24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe fd43 	bl	8004c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ba:	4b25      	ldr	r3, [pc, #148]	@ (8006250 <xTaskIncrementTick+0x160>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d903      	bls.n	80061ca <xTaskIncrementTick+0xda>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	4a22      	ldr	r2, [pc, #136]	@ (8006250 <xTaskIncrementTick+0x160>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006254 <xTaskIncrementTick+0x164>)
 80061d8:	441a      	add	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	3304      	adds	r3, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7fe fcce 	bl	8004b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <xTaskIncrementTick+0x168>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d3b8      	bcc.n	8006166 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061f8:	e7b5      	b.n	8006166 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061fa:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <xTaskIncrementTick+0x168>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006200:	4914      	ldr	r1, [pc, #80]	@ (8006254 <xTaskIncrementTick+0x164>)
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d901      	bls.n	8006216 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006212:	2301      	movs	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006216:	4b11      	ldr	r3, [pc, #68]	@ (800625c <xTaskIncrementTick+0x16c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800621e:	2301      	movs	r3, #1
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e004      	b.n	800622e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006224:	4b0e      	ldr	r3, [pc, #56]	@ (8006260 <xTaskIncrementTick+0x170>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	4a0d      	ldr	r2, [pc, #52]	@ (8006260 <xTaskIncrementTick+0x170>)
 800622c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800622e:	697b      	ldr	r3, [r7, #20]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20001da8 	.word	0x20001da8
 800623c:	20001d84 	.word	0x20001d84
 8006240:	20001d38 	.word	0x20001d38
 8006244:	20001d3c 	.word	0x20001d3c
 8006248:	20001d98 	.word	0x20001d98
 800624c:	20001da0 	.word	0x20001da0
 8006250:	20001d88 	.word	0x20001d88
 8006254:	200018b0 	.word	0x200018b0
 8006258:	200018ac 	.word	0x200018ac
 800625c:	20001d94 	.word	0x20001d94
 8006260:	20001d90 	.word	0x20001d90

08006264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800626a:	4b2b      	ldr	r3, [pc, #172]	@ (8006318 <vTaskSwitchContext+0xb4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006272:	4b2a      	ldr	r3, [pc, #168]	@ (800631c <vTaskSwitchContext+0xb8>)
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006278:	e047      	b.n	800630a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800627a:	4b28      	ldr	r3, [pc, #160]	@ (800631c <vTaskSwitchContext+0xb8>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006280:	4b27      	ldr	r3, [pc, #156]	@ (8006320 <vTaskSwitchContext+0xbc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e011      	b.n	80062ac <vTaskSwitchContext+0x48>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <vTaskSwitchContext+0x3e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	491d      	ldr	r1, [pc, #116]	@ (8006324 <vTaskSwitchContext+0xc0>)
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0e3      	beq.n	8006288 <vTaskSwitchContext+0x24>
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <vTaskSwitchContext+0xc0>)
 80062cc:	4413      	add	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3308      	adds	r3, #8
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d104      	bne.n	80062f0 <vTaskSwitchContext+0x8c>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	605a      	str	r2, [r3, #4]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006328 <vTaskSwitchContext+0xc4>)
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	4a09      	ldr	r2, [pc, #36]	@ (8006320 <vTaskSwitchContext+0xbc>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006300:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <vTaskSwitchContext+0xc4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3354      	adds	r3, #84	@ 0x54
 8006306:	4a09      	ldr	r2, [pc, #36]	@ (800632c <vTaskSwitchContext+0xc8>)
 8006308:	6013      	str	r3, [r2, #0]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20001da8 	.word	0x20001da8
 800631c:	20001d94 	.word	0x20001d94
 8006320:	20001d88 	.word	0x20001d88
 8006324:	200018b0 	.word	0x200018b0
 8006328:	200018ac 	.word	0x200018ac
 800632c:	20000e34 	.word	0x20000e34

08006330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006358:	4b07      	ldr	r3, [pc, #28]	@ (8006378 <vTaskPlaceOnEventList+0x48>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3318      	adds	r3, #24
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7fe fc32 	bl	8004bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006366:	2101      	movs	r1, #1
 8006368:	6838      	ldr	r0, [r7, #0]
 800636a:	f000 fb87 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200018ac 	.word	0x200018ac

0800637c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063a6:	4b0a      	ldr	r3, [pc, #40]	@ (80063d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3318      	adds	r3, #24
 80063ac:	4619      	mov	r1, r3
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7fe fbe7 	bl	8004b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80063ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	68b8      	ldr	r0, [r7, #8]
 80063c4:	f000 fb5a 	bl	8006a7c <prvAddCurrentTaskToDelayedList>
	}
 80063c8:	bf00      	nop
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	200018ac 	.word	0x200018ac

080063d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60fb      	str	r3, [r7, #12]
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3318      	adds	r3, #24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fc18 	bl	8004c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640c:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <xTaskRemoveFromEventList+0xb0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11d      	bne.n	8006450 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3304      	adds	r3, #4
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fc0f 	bl	8004c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006422:	4b19      	ldr	r3, [pc, #100]	@ (8006488 <xTaskRemoveFromEventList+0xb4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d903      	bls.n	8006432 <xTaskRemoveFromEventList+0x5e>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <xTaskRemoveFromEventList+0xb4>)
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a13      	ldr	r2, [pc, #76]	@ (800648c <xTaskRemoveFromEventList+0xb8>)
 8006440:	441a      	add	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe fb9a 	bl	8004b82 <vListInsertEnd>
 800644e:	e005      	b.n	800645c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3318      	adds	r3, #24
 8006454:	4619      	mov	r1, r3
 8006456:	480e      	ldr	r0, [pc, #56]	@ (8006490 <xTaskRemoveFromEventList+0xbc>)
 8006458:	f7fe fb93 	bl	8004b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006460:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <xTaskRemoveFromEventList+0xc0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	429a      	cmp	r2, r3
 8006468:	d905      	bls.n	8006476 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800646a:	2301      	movs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800646e:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <xTaskRemoveFromEventList+0xc4>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	e001      	b.n	800647a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800647a:	697b      	ldr	r3, [r7, #20]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20001da8 	.word	0x20001da8
 8006488:	20001d88 	.word	0x20001d88
 800648c:	200018b0 	.word	0x200018b0
 8006490:	20001d40 	.word	0x20001d40
 8006494:	200018ac 	.word	0x200018ac
 8006498:	20001d94 	.word	0x20001d94

0800649c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <vTaskInternalSetTimeOutState+0x24>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <vTaskInternalSetTimeOutState+0x28>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20001d98 	.word	0x20001d98
 80064c4:	20001d84 	.word	0x20001d84

080064c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	613b      	str	r3, [r7, #16]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60fb      	str	r3, [r7, #12]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800650e:	f000 ff93 	bl	8007438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006512:	4b1d      	ldr	r3, [pc, #116]	@ (8006588 <xTaskCheckForTimeOut+0xc0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800652a:	d102      	bne.n	8006532 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	e023      	b.n	800657a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b15      	ldr	r3, [pc, #84]	@ (800658c <xTaskCheckForTimeOut+0xc4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d007      	beq.n	800654e <xTaskCheckForTimeOut+0x86>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	429a      	cmp	r2, r3
 8006546:	d302      	bcc.n	800654e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	e015      	b.n	800657a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	429a      	cmp	r2, r3
 8006556:	d20b      	bcs.n	8006570 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff99 	bl	800649c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800656a:	2300      	movs	r3, #0
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	e004      	b.n	800657a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006576:	2301      	movs	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800657a:	f000 ff8f 	bl	800749c <vPortExitCritical>

	return xReturn;
 800657e:	69fb      	ldr	r3, [r7, #28]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3720      	adds	r7, #32
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20001d84 	.word	0x20001d84
 800658c:	20001d98 	.word	0x20001d98

08006590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006594:	4b03      	ldr	r3, [pc, #12]	@ (80065a4 <vTaskMissedYield+0x14>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
}
 800659a:	bf00      	nop
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20001d94 	.word	0x20001d94

080065a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065b0:	f000 f852 	bl	8006658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065b4:	4b06      	ldr	r3, [pc, #24]	@ (80065d0 <prvIdleTask+0x28>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d9f9      	bls.n	80065b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <prvIdleTask+0x2c>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065cc:	e7f0      	b.n	80065b0 <prvIdleTask+0x8>
 80065ce:	bf00      	nop
 80065d0:	200018b0 	.word	0x200018b0
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	e00c      	b.n	80065fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4a12      	ldr	r2, [pc, #72]	@ (8006638 <prvInitialiseTaskLists+0x60>)
 80065f0:	4413      	add	r3, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe fa98 	bl	8004b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3301      	adds	r3, #1
 80065fc:	607b      	str	r3, [r7, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b37      	cmp	r3, #55	@ 0x37
 8006602:	d9ef      	bls.n	80065e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006604:	480d      	ldr	r0, [pc, #52]	@ (800663c <prvInitialiseTaskLists+0x64>)
 8006606:	f7fe fa8f 	bl	8004b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800660a:	480d      	ldr	r0, [pc, #52]	@ (8006640 <prvInitialiseTaskLists+0x68>)
 800660c:	f7fe fa8c 	bl	8004b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006610:	480c      	ldr	r0, [pc, #48]	@ (8006644 <prvInitialiseTaskLists+0x6c>)
 8006612:	f7fe fa89 	bl	8004b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006616:	480c      	ldr	r0, [pc, #48]	@ (8006648 <prvInitialiseTaskLists+0x70>)
 8006618:	f7fe fa86 	bl	8004b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800661c:	480b      	ldr	r0, [pc, #44]	@ (800664c <prvInitialiseTaskLists+0x74>)
 800661e:	f7fe fa83 	bl	8004b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006622:	4b0b      	ldr	r3, [pc, #44]	@ (8006650 <prvInitialiseTaskLists+0x78>)
 8006624:	4a05      	ldr	r2, [pc, #20]	@ (800663c <prvInitialiseTaskLists+0x64>)
 8006626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006628:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <prvInitialiseTaskLists+0x7c>)
 800662a:	4a05      	ldr	r2, [pc, #20]	@ (8006640 <prvInitialiseTaskLists+0x68>)
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200018b0 	.word	0x200018b0
 800663c:	20001d10 	.word	0x20001d10
 8006640:	20001d24 	.word	0x20001d24
 8006644:	20001d40 	.word	0x20001d40
 8006648:	20001d54 	.word	0x20001d54
 800664c:	20001d6c 	.word	0x20001d6c
 8006650:	20001d38 	.word	0x20001d38
 8006654:	20001d3c 	.word	0x20001d3c

08006658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800665e:	e019      	b.n	8006694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006660:	f000 feea 	bl	8007438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006664:	4b10      	ldr	r3, [pc, #64]	@ (80066a8 <prvCheckTasksWaitingTermination+0x50>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe fae3 	bl	8004c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <prvCheckTasksWaitingTermination+0x54>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3b01      	subs	r3, #1
 800667c:	4a0b      	ldr	r2, [pc, #44]	@ (80066ac <prvCheckTasksWaitingTermination+0x54>)
 800667e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006680:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <prvCheckTasksWaitingTermination+0x58>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3b01      	subs	r3, #1
 8006686:	4a0a      	ldr	r2, [pc, #40]	@ (80066b0 <prvCheckTasksWaitingTermination+0x58>)
 8006688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800668a:	f000 ff07 	bl	800749c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f810 	bl	80066b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006694:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <prvCheckTasksWaitingTermination+0x58>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e1      	bne.n	8006660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20001d54 	.word	0x20001d54
 80066ac:	20001d80 	.word	0x20001d80
 80066b0:	20001d68 	.word	0x20001d68

080066b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3354      	adds	r3, #84	@ 0x54
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 ff63 	bl	800858c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f89f 	bl	8007818 <vPortFree>
				vPortFree( pxTCB );
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f89c 	bl	8007818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066e0:	e019      	b.n	8006716 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d103      	bne.n	80066f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 f893 	bl	8007818 <vPortFree>
	}
 80066f2:	e010      	b.n	8006716 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d00b      	beq.n	8006716 <prvDeleteTCB+0x62>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60fb      	str	r3, [r7, #12]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <prvDeleteTCB+0x5e>
	}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006726:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <prvResetNextTaskUnblockTime+0x38>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006730:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <prvResetNextTaskUnblockTime+0x3c>)
 8006732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006738:	e008      	b.n	800674c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800673a:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <prvResetNextTaskUnblockTime+0x38>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a04      	ldr	r2, [pc, #16]	@ (800675c <prvResetNextTaskUnblockTime+0x3c>)
 800674a:	6013      	str	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	20001d38 	.word	0x20001d38
 800675c:	20001da0 	.word	0x20001da0

08006760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006766:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <xTaskGetSchedulerState+0x34>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800676e:	2301      	movs	r3, #1
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	e008      	b.n	8006786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006774:	4b08      	ldr	r3, [pc, #32]	@ (8006798 <xTaskGetSchedulerState+0x38>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800677c:	2302      	movs	r3, #2
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	e001      	b.n	8006786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006782:	2300      	movs	r3, #0
 8006784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006786:	687b      	ldr	r3, [r7, #4]
	}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	20001d8c 	.word	0x20001d8c
 8006798:	20001da8 	.word	0x20001da8

0800679c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d051      	beq.n	8006856 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006860 <xTaskPriorityInherit+0xc4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	429a      	cmp	r2, r3
 80067be:	d241      	bcs.n	8006844 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	db06      	blt.n	80067d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c8:	4b25      	ldr	r3, [pc, #148]	@ (8006860 <xTaskPriorityInherit+0xc4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006864 <xTaskPriorityInherit+0xc8>)
 80067e8:	4413      	add	r3, r2
 80067ea:	4299      	cmp	r1, r3
 80067ec:	d122      	bne.n	8006834 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fa22 	bl	8004c3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067f8:	4b19      	ldr	r3, [pc, #100]	@ (8006860 <xTaskPriorityInherit+0xc4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	4b18      	ldr	r3, [pc, #96]	@ (8006868 <xTaskPriorityInherit+0xcc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d903      	bls.n	8006816 <xTaskPriorityInherit+0x7a>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	4a15      	ldr	r2, [pc, #84]	@ (8006868 <xTaskPriorityInherit+0xcc>)
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4a10      	ldr	r2, [pc, #64]	@ (8006864 <xTaskPriorityInherit+0xc8>)
 8006824:	441a      	add	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	3304      	adds	r3, #4
 800682a:	4619      	mov	r1, r3
 800682c:	4610      	mov	r0, r2
 800682e:	f7fe f9a8 	bl	8004b82 <vListInsertEnd>
 8006832:	e004      	b.n	800683e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006834:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <xTaskPriorityInherit+0xc4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800683e:	2301      	movs	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e008      	b.n	8006856 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <xTaskPriorityInherit+0xc4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	429a      	cmp	r2, r3
 8006850:	d201      	bcs.n	8006856 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006852:	2301      	movs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006856:	68fb      	ldr	r3, [r7, #12]
	}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200018ac 	.word	0x200018ac
 8006864:	200018b0 	.word	0x200018b0
 8006868:	20001d88 	.word	0x20001d88

0800686c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d058      	beq.n	8006934 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006882:	4b2f      	ldr	r3, [pc, #188]	@ (8006940 <xTaskPriorityDisinherit+0xd4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	429a      	cmp	r2, r3
 800688a:	d00b      	beq.n	80068a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60fb      	str	r3, [r7, #12]
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	e7fd      	b.n	80068a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60bb      	str	r3, [r7, #8]
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068c8:	1e5a      	subs	r2, r3, #1
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d02c      	beq.n	8006934 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d128      	bne.n	8006934 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe f9a8 	bl	8004c3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006904:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <xTaskPriorityDisinherit+0xd8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d903      	bls.n	8006914 <xTaskPriorityDisinherit+0xa8>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	4a0c      	ldr	r2, [pc, #48]	@ (8006944 <xTaskPriorityDisinherit+0xd8>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a09      	ldr	r2, [pc, #36]	@ (8006948 <xTaskPriorityDisinherit+0xdc>)
 8006922:	441a      	add	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7fe f929 	bl	8004b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006934:	697b      	ldr	r3, [r7, #20]
	}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	200018ac 	.word	0x200018ac
 8006944:	20001d88 	.word	0x20001d88
 8006948:	200018b0 	.word	0x200018b0

0800694c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800695a:	2301      	movs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d06c      	beq.n	8006a3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d902      	bls.n	8006994 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	e002      	b.n	800699a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006998:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d04c      	beq.n	8006a3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d147      	bne.n	8006a3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069ae:	4b26      	ldr	r3, [pc, #152]	@ (8006a48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d10b      	bne.n	80069d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	60bb      	str	r3, [r7, #8]
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db04      	blt.n	80069ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4a13      	ldr	r2, [pc, #76]	@ (8006a4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069fe:	4413      	add	r3, r2
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d11c      	bne.n	8006a3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe f917 	bl	8004c3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a12:	4b0f      	ldr	r3, [pc, #60]	@ (8006a50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d903      	bls.n	8006a22 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a07      	ldr	r2, [pc, #28]	@ (8006a4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006a30:	441a      	add	r2, r3
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7fe f8a2 	bl	8004b82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a3e:	bf00      	nop
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200018ac 	.word	0x200018ac
 8006a4c:	200018b0 	.word	0x200018b0
 8006a50:	20001d88 	.word	0x20001d88

08006a54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a58:	4b07      	ldr	r3, [pc, #28]	@ (8006a78 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a66:	3201      	adds	r2, #1
 8006a68:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006a6a:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
	}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	200018ac 	.word	0x200018ac

08006a7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a86:	4b21      	ldr	r3, [pc, #132]	@ (8006b0c <prvAddCurrentTaskToDelayedList+0x90>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a8c:	4b20      	ldr	r3, [pc, #128]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe f8d2 	bl	8004c3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a9e:	d10a      	bne.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4819      	ldr	r0, [pc, #100]	@ (8006b14 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ab0:	f7fe f867 	bl	8004b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ab4:	e026      	b.n	8006b04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4413      	add	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006abe:	4b14      	ldr	r3, [pc, #80]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d209      	bcs.n	8006ae2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ace:	4b12      	ldr	r3, [pc, #72]	@ (8006b18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fe f875 	bl	8004bca <vListInsert>
}
 8006ae0:	e010      	b.n	8006b04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe f86b 	bl	8004bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006af4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d202      	bcs.n	8006b04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006afe:	4a08      	ldr	r2, [pc, #32]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6013      	str	r3, [r2, #0]
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20001d84 	.word	0x20001d84
 8006b10:	200018ac 	.word	0x200018ac
 8006b14:	20001d6c 	.word	0x20001d6c
 8006b18:	20001d3c 	.word	0x20001d3c
 8006b1c:	20001d38 	.word	0x20001d38
 8006b20:	20001da0 	.word	0x20001da0

08006b24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	@ 0x28
 8006b28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b2e:	f000 fb13 	bl	8007158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba8 <xTimerCreateTimerTask+0x84>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d021      	beq.n	8006b7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b42:	1d3a      	adds	r2, r7, #4
 8006b44:	f107 0108 	add.w	r1, r7, #8
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fd ffd1 	bl	8004af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	9202      	str	r2, [sp, #8]
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	460a      	mov	r2, r1
 8006b64:	4911      	ldr	r1, [pc, #68]	@ (8006bac <xTimerCreateTimerTask+0x88>)
 8006b66:	4812      	ldr	r0, [pc, #72]	@ (8006bb0 <xTimerCreateTimerTask+0x8c>)
 8006b68:	f7fe ff22 	bl	80059b0 <xTaskCreateStatic>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4a11      	ldr	r2, [pc, #68]	@ (8006bb4 <xTimerCreateTimerTask+0x90>)
 8006b70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b72:	4b10      	ldr	r3, [pc, #64]	@ (8006bb4 <xTimerCreateTimerTask+0x90>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10b      	bne.n	8006b9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	613b      	str	r3, [r7, #16]
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	e7fd      	b.n	8006b98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b9c:	697b      	ldr	r3, [r7, #20]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20001ddc 	.word	0x20001ddc
 8006bac:	0800ba10 	.word	0x0800ba10
 8006bb0:	08006cf1 	.word	0x08006cf1
 8006bb4:	20001de0 	.word	0x20001de0

08006bb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	@ 0x28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	623b      	str	r3, [r7, #32]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006be8:	4b19      	ldr	r3, [pc, #100]	@ (8006c50 <xTimerGenericCommand+0x98>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02a      	beq.n	8006c46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	dc18      	bgt.n	8006c34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c02:	f7ff fdad 	bl	8006760 <xTaskGetSchedulerState>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d109      	bne.n	8006c20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c0c:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <xTimerGenericCommand+0x98>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	f107 0110 	add.w	r1, r7, #16
 8006c14:	2300      	movs	r3, #0
 8006c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c18:	f7fe f9b2 	bl	8004f80 <xQueueGenericSend>
 8006c1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c1e:	e012      	b.n	8006c46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c20:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <xTimerGenericCommand+0x98>)
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	f107 0110 	add.w	r1, r7, #16
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f7fe f9a8 	bl	8004f80 <xQueueGenericSend>
 8006c30:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c32:	e008      	b.n	8006c46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <xTimerGenericCommand+0x98>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	f107 0110 	add.w	r1, r7, #16
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	f7fe faa0 	bl	8005184 <xQueueGenericSendFromISR>
 8006c44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3728      	adds	r7, #40	@ 0x28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20001ddc 	.word	0x20001ddc

08006c54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c5e:	4b23      	ldr	r3, [pc, #140]	@ (8006cec <prvProcessExpiredTimer+0x98>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fd ffe5 	bl	8004c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d023      	beq.n	8006cc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	18d1      	adds	r1, r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	6978      	ldr	r0, [r7, #20]
 8006c8e:	f000 f8d5 	bl	8006e3c <prvInsertTimerInActiveList>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d020      	beq.n	8006cda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6978      	ldr	r0, [r7, #20]
 8006ca4:	f7ff ff88 	bl	8006bb8 <xTimerGenericCommand>
 8006ca8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d114      	bne.n	8006cda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	6978      	ldr	r0, [r7, #20]
 8006ce0:	4798      	blx	r3
}
 8006ce2:	bf00      	nop
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20001dd4 	.word	0x20001dd4

08006cf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cf8:	f107 0308 	add.w	r3, r7, #8
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f859 	bl	8006db4 <prvGetNextExpireTime>
 8006d02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4619      	mov	r1, r3
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f805 	bl	8006d18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d0e:	f000 f8d7 	bl	8006ec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d12:	bf00      	nop
 8006d14:	e7f0      	b.n	8006cf8 <prvTimerTask+0x8>
	...

08006d18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d22:	f7ff f929 	bl	8005f78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f866 	bl	8006dfc <prvSampleTimeNow>
 8006d30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d130      	bne.n	8006d9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <prvProcessTimerOrBlockTask+0x3c>
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d806      	bhi.n	8006d54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d46:	f7ff f925 	bl	8005f94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff81 	bl	8006c54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d52:	e024      	b.n	8006d9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d5a:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <prvProcessTimerOrBlockTask+0x90>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <prvProcessTimerOrBlockTask+0x50>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <prvProcessTimerOrBlockTask+0x52>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006dac <prvProcessTimerOrBlockTask+0x94>)
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f7fe fde5 	bl	8005948 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d7e:	f7ff f909 	bl	8005f94 <xTaskResumeAll>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <prvProcessTimerOrBlockTask+0x98>)
 8006d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	f3bf 8f6f 	isb	sy
}
 8006d98:	e001      	b.n	8006d9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d9a:	f7ff f8fb 	bl	8005f94 <xTaskResumeAll>
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20001dd8 	.word	0x20001dd8
 8006dac:	20001ddc 	.word	0x20001ddc
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <prvGetNextExpireTime+0x44>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <prvGetNextExpireTime+0x16>
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	e000      	b.n	8006dcc <prvGetNextExpireTime+0x18>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd8:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <prvGetNextExpireTime+0x44>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e001      	b.n	8006de8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006de8:	68fb      	ldr	r3, [r7, #12]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20001dd4 	.word	0x20001dd4

08006dfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e04:	f7ff f964 	bl	80060d0 <xTaskGetTickCount>
 8006e08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <prvSampleTimeNow+0x3c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d205      	bcs.n	8006e20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e14:	f000 f93a 	bl	800708c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e002      	b.n	8006e26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e26:	4a04      	ldr	r2, [pc, #16]	@ (8006e38 <prvSampleTimeNow+0x3c>)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20001de4 	.word	0x20001de4

08006e3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d812      	bhi.n	8006e88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	1ad2      	subs	r2, r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d302      	bcc.n	8006e76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e70:	2301      	movs	r3, #1
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e01b      	b.n	8006eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e76:	4b10      	ldr	r3, [pc, #64]	@ (8006eb8 <prvInsertTimerInActiveList+0x7c>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f7fd fea2 	bl	8004bca <vListInsert>
 8006e86:	e012      	b.n	8006eae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d206      	bcs.n	8006e9e <prvInsertTimerInActiveList+0x62>
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d302      	bcc.n	8006e9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e007      	b.n	8006eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e9e:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <prvInsertTimerInActiveList+0x80>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fd fe8e 	bl	8004bca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006eae:	697b      	ldr	r3, [r7, #20]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20001dd8 	.word	0x20001dd8
 8006ebc:	20001dd4 	.word	0x20001dd4

08006ec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08e      	sub	sp, #56	@ 0x38
 8006ec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ec6:	e0ce      	b.n	8007066 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da19      	bge.n	8006f02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ece:	1d3b      	adds	r3, r7, #4
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fb      	str	r3, [r7, #28]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef8:	6850      	ldr	r0, [r2, #4]
 8006efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006efc:	6892      	ldr	r2, [r2, #8]
 8006efe:	4611      	mov	r1, r2
 8006f00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f2c0 80ae 	blt.w	8007066 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fd fe8e 	bl	8004c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f20:	463b      	mov	r3, r7
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ff6a 	bl	8006dfc <prvSampleTimeNow>
 8006f28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b09      	cmp	r3, #9
 8006f2e:	f200 8097 	bhi.w	8007060 <prvProcessReceivedCommands+0x1a0>
 8006f32:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <prvProcessReceivedCommands+0x78>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f61 	.word	0x08006f61
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f61 	.word	0x08006f61
 8006f44:	08006fd7 	.word	0x08006fd7
 8006f48:	08006feb 	.word	0x08006feb
 8006f4c:	08007037 	.word	0x08007037
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f61 	.word	0x08006f61
 8006f58:	08006fd7 	.word	0x08006fd7
 8006f5c:	08006feb 	.word	0x08006feb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	18d1      	adds	r1, r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f80:	f7ff ff5c 	bl	8006e3c <prvInsertTimerInActiveList>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d06c      	beq.n	8007064 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d061      	beq.n	8007064 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	441a      	add	r2, r3
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	2300      	movs	r3, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fb2:	f7ff fe01 	bl	8006bb8 <xTimerGenericCommand>
 8006fb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d152      	bne.n	8007064 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	61bb      	str	r3, [r7, #24]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fe8:	e03d      	b.n	8007066 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ff0:	f043 0301 	orr.w	r3, r3, #1
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	617b      	str	r3, [r7, #20]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	18d1      	adds	r1, r2, r3
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007030:	f7ff ff04 	bl	8006e3c <prvInsertTimerInActiveList>
					break;
 8007034:	e017      	b.n	8007066 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007046:	f000 fbe7 	bl	8007818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800704a:	e00c      	b.n	8007066 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800705e:	e002      	b.n	8007066 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <prvProcessReceivedCommands+0x1a6>
					break;
 8007064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007066:	4b08      	ldr	r3, [pc, #32]	@ (8007088 <prvProcessReceivedCommands+0x1c8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1d39      	adds	r1, r7, #4
 800706c:	2200      	movs	r2, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe f926 	bl	80052c0 <xQueueReceive>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	f47f af26 	bne.w	8006ec8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	3730      	adds	r7, #48	@ 0x30
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20001ddc 	.word	0x20001ddc

0800708c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007092:	e049      	b.n	8007128 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007094:	4b2e      	ldr	r3, [pc, #184]	@ (8007150 <prvSwitchTimerLists+0xc4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	4b2c      	ldr	r3, [pc, #176]	@ (8007150 <prvSwitchTimerLists+0xc4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fd fdc5 	bl	8004c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d02f      	beq.n	8007128 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d90e      	bls.n	80070f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <prvSwitchTimerLists+0xc4>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7fd fd6a 	bl	8004bca <vListInsert>
 80070f6:	e017      	b.n	8007128 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	2100      	movs	r1, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fd58 	bl	8006bb8 <xTimerGenericCommand>
 8007108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	603b      	str	r3, [r7, #0]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007128:	4b09      	ldr	r3, [pc, #36]	@ (8007150 <prvSwitchTimerLists+0xc4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1b0      	bne.n	8007094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007132:	4b07      	ldr	r3, [pc, #28]	@ (8007150 <prvSwitchTimerLists+0xc4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <prvSwitchTimerLists+0xc8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a04      	ldr	r2, [pc, #16]	@ (8007150 <prvSwitchTimerLists+0xc4>)
 800713e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007140:	4a04      	ldr	r2, [pc, #16]	@ (8007154 <prvSwitchTimerLists+0xc8>)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	6013      	str	r3, [r2, #0]
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20001dd4 	.word	0x20001dd4
 8007154:	20001dd8 	.word	0x20001dd8

08007158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800715e:	f000 f96b 	bl	8007438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007162:	4b15      	ldr	r3, [pc, #84]	@ (80071b8 <prvCheckForValidListAndQueue+0x60>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d120      	bne.n	80071ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800716a:	4814      	ldr	r0, [pc, #80]	@ (80071bc <prvCheckForValidListAndQueue+0x64>)
 800716c:	f7fd fcdc 	bl	8004b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007170:	4813      	ldr	r0, [pc, #76]	@ (80071c0 <prvCheckForValidListAndQueue+0x68>)
 8007172:	f7fd fcd9 	bl	8004b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007176:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <prvCheckForValidListAndQueue+0x6c>)
 8007178:	4a10      	ldr	r2, [pc, #64]	@ (80071bc <prvCheckForValidListAndQueue+0x64>)
 800717a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800717c:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <prvCheckForValidListAndQueue+0x70>)
 800717e:	4a10      	ldr	r2, [pc, #64]	@ (80071c0 <prvCheckForValidListAndQueue+0x68>)
 8007180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007182:	2300      	movs	r3, #0
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4b11      	ldr	r3, [pc, #68]	@ (80071cc <prvCheckForValidListAndQueue+0x74>)
 8007188:	4a11      	ldr	r2, [pc, #68]	@ (80071d0 <prvCheckForValidListAndQueue+0x78>)
 800718a:	2110      	movs	r1, #16
 800718c:	200a      	movs	r0, #10
 800718e:	f7fd fde9 	bl	8004d64 <xQueueGenericCreateStatic>
 8007192:	4603      	mov	r3, r0
 8007194:	4a08      	ldr	r2, [pc, #32]	@ (80071b8 <prvCheckForValidListAndQueue+0x60>)
 8007196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007198:	4b07      	ldr	r3, [pc, #28]	@ (80071b8 <prvCheckForValidListAndQueue+0x60>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071a0:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <prvCheckForValidListAndQueue+0x60>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	490b      	ldr	r1, [pc, #44]	@ (80071d4 <prvCheckForValidListAndQueue+0x7c>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fba4 	bl	80058f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071ac:	f000 f976 	bl	800749c <vPortExitCritical>
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20001ddc 	.word	0x20001ddc
 80071bc:	20001dac 	.word	0x20001dac
 80071c0:	20001dc0 	.word	0x20001dc0
 80071c4:	20001dd4 	.word	0x20001dd4
 80071c8:	20001dd8 	.word	0x20001dd8
 80071cc:	20001e88 	.word	0x20001e88
 80071d0:	20001de8 	.word	0x20001de8
 80071d4:	0800ba18 	.word	0x0800ba18

080071d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3b04      	subs	r3, #4
 80071e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3b04      	subs	r3, #4
 8007206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007208:	4a0c      	ldr	r2, [pc, #48]	@ (800723c <pxPortInitialiseStack+0x64>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3b14      	subs	r3, #20
 8007212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3b04      	subs	r3, #4
 800721e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f06f 0202 	mvn.w	r2, #2
 8007226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3b20      	subs	r3, #32
 800722c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	08007241 	.word	0x08007241

08007240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800724a:	4b13      	ldr	r3, [pc, #76]	@ (8007298 <prvTaskExitError+0x58>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007252:	d00b      	beq.n	800726c <prvTaskExitError+0x2c>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <prvTaskExitError+0x28>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60bb      	str	r3, [r7, #8]
}
 800727e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007280:	bf00      	nop
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0fc      	beq.n	8007282 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000e24 	.word	0x20000e24
 800729c:	00000000 	.word	0x00000000

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	@ (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	200018ac 	.word	0x200018ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072c8:	4808      	ldr	r0, [pc, #32]	@ (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ea:	bf00      	nop
 80072ec:	e000ed08 	.word	0xe000ed08

080072f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072f6:	4b47      	ldr	r3, [pc, #284]	@ (8007414 <xPortStartScheduler+0x124>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a47      	ldr	r2, [pc, #284]	@ (8007418 <xPortStartScheduler+0x128>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10b      	bne.n	8007318 <xPortStartScheduler+0x28>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007318:	4b3e      	ldr	r3, [pc, #248]	@ (8007414 <xPortStartScheduler+0x124>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3f      	ldr	r2, [pc, #252]	@ (800741c <xPortStartScheduler+0x12c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d10b      	bne.n	800733a <xPortStartScheduler+0x4a>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	e7fd      	b.n	8007336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <xPortStartScheduler+0x130>)
 800733c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	22ff      	movs	r2, #255	@ 0xff
 800734a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800735c:	b2da      	uxtb	r2, r3
 800735e:	4b31      	ldr	r3, [pc, #196]	@ (8007424 <xPortStartScheduler+0x134>)
 8007360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007362:	4b31      	ldr	r3, [pc, #196]	@ (8007428 <xPortStartScheduler+0x138>)
 8007364:	2207      	movs	r2, #7
 8007366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007368:	e009      	b.n	800737e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800736a:	4b2f      	ldr	r3, [pc, #188]	@ (8007428 <xPortStartScheduler+0x138>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3b01      	subs	r3, #1
 8007370:	4a2d      	ldr	r2, [pc, #180]	@ (8007428 <xPortStartScheduler+0x138>)
 8007372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007386:	2b80      	cmp	r3, #128	@ 0x80
 8007388:	d0ef      	beq.n	800736a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <xPortStartScheduler+0x138>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1c3 0307 	rsb	r3, r3, #7
 8007392:	2b04      	cmp	r3, #4
 8007394:	d00b      	beq.n	80073ae <xPortStartScheduler+0xbe>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60bb      	str	r3, [r7, #8]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007428 <xPortStartScheduler+0x138>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007428 <xPortStartScheduler+0x138>)
 80073b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007428 <xPortStartScheduler+0x138>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073c0:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <xPortStartScheduler+0x138>)
 80073c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073cc:	4b17      	ldr	r3, [pc, #92]	@ (800742c <xPortStartScheduler+0x13c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a16      	ldr	r2, [pc, #88]	@ (800742c <xPortStartScheduler+0x13c>)
 80073d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073d8:	4b14      	ldr	r3, [pc, #80]	@ (800742c <xPortStartScheduler+0x13c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a13      	ldr	r2, [pc, #76]	@ (800742c <xPortStartScheduler+0x13c>)
 80073de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073e4:	f000 f8da 	bl	800759c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073e8:	4b11      	ldr	r3, [pc, #68]	@ (8007430 <xPortStartScheduler+0x140>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073ee:	f000 f8f9 	bl	80075e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073f2:	4b10      	ldr	r3, [pc, #64]	@ (8007434 <xPortStartScheduler+0x144>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007434 <xPortStartScheduler+0x144>)
 80073f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073fe:	f7ff ff63 	bl	80072c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007402:	f7fe ff2f 	bl	8006264 <vTaskSwitchContext>
	prvTaskExitError();
 8007406:	f7ff ff1b 	bl	8007240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	e000ed00 	.word	0xe000ed00
 8007418:	410fc271 	.word	0x410fc271
 800741c:	410fc270 	.word	0x410fc270
 8007420:	e000e400 	.word	0xe000e400
 8007424:	20001ed8 	.word	0x20001ed8
 8007428:	20001edc 	.word	0x20001edc
 800742c:	e000ed20 	.word	0xe000ed20
 8007430:	20000e24 	.word	0x20000e24
 8007434:	e000ef34 	.word	0xe000ef34

08007438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007452:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <vPortEnterCritical+0x5c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3301      	adds	r3, #1
 8007458:	4a0e      	ldr	r2, [pc, #56]	@ (8007494 <vPortEnterCritical+0x5c>)
 800745a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <vPortEnterCritical+0x5c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d110      	bne.n	8007486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007464:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <vPortEnterCritical+0x60>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <vPortEnterCritical+0x4e>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	603b      	str	r3, [r7, #0]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <vPortEnterCritical+0x4a>
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000e24 	.word	0x20000e24
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074a2:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <vPortExitCritical+0x50>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10b      	bne.n	80074c2 <vPortExitCritical+0x26>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	607b      	str	r3, [r7, #4]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <vPortExitCritical+0x50>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <vPortExitCritical+0x50>)
 80074ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <vPortExitCritical+0x50>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <vPortExitCritical+0x44>
 80074d4:	2300      	movs	r3, #0
 80074d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f383 8811 	msr	BASEPRI, r3
}
 80074de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000e24 	.word	0x20000e24

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	@ (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7fe fea0 	bl	8006264 <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	200018ac 	.word	0x200018ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7fe fdbd 	bl	80060f0 <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <xPortSysTickHandler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	@ (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	@ (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <vPortSetupTimerInterrupt+0x44>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010
 80075d4:	e000e018 	.word	0xe000e018
 80075d8:	20000e18 	.word	0x20000e18
 80075dc:	10624dd3 	.word	0x10624dd3
 80075e0:	e000e014 	.word	0xe000e014

080075e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075f4 <vPortEnableVFP+0x10>
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075ee:	6001      	str	r1, [r0, #0]
 80075f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075f2:	bf00      	nop
 80075f4:	e000ed88 	.word	0xe000ed88

080075f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075fe:	f3ef 8305 	mrs	r3, IPSR
 8007602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d915      	bls.n	8007636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800760a:	4a18      	ldr	r2, [pc, #96]	@ (800766c <vPortValidateInterruptPriority+0x74>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007614:	4b16      	ldr	r3, [pc, #88]	@ (8007670 <vPortValidateInterruptPriority+0x78>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	7afa      	ldrb	r2, [r7, #11]
 800761a:	429a      	cmp	r2, r3
 800761c:	d20b      	bcs.n	8007636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007636:	4b0f      	ldr	r3, [pc, #60]	@ (8007674 <vPortValidateInterruptPriority+0x7c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800763e:	4b0e      	ldr	r3, [pc, #56]	@ (8007678 <vPortValidateInterruptPriority+0x80>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d90b      	bls.n	800765e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	603b      	str	r3, [r7, #0]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <vPortValidateInterruptPriority+0x62>
	}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	e000e3f0 	.word	0xe000e3f0
 8007670:	20001ed8 	.word	0x20001ed8
 8007674:	e000ed0c 	.word	0xe000ed0c
 8007678:	20001edc 	.word	0x20001edc

0800767c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	@ 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007688:	f7fe fc76 	bl	8005f78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800768c:	4b5c      	ldr	r3, [pc, #368]	@ (8007800 <pvPortMalloc+0x184>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007694:	f000 f924 	bl	80078e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007698:	4b5a      	ldr	r3, [pc, #360]	@ (8007804 <pvPortMalloc+0x188>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 8095 	bne.w	80077d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01e      	beq.n	80076ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80076ac:	2208      	movs	r2, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4413      	add	r3, r2
 80076b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d015      	beq.n	80076ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f023 0307 	bic.w	r3, r3, #7
 80076c4:	3308      	adds	r3, #8
 80076c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <pvPortMalloc+0x6e>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	617b      	str	r3, [r7, #20]
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop
 80076e8:	e7fd      	b.n	80076e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d06f      	beq.n	80077d0 <pvPortMalloc+0x154>
 80076f0:	4b45      	ldr	r3, [pc, #276]	@ (8007808 <pvPortMalloc+0x18c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d86a      	bhi.n	80077d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076fa:	4b44      	ldr	r3, [pc, #272]	@ (800780c <pvPortMalloc+0x190>)
 80076fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076fe:	4b43      	ldr	r3, [pc, #268]	@ (800780c <pvPortMalloc+0x190>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007704:	e004      	b.n	8007710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d903      	bls.n	8007722 <pvPortMalloc+0xa6>
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f1      	bne.n	8007706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007722:	4b37      	ldr	r3, [pc, #220]	@ (8007800 <pvPortMalloc+0x184>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007728:	429a      	cmp	r2, r3
 800772a:	d051      	beq.n	80077d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2208      	movs	r2, #8
 8007732:	4413      	add	r3, r2
 8007734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	1ad2      	subs	r2, r2, r3
 8007746:	2308      	movs	r3, #8
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	429a      	cmp	r2, r3
 800774c:	d920      	bls.n	8007790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800774e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4413      	add	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <pvPortMalloc+0xfc>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800778a:	69b8      	ldr	r0, [r7, #24]
 800778c:	f000 f90a 	bl	80079a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007790:	4b1d      	ldr	r3, [pc, #116]	@ (8007808 <pvPortMalloc+0x18c>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <pvPortMalloc+0x18c>)
 800779c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800779e:	4b1a      	ldr	r3, [pc, #104]	@ (8007808 <pvPortMalloc+0x18c>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007810 <pvPortMalloc+0x194>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d203      	bcs.n	80077b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077aa:	4b17      	ldr	r3, [pc, #92]	@ (8007808 <pvPortMalloc+0x18c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a18      	ldr	r2, [pc, #96]	@ (8007810 <pvPortMalloc+0x194>)
 80077b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	4b13      	ldr	r3, [pc, #76]	@ (8007804 <pvPortMalloc+0x188>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077c6:	4b13      	ldr	r3, [pc, #76]	@ (8007814 <pvPortMalloc+0x198>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	4a11      	ldr	r2, [pc, #68]	@ (8007814 <pvPortMalloc+0x198>)
 80077ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077d0:	f7fe fbe0 	bl	8005f94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <pvPortMalloc+0x17a>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60fb      	str	r3, [r7, #12]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <pvPortMalloc+0x176>
	return pvReturn;
 80077f6:	69fb      	ldr	r3, [r7, #28]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3728      	adds	r7, #40	@ 0x28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20005ae8 	.word	0x20005ae8
 8007804:	20005afc 	.word	0x20005afc
 8007808:	20005aec 	.word	0x20005aec
 800780c:	20005ae0 	.word	0x20005ae0
 8007810:	20005af0 	.word	0x20005af0
 8007814:	20005af4 	.word	0x20005af4

08007818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d04f      	beq.n	80078ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800782a:	2308      	movs	r3, #8
 800782c:	425b      	negs	r3, r3
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4413      	add	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	4b25      	ldr	r3, [pc, #148]	@ (80078d4 <vPortFree+0xbc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4013      	ands	r3, r2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <vPortFree+0x46>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60fb      	str	r3, [r7, #12]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <vPortFree+0x66>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60bb      	str	r3, [r7, #8]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <vPortFree+0xbc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4013      	ands	r3, r2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01e      	beq.n	80078ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11a      	bne.n	80078ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <vPortFree+0xbc>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	43db      	mvns	r3, r3
 800789e:	401a      	ands	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078a4:	f7fe fb68 	bl	8005f78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <vPortFree+0xc0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4413      	add	r3, r2
 80078b2:	4a09      	ldr	r2, [pc, #36]	@ (80078d8 <vPortFree+0xc0>)
 80078b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078b6:	6938      	ldr	r0, [r7, #16]
 80078b8:	f000 f874 	bl	80079a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <vPortFree+0xc4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	4a06      	ldr	r2, [pc, #24]	@ (80078dc <vPortFree+0xc4>)
 80078c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078c6:	f7fe fb65 	bl	8005f94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ca:	bf00      	nop
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20005afc 	.word	0x20005afc
 80078d8:	20005aec 	.word	0x20005aec
 80078dc:	20005af8 	.word	0x20005af8

080078e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80078ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078ec:	4b27      	ldr	r3, [pc, #156]	@ (800798c <prvHeapInit+0xac>)
 80078ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3307      	adds	r3, #7
 80078fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	4a1f      	ldr	r2, [pc, #124]	@ (800798c <prvHeapInit+0xac>)
 8007910:	4413      	add	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007918:	4a1d      	ldr	r2, [pc, #116]	@ (8007990 <prvHeapInit+0xb0>)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800791e:	4b1c      	ldr	r3, [pc, #112]	@ (8007990 <prvHeapInit+0xb0>)
 8007920:	2200      	movs	r2, #0
 8007922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	4413      	add	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800792c:	2208      	movs	r2, #8
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a15      	ldr	r2, [pc, #84]	@ (8007994 <prvHeapInit+0xb4>)
 8007940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007942:	4b14      	ldr	r3, [pc, #80]	@ (8007994 <prvHeapInit+0xb4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800794a:	4b12      	ldr	r3, [pc, #72]	@ (8007994 <prvHeapInit+0xb4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007960:	4b0c      	ldr	r3, [pc, #48]	@ (8007994 <prvHeapInit+0xb4>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a0a      	ldr	r2, [pc, #40]	@ (8007998 <prvHeapInit+0xb8>)
 800796e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4a09      	ldr	r2, [pc, #36]	@ (800799c <prvHeapInit+0xbc>)
 8007976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007978:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <prvHeapInit+0xc0>)
 800797a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800797e:	601a      	str	r2, [r3, #0]
}
 8007980:	bf00      	nop
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20001ee0 	.word	0x20001ee0
 8007990:	20005ae0 	.word	0x20005ae0
 8007994:	20005ae8 	.word	0x20005ae8
 8007998:	20005af0 	.word	0x20005af0
 800799c:	20005aec 	.word	0x20005aec
 80079a0:	20005afc 	.word	0x20005afc

080079a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079ac:	4b28      	ldr	r3, [pc, #160]	@ (8007a50 <prvInsertBlockIntoFreeList+0xac>)
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e002      	b.n	80079b8 <prvInsertBlockIntoFreeList+0x14>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d8f7      	bhi.n	80079b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4413      	add	r3, r2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d108      	bne.n	80079e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	441a      	add	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d118      	bne.n	8007a2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4b15      	ldr	r3, [pc, #84]	@ (8007a54 <prvInsertBlockIntoFreeList+0xb0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d00d      	beq.n	8007a22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e008      	b.n	8007a34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a22:	4b0c      	ldr	r3, [pc, #48]	@ (8007a54 <prvInsertBlockIntoFreeList+0xb0>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e003      	b.n	8007a34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d002      	beq.n	8007a42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20005ae0 	.word	0x20005ae0
 8007a54:	20005ae8 	.word	0x20005ae8

08007a58 <__cvt>:
 8007a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	ec57 6b10 	vmov	r6, r7, d0
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	460c      	mov	r4, r1
 8007a64:	4619      	mov	r1, r3
 8007a66:	463b      	mov	r3, r7
 8007a68:	bfbb      	ittet	lt
 8007a6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a6e:	461f      	movlt	r7, r3
 8007a70:	2300      	movge	r3, #0
 8007a72:	232d      	movlt	r3, #45	@ 0x2d
 8007a74:	700b      	strb	r3, [r1, #0]
 8007a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a7c:	4691      	mov	r9, r2
 8007a7e:	f023 0820 	bic.w	r8, r3, #32
 8007a82:	bfbc      	itt	lt
 8007a84:	4632      	movlt	r2, r6
 8007a86:	4616      	movlt	r6, r2
 8007a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a8c:	d005      	beq.n	8007a9a <__cvt+0x42>
 8007a8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a92:	d100      	bne.n	8007a96 <__cvt+0x3e>
 8007a94:	3401      	adds	r4, #1
 8007a96:	2102      	movs	r1, #2
 8007a98:	e000      	b.n	8007a9c <__cvt+0x44>
 8007a9a:	2103      	movs	r1, #3
 8007a9c:	ab03      	add	r3, sp, #12
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	ab02      	add	r3, sp, #8
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	ec47 6b10 	vmov	d0, r6, r7
 8007aa8:	4653      	mov	r3, sl
 8007aaa:	4622      	mov	r2, r4
 8007aac:	f000 fec0 	bl	8008830 <_dtoa_r>
 8007ab0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	d119      	bne.n	8007aec <__cvt+0x94>
 8007ab8:	f019 0f01 	tst.w	r9, #1
 8007abc:	d00e      	beq.n	8007adc <__cvt+0x84>
 8007abe:	eb00 0904 	add.w	r9, r0, r4
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f9 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ace:	b108      	cbz	r0, 8007ad4 <__cvt+0x7c>
 8007ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ad4:	2230      	movs	r2, #48	@ 0x30
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	454b      	cmp	r3, r9
 8007ada:	d31e      	bcc.n	8007b1a <__cvt+0xc2>
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ae0:	1b5b      	subs	r3, r3, r5
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	b004      	add	sp, #16
 8007ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007af0:	eb00 0904 	add.w	r9, r0, r4
 8007af4:	d1e5      	bne.n	8007ac2 <__cvt+0x6a>
 8007af6:	7803      	ldrb	r3, [r0, #0]
 8007af8:	2b30      	cmp	r3, #48	@ 0x30
 8007afa:	d10a      	bne.n	8007b12 <__cvt+0xba>
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b08:	b918      	cbnz	r0, 8007b12 <__cvt+0xba>
 8007b0a:	f1c4 0401 	rsb	r4, r4, #1
 8007b0e:	f8ca 4000 	str.w	r4, [sl]
 8007b12:	f8da 3000 	ldr.w	r3, [sl]
 8007b16:	4499      	add	r9, r3
 8007b18:	e7d3      	b.n	8007ac2 <__cvt+0x6a>
 8007b1a:	1c59      	adds	r1, r3, #1
 8007b1c:	9103      	str	r1, [sp, #12]
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e7d9      	b.n	8007ad6 <__cvt+0x7e>

08007b22 <__exponent>:
 8007b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b24:	2900      	cmp	r1, #0
 8007b26:	bfba      	itte	lt
 8007b28:	4249      	neglt	r1, r1
 8007b2a:	232d      	movlt	r3, #45	@ 0x2d
 8007b2c:	232b      	movge	r3, #43	@ 0x2b
 8007b2e:	2909      	cmp	r1, #9
 8007b30:	7002      	strb	r2, [r0, #0]
 8007b32:	7043      	strb	r3, [r0, #1]
 8007b34:	dd29      	ble.n	8007b8a <__exponent+0x68>
 8007b36:	f10d 0307 	add.w	r3, sp, #7
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	270a      	movs	r7, #10
 8007b3e:	461a      	mov	r2, r3
 8007b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b44:	fb07 1416 	mls	r4, r7, r6, r1
 8007b48:	3430      	adds	r4, #48	@ 0x30
 8007b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b4e:	460c      	mov	r4, r1
 8007b50:	2c63      	cmp	r4, #99	@ 0x63
 8007b52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007b56:	4631      	mov	r1, r6
 8007b58:	dcf1      	bgt.n	8007b3e <__exponent+0x1c>
 8007b5a:	3130      	adds	r1, #48	@ 0x30
 8007b5c:	1e94      	subs	r4, r2, #2
 8007b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b62:	1c41      	adds	r1, r0, #1
 8007b64:	4623      	mov	r3, r4
 8007b66:	42ab      	cmp	r3, r5
 8007b68:	d30a      	bcc.n	8007b80 <__exponent+0x5e>
 8007b6a:	f10d 0309 	add.w	r3, sp, #9
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	42ac      	cmp	r4, r5
 8007b72:	bf88      	it	hi
 8007b74:	2300      	movhi	r3, #0
 8007b76:	3302      	adds	r3, #2
 8007b78:	4403      	add	r3, r0
 8007b7a:	1a18      	subs	r0, r3, r0
 8007b7c:	b003      	add	sp, #12
 8007b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b88:	e7ed      	b.n	8007b66 <__exponent+0x44>
 8007b8a:	2330      	movs	r3, #48	@ 0x30
 8007b8c:	3130      	adds	r1, #48	@ 0x30
 8007b8e:	7083      	strb	r3, [r0, #2]
 8007b90:	70c1      	strb	r1, [r0, #3]
 8007b92:	1d03      	adds	r3, r0, #4
 8007b94:	e7f1      	b.n	8007b7a <__exponent+0x58>
	...

08007b98 <_printf_float>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	b08d      	sub	sp, #52	@ 0x34
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	461f      	mov	r7, r3
 8007ba8:	4605      	mov	r5, r0
 8007baa:	f000 fcdb 	bl	8008564 <_localeconv_r>
 8007bae:	6803      	ldr	r3, [r0, #0]
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7f8 fb64 	bl	8000280 <strlen>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc0:	9005      	str	r0, [sp, #20]
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	f023 0307 	bic.w	r3, r3, #7
 8007bc8:	f103 0208 	add.w	r2, r3, #8
 8007bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8007bd4:	f8c8 2000 	str.w	r2, [r8]
 8007bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bee:	4b9c      	ldr	r3, [pc, #624]	@ (8007e60 <_printf_float+0x2c8>)
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bf4:	f7f8 ffa2 	bl	8000b3c <__aeabi_dcmpun>
 8007bf8:	bb70      	cbnz	r0, 8007c58 <_printf_float+0xc0>
 8007bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bfe:	4b98      	ldr	r3, [pc, #608]	@ (8007e60 <_printf_float+0x2c8>)
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c04:	f7f8 ff7c 	bl	8000b00 <__aeabi_dcmple>
 8007c08:	bb30      	cbnz	r0, 8007c58 <_printf_float+0xc0>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 ff6b 	bl	8000aec <__aeabi_dcmplt>
 8007c16:	b110      	cbz	r0, 8007c1e <_printf_float+0x86>
 8007c18:	232d      	movs	r3, #45	@ 0x2d
 8007c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c1e:	4a91      	ldr	r2, [pc, #580]	@ (8007e64 <_printf_float+0x2cc>)
 8007c20:	4b91      	ldr	r3, [pc, #580]	@ (8007e68 <_printf_float+0x2d0>)
 8007c22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c26:	bf94      	ite	ls
 8007c28:	4690      	movls	r8, r2
 8007c2a:	4698      	movhi	r8, r3
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	6123      	str	r3, [r4, #16]
 8007c30:	f02b 0304 	bic.w	r3, fp, #4
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	f04f 0900 	mov.w	r9, #0
 8007c3a:	9700      	str	r7, [sp, #0]
 8007c3c:	4633      	mov	r3, r6
 8007c3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f9d2 	bl	8007fec <_printf_common>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f040 808d 	bne.w	8007d68 <_printf_float+0x1d0>
 8007c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c52:	b00d      	add	sp, #52	@ 0x34
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f8 ff6c 	bl	8000b3c <__aeabi_dcmpun>
 8007c64:	b140      	cbz	r0, 8007c78 <_printf_float+0xe0>
 8007c66:	464b      	mov	r3, r9
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfbc      	itt	lt
 8007c6c:	232d      	movlt	r3, #45	@ 0x2d
 8007c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c72:	4a7e      	ldr	r2, [pc, #504]	@ (8007e6c <_printf_float+0x2d4>)
 8007c74:	4b7e      	ldr	r3, [pc, #504]	@ (8007e70 <_printf_float+0x2d8>)
 8007c76:	e7d4      	b.n	8007c22 <_printf_float+0x8a>
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c7e:	9206      	str	r2, [sp, #24]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	d13b      	bne.n	8007cfc <_printf_float+0x164>
 8007c84:	2306      	movs	r3, #6
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6022      	str	r2, [r4, #0]
 8007c90:	9303      	str	r3, [sp, #12]
 8007c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c98:	ab09      	add	r3, sp, #36	@ 0x24
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	ec49 8b10 	vmov	d0, r8, r9
 8007ca2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f7ff fed6 	bl	8007a58 <__cvt>
 8007cac:	9b06      	ldr	r3, [sp, #24]
 8007cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cb0:	2b47      	cmp	r3, #71	@ 0x47
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	d129      	bne.n	8007d0a <_printf_float+0x172>
 8007cb6:	1cc8      	adds	r0, r1, #3
 8007cb8:	db02      	blt.n	8007cc0 <_printf_float+0x128>
 8007cba:	6863      	ldr	r3, [r4, #4]
 8007cbc:	4299      	cmp	r1, r3
 8007cbe:	dd41      	ble.n	8007d44 <_printf_float+0x1ac>
 8007cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8007cc8:	3901      	subs	r1, #1
 8007cca:	4652      	mov	r2, sl
 8007ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cd2:	f7ff ff26 	bl	8007b22 <__exponent>
 8007cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cd8:	1813      	adds	r3, r2, r0
 8007cda:	2a01      	cmp	r2, #1
 8007cdc:	4681      	mov	r9, r0
 8007cde:	6123      	str	r3, [r4, #16]
 8007ce0:	dc02      	bgt.n	8007ce8 <_printf_float+0x150>
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	07d2      	lsls	r2, r2, #31
 8007ce6:	d501      	bpl.n	8007cec <_printf_float+0x154>
 8007ce8:	3301      	adds	r3, #1
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0a2      	beq.n	8007c3a <_printf_float+0xa2>
 8007cf4:	232d      	movs	r3, #45	@ 0x2d
 8007cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cfa:	e79e      	b.n	8007c3a <_printf_float+0xa2>
 8007cfc:	9a06      	ldr	r2, [sp, #24]
 8007cfe:	2a47      	cmp	r2, #71	@ 0x47
 8007d00:	d1c2      	bne.n	8007c88 <_printf_float+0xf0>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1c0      	bne.n	8007c88 <_printf_float+0xf0>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e7bd      	b.n	8007c86 <_printf_float+0xee>
 8007d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d0e:	d9db      	bls.n	8007cc8 <_printf_float+0x130>
 8007d10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d14:	d118      	bne.n	8007d48 <_printf_float+0x1b0>
 8007d16:	2900      	cmp	r1, #0
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	dd0b      	ble.n	8007d34 <_printf_float+0x19c>
 8007d1c:	6121      	str	r1, [r4, #16]
 8007d1e:	b913      	cbnz	r3, 8007d26 <_printf_float+0x18e>
 8007d20:	6822      	ldr	r2, [r4, #0]
 8007d22:	07d0      	lsls	r0, r2, #31
 8007d24:	d502      	bpl.n	8007d2c <_printf_float+0x194>
 8007d26:	3301      	adds	r3, #1
 8007d28:	440b      	add	r3, r1
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d2e:	f04f 0900 	mov.w	r9, #0
 8007d32:	e7db      	b.n	8007cec <_printf_float+0x154>
 8007d34:	b913      	cbnz	r3, 8007d3c <_printf_float+0x1a4>
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	07d2      	lsls	r2, r2, #31
 8007d3a:	d501      	bpl.n	8007d40 <_printf_float+0x1a8>
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	e7f4      	b.n	8007d2a <_printf_float+0x192>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e7f2      	b.n	8007d2a <_printf_float+0x192>
 8007d44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d4a:	4299      	cmp	r1, r3
 8007d4c:	db05      	blt.n	8007d5a <_printf_float+0x1c2>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	6121      	str	r1, [r4, #16]
 8007d52:	07d8      	lsls	r0, r3, #31
 8007d54:	d5ea      	bpl.n	8007d2c <_printf_float+0x194>
 8007d56:	1c4b      	adds	r3, r1, #1
 8007d58:	e7e7      	b.n	8007d2a <_printf_float+0x192>
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	bfd4      	ite	le
 8007d5e:	f1c1 0202 	rsble	r2, r1, #2
 8007d62:	2201      	movgt	r2, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	e7e0      	b.n	8007d2a <_printf_float+0x192>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	055a      	lsls	r2, r3, #21
 8007d6c:	d407      	bmi.n	8007d7e <_printf_float+0x1e6>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	4642      	mov	r2, r8
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d12b      	bne.n	8007dd4 <_printf_float+0x23c>
 8007d7c:	e767      	b.n	8007c4e <_printf_float+0xb6>
 8007d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d82:	f240 80dd 	bls.w	8007f40 <_printf_float+0x3a8>
 8007d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f7f8 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d033      	beq.n	8007dfe <_printf_float+0x266>
 8007d96:	4a37      	ldr	r2, [pc, #220]	@ (8007e74 <_printf_float+0x2dc>)
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f af54 	beq.w	8007c4e <_printf_float+0xb6>
 8007da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007daa:	4543      	cmp	r3, r8
 8007dac:	db02      	blt.n	8007db4 <_printf_float+0x21c>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	07d8      	lsls	r0, r3, #31
 8007db2:	d50f      	bpl.n	8007dd4 <_printf_float+0x23c>
 8007db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f43f af45 	beq.w	8007c4e <_printf_float+0xb6>
 8007dc4:	f04f 0900 	mov.w	r9, #0
 8007dc8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007dcc:	f104 0a1a 	add.w	sl, r4, #26
 8007dd0:	45c8      	cmp	r8, r9
 8007dd2:	dc09      	bgt.n	8007de8 <_printf_float+0x250>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	079b      	lsls	r3, r3, #30
 8007dd8:	f100 8103 	bmi.w	8007fe2 <_printf_float+0x44a>
 8007ddc:	68e0      	ldr	r0, [r4, #12]
 8007dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007de0:	4298      	cmp	r0, r3
 8007de2:	bfb8      	it	lt
 8007de4:	4618      	movlt	r0, r3
 8007de6:	e734      	b.n	8007c52 <_printf_float+0xba>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4652      	mov	r2, sl
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f af2b 	beq.w	8007c4e <_printf_float+0xb6>
 8007df8:	f109 0901 	add.w	r9, r9, #1
 8007dfc:	e7e8      	b.n	8007dd0 <_printf_float+0x238>
 8007dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dc39      	bgt.n	8007e78 <_printf_float+0x2e0>
 8007e04:	4a1b      	ldr	r2, [pc, #108]	@ (8007e74 <_printf_float+0x2dc>)
 8007e06:	2301      	movs	r3, #1
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	47b8      	blx	r7
 8007e0e:	3001      	adds	r0, #1
 8007e10:	f43f af1d 	beq.w	8007c4e <_printf_float+0xb6>
 8007e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e18:	ea59 0303 	orrs.w	r3, r9, r3
 8007e1c:	d102      	bne.n	8007e24 <_printf_float+0x28c>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	07d9      	lsls	r1, r3, #31
 8007e22:	d5d7      	bpl.n	8007dd4 <_printf_float+0x23c>
 8007e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f af0d 	beq.w	8007c4e <_printf_float+0xb6>
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	f104 0b1a 	add.w	fp, r4, #26
 8007e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3e:	425b      	negs	r3, r3
 8007e40:	4553      	cmp	r3, sl
 8007e42:	dc01      	bgt.n	8007e48 <_printf_float+0x2b0>
 8007e44:	464b      	mov	r3, r9
 8007e46:	e793      	b.n	8007d70 <_printf_float+0x1d8>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	465a      	mov	r2, fp
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	f43f aefb 	beq.w	8007c4e <_printf_float+0xb6>
 8007e58:	f10a 0a01 	add.w	sl, sl, #1
 8007e5c:	e7ee      	b.n	8007e3c <_printf_float+0x2a4>
 8007e5e:	bf00      	nop
 8007e60:	7fefffff 	.word	0x7fefffff
 8007e64:	0800d504 	.word	0x0800d504
 8007e68:	0800d508 	.word	0x0800d508
 8007e6c:	0800d50c 	.word	0x0800d50c
 8007e70:	0800d510 	.word	0x0800d510
 8007e74:	0800d514 	.word	0x0800d514
 8007e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e7e:	4553      	cmp	r3, sl
 8007e80:	bfa8      	it	ge
 8007e82:	4653      	movge	r3, sl
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	4699      	mov	r9, r3
 8007e88:	dc36      	bgt.n	8007ef8 <_printf_float+0x360>
 8007e8a:	f04f 0b00 	mov.w	fp, #0
 8007e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e92:	f104 021a 	add.w	r2, r4, #26
 8007e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e98:	9306      	str	r3, [sp, #24]
 8007e9a:	eba3 0309 	sub.w	r3, r3, r9
 8007e9e:	455b      	cmp	r3, fp
 8007ea0:	dc31      	bgt.n	8007f06 <_printf_float+0x36e>
 8007ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea4:	459a      	cmp	sl, r3
 8007ea6:	dc3a      	bgt.n	8007f1e <_printf_float+0x386>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07da      	lsls	r2, r3, #31
 8007eac:	d437      	bmi.n	8007f1e <_printf_float+0x386>
 8007eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8007eb4:	9b06      	ldr	r3, [sp, #24]
 8007eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8007eba:	4599      	cmp	r9, r3
 8007ebc:	bfa8      	it	ge
 8007ebe:	4699      	movge	r9, r3
 8007ec0:	f1b9 0f00 	cmp.w	r9, #0
 8007ec4:	dc33      	bgt.n	8007f2e <_printf_float+0x396>
 8007ec6:	f04f 0800 	mov.w	r8, #0
 8007eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ece:	f104 0b1a 	add.w	fp, r4, #26
 8007ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ed8:	eba3 0309 	sub.w	r3, r3, r9
 8007edc:	4543      	cmp	r3, r8
 8007ede:	f77f af79 	ble.w	8007dd4 <_printf_float+0x23c>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	465a      	mov	r2, fp
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	f43f aeae 	beq.w	8007c4e <_printf_float+0xb6>
 8007ef2:	f108 0801 	add.w	r8, r8, #1
 8007ef6:	e7ec      	b.n	8007ed2 <_printf_float+0x33a>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	d1c2      	bne.n	8007e8a <_printf_float+0x2f2>
 8007f04:	e6a3      	b.n	8007c4e <_printf_float+0xb6>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	9206      	str	r2, [sp, #24]
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	f43f ae9c 	beq.w	8007c4e <_printf_float+0xb6>
 8007f16:	9a06      	ldr	r2, [sp, #24]
 8007f18:	f10b 0b01 	add.w	fp, fp, #1
 8007f1c:	e7bb      	b.n	8007e96 <_printf_float+0x2fe>
 8007f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d1c0      	bne.n	8007eae <_printf_float+0x316>
 8007f2c:	e68f      	b.n	8007c4e <_printf_float+0xb6>
 8007f2e:	9a06      	ldr	r2, [sp, #24]
 8007f30:	464b      	mov	r3, r9
 8007f32:	4442      	add	r2, r8
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	d1c3      	bne.n	8007ec6 <_printf_float+0x32e>
 8007f3e:	e686      	b.n	8007c4e <_printf_float+0xb6>
 8007f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f44:	f1ba 0f01 	cmp.w	sl, #1
 8007f48:	dc01      	bgt.n	8007f4e <_printf_float+0x3b6>
 8007f4a:	07db      	lsls	r3, r3, #31
 8007f4c:	d536      	bpl.n	8007fbc <_printf_float+0x424>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4642      	mov	r2, r8
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b8      	blx	r7
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f43f ae78 	beq.w	8007c4e <_printf_float+0xb6>
 8007f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f62:	4631      	mov	r1, r6
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b8      	blx	r7
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f43f ae70 	beq.w	8007c4e <_printf_float+0xb6>
 8007f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007f7a:	f7f8 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f7e:	b9c0      	cbnz	r0, 8007fb2 <_printf_float+0x41a>
 8007f80:	4653      	mov	r3, sl
 8007f82:	f108 0201 	add.w	r2, r8, #1
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d10c      	bne.n	8007faa <_printf_float+0x412>
 8007f90:	e65d      	b.n	8007c4e <_printf_float+0xb6>
 8007f92:	2301      	movs	r3, #1
 8007f94:	465a      	mov	r2, fp
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f43f ae56 	beq.w	8007c4e <_printf_float+0xb6>
 8007fa2:	f108 0801 	add.w	r8, r8, #1
 8007fa6:	45d0      	cmp	r8, sl
 8007fa8:	dbf3      	blt.n	8007f92 <_printf_float+0x3fa>
 8007faa:	464b      	mov	r3, r9
 8007fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007fb0:	e6df      	b.n	8007d72 <_printf_float+0x1da>
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	f104 0b1a 	add.w	fp, r4, #26
 8007fba:	e7f4      	b.n	8007fa6 <_printf_float+0x40e>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	e7e1      	b.n	8007f86 <_printf_float+0x3ee>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	464a      	mov	r2, r9
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f43f ae3e 	beq.w	8007c4e <_printf_float+0xb6>
 8007fd2:	f108 0801 	add.w	r8, r8, #1
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fda:	1a5b      	subs	r3, r3, r1
 8007fdc:	4543      	cmp	r3, r8
 8007fde:	dcf0      	bgt.n	8007fc2 <_printf_float+0x42a>
 8007fe0:	e6fc      	b.n	8007ddc <_printf_float+0x244>
 8007fe2:	f04f 0800 	mov.w	r8, #0
 8007fe6:	f104 0919 	add.w	r9, r4, #25
 8007fea:	e7f4      	b.n	8007fd6 <_printf_float+0x43e>

08007fec <_printf_common>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	4698      	mov	r8, r3
 8007ff4:	688a      	ldr	r2, [r1, #8]
 8007ff6:	690b      	ldr	r3, [r1, #16]
 8007ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	bfb8      	it	lt
 8008000:	4613      	movlt	r3, r2
 8008002:	6033      	str	r3, [r6, #0]
 8008004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008008:	4607      	mov	r7, r0
 800800a:	460c      	mov	r4, r1
 800800c:	b10a      	cbz	r2, 8008012 <_printf_common+0x26>
 800800e:	3301      	adds	r3, #1
 8008010:	6033      	str	r3, [r6, #0]
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	0699      	lsls	r1, r3, #26
 8008016:	bf42      	ittt	mi
 8008018:	6833      	ldrmi	r3, [r6, #0]
 800801a:	3302      	addmi	r3, #2
 800801c:	6033      	strmi	r3, [r6, #0]
 800801e:	6825      	ldr	r5, [r4, #0]
 8008020:	f015 0506 	ands.w	r5, r5, #6
 8008024:	d106      	bne.n	8008034 <_printf_common+0x48>
 8008026:	f104 0a19 	add.w	sl, r4, #25
 800802a:	68e3      	ldr	r3, [r4, #12]
 800802c:	6832      	ldr	r2, [r6, #0]
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	42ab      	cmp	r3, r5
 8008032:	dc26      	bgt.n	8008082 <_printf_common+0x96>
 8008034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	3b00      	subs	r3, #0
 800803c:	bf18      	it	ne
 800803e:	2301      	movne	r3, #1
 8008040:	0692      	lsls	r2, r2, #26
 8008042:	d42b      	bmi.n	800809c <_printf_common+0xb0>
 8008044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008048:	4641      	mov	r1, r8
 800804a:	4638      	mov	r0, r7
 800804c:	47c8      	blx	r9
 800804e:	3001      	adds	r0, #1
 8008050:	d01e      	beq.n	8008090 <_printf_common+0xa4>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	6922      	ldr	r2, [r4, #16]
 8008056:	f003 0306 	and.w	r3, r3, #6
 800805a:	2b04      	cmp	r3, #4
 800805c:	bf02      	ittt	eq
 800805e:	68e5      	ldreq	r5, [r4, #12]
 8008060:	6833      	ldreq	r3, [r6, #0]
 8008062:	1aed      	subeq	r5, r5, r3
 8008064:	68a3      	ldr	r3, [r4, #8]
 8008066:	bf0c      	ite	eq
 8008068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800806c:	2500      	movne	r5, #0
 800806e:	4293      	cmp	r3, r2
 8008070:	bfc4      	itt	gt
 8008072:	1a9b      	subgt	r3, r3, r2
 8008074:	18ed      	addgt	r5, r5, r3
 8008076:	2600      	movs	r6, #0
 8008078:	341a      	adds	r4, #26
 800807a:	42b5      	cmp	r5, r6
 800807c:	d11a      	bne.n	80080b4 <_printf_common+0xc8>
 800807e:	2000      	movs	r0, #0
 8008080:	e008      	b.n	8008094 <_printf_common+0xa8>
 8008082:	2301      	movs	r3, #1
 8008084:	4652      	mov	r2, sl
 8008086:	4641      	mov	r1, r8
 8008088:	4638      	mov	r0, r7
 800808a:	47c8      	blx	r9
 800808c:	3001      	adds	r0, #1
 800808e:	d103      	bne.n	8008098 <_printf_common+0xac>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008098:	3501      	adds	r5, #1
 800809a:	e7c6      	b.n	800802a <_printf_common+0x3e>
 800809c:	18e1      	adds	r1, r4, r3
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	2030      	movs	r0, #48	@ 0x30
 80080a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080a6:	4422      	add	r2, r4
 80080a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080b0:	3302      	adds	r3, #2
 80080b2:	e7c7      	b.n	8008044 <_printf_common+0x58>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4622      	mov	r2, r4
 80080b8:	4641      	mov	r1, r8
 80080ba:	4638      	mov	r0, r7
 80080bc:	47c8      	blx	r9
 80080be:	3001      	adds	r0, #1
 80080c0:	d0e6      	beq.n	8008090 <_printf_common+0xa4>
 80080c2:	3601      	adds	r6, #1
 80080c4:	e7d9      	b.n	800807a <_printf_common+0x8e>
	...

080080c8 <_printf_i>:
 80080c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	7e0f      	ldrb	r7, [r1, #24]
 80080ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080d0:	2f78      	cmp	r7, #120	@ 0x78
 80080d2:	4691      	mov	r9, r2
 80080d4:	4680      	mov	r8, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	469a      	mov	sl, r3
 80080da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080de:	d807      	bhi.n	80080f0 <_printf_i+0x28>
 80080e0:	2f62      	cmp	r7, #98	@ 0x62
 80080e2:	d80a      	bhi.n	80080fa <_printf_i+0x32>
 80080e4:	2f00      	cmp	r7, #0
 80080e6:	f000 80d2 	beq.w	800828e <_printf_i+0x1c6>
 80080ea:	2f58      	cmp	r7, #88	@ 0x58
 80080ec:	f000 80b9 	beq.w	8008262 <_printf_i+0x19a>
 80080f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080f8:	e03a      	b.n	8008170 <_printf_i+0xa8>
 80080fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080fe:	2b15      	cmp	r3, #21
 8008100:	d8f6      	bhi.n	80080f0 <_printf_i+0x28>
 8008102:	a101      	add	r1, pc, #4	@ (adr r1, 8008108 <_printf_i+0x40>)
 8008104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008108:	08008161 	.word	0x08008161
 800810c:	08008175 	.word	0x08008175
 8008110:	080080f1 	.word	0x080080f1
 8008114:	080080f1 	.word	0x080080f1
 8008118:	080080f1 	.word	0x080080f1
 800811c:	080080f1 	.word	0x080080f1
 8008120:	08008175 	.word	0x08008175
 8008124:	080080f1 	.word	0x080080f1
 8008128:	080080f1 	.word	0x080080f1
 800812c:	080080f1 	.word	0x080080f1
 8008130:	080080f1 	.word	0x080080f1
 8008134:	08008275 	.word	0x08008275
 8008138:	0800819f 	.word	0x0800819f
 800813c:	0800822f 	.word	0x0800822f
 8008140:	080080f1 	.word	0x080080f1
 8008144:	080080f1 	.word	0x080080f1
 8008148:	08008297 	.word	0x08008297
 800814c:	080080f1 	.word	0x080080f1
 8008150:	0800819f 	.word	0x0800819f
 8008154:	080080f1 	.word	0x080080f1
 8008158:	080080f1 	.word	0x080080f1
 800815c:	08008237 	.word	0x08008237
 8008160:	6833      	ldr	r3, [r6, #0]
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6032      	str	r2, [r6, #0]
 8008168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800816c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008170:	2301      	movs	r3, #1
 8008172:	e09d      	b.n	80082b0 <_printf_i+0x1e8>
 8008174:	6833      	ldr	r3, [r6, #0]
 8008176:	6820      	ldr	r0, [r4, #0]
 8008178:	1d19      	adds	r1, r3, #4
 800817a:	6031      	str	r1, [r6, #0]
 800817c:	0606      	lsls	r6, r0, #24
 800817e:	d501      	bpl.n	8008184 <_printf_i+0xbc>
 8008180:	681d      	ldr	r5, [r3, #0]
 8008182:	e003      	b.n	800818c <_printf_i+0xc4>
 8008184:	0645      	lsls	r5, r0, #25
 8008186:	d5fb      	bpl.n	8008180 <_printf_i+0xb8>
 8008188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800818c:	2d00      	cmp	r5, #0
 800818e:	da03      	bge.n	8008198 <_printf_i+0xd0>
 8008190:	232d      	movs	r3, #45	@ 0x2d
 8008192:	426d      	negs	r5, r5
 8008194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008198:	4859      	ldr	r0, [pc, #356]	@ (8008300 <_printf_i+0x238>)
 800819a:	230a      	movs	r3, #10
 800819c:	e011      	b.n	80081c2 <_printf_i+0xfa>
 800819e:	6821      	ldr	r1, [r4, #0]
 80081a0:	6833      	ldr	r3, [r6, #0]
 80081a2:	0608      	lsls	r0, r1, #24
 80081a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80081a8:	d402      	bmi.n	80081b0 <_printf_i+0xe8>
 80081aa:	0649      	lsls	r1, r1, #25
 80081ac:	bf48      	it	mi
 80081ae:	b2ad      	uxthmi	r5, r5
 80081b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081b2:	4853      	ldr	r0, [pc, #332]	@ (8008300 <_printf_i+0x238>)
 80081b4:	6033      	str	r3, [r6, #0]
 80081b6:	bf14      	ite	ne
 80081b8:	230a      	movne	r3, #10
 80081ba:	2308      	moveq	r3, #8
 80081bc:	2100      	movs	r1, #0
 80081be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081c2:	6866      	ldr	r6, [r4, #4]
 80081c4:	60a6      	str	r6, [r4, #8]
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	bfa2      	ittt	ge
 80081ca:	6821      	ldrge	r1, [r4, #0]
 80081cc:	f021 0104 	bicge.w	r1, r1, #4
 80081d0:	6021      	strge	r1, [r4, #0]
 80081d2:	b90d      	cbnz	r5, 80081d8 <_printf_i+0x110>
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	d04b      	beq.n	8008270 <_printf_i+0x1a8>
 80081d8:	4616      	mov	r6, r2
 80081da:	fbb5 f1f3 	udiv	r1, r5, r3
 80081de:	fb03 5711 	mls	r7, r3, r1, r5
 80081e2:	5dc7      	ldrb	r7, [r0, r7]
 80081e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081e8:	462f      	mov	r7, r5
 80081ea:	42bb      	cmp	r3, r7
 80081ec:	460d      	mov	r5, r1
 80081ee:	d9f4      	bls.n	80081da <_printf_i+0x112>
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d10b      	bne.n	800820c <_printf_i+0x144>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	07df      	lsls	r7, r3, #31
 80081f8:	d508      	bpl.n	800820c <_printf_i+0x144>
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	6861      	ldr	r1, [r4, #4]
 80081fe:	4299      	cmp	r1, r3
 8008200:	bfde      	ittt	le
 8008202:	2330      	movle	r3, #48	@ 0x30
 8008204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008208:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800820c:	1b92      	subs	r2, r2, r6
 800820e:	6122      	str	r2, [r4, #16]
 8008210:	f8cd a000 	str.w	sl, [sp]
 8008214:	464b      	mov	r3, r9
 8008216:	aa03      	add	r2, sp, #12
 8008218:	4621      	mov	r1, r4
 800821a:	4640      	mov	r0, r8
 800821c:	f7ff fee6 	bl	8007fec <_printf_common>
 8008220:	3001      	adds	r0, #1
 8008222:	d14a      	bne.n	80082ba <_printf_i+0x1f2>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008228:	b004      	add	sp, #16
 800822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f043 0320 	orr.w	r3, r3, #32
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	4833      	ldr	r0, [pc, #204]	@ (8008304 <_printf_i+0x23c>)
 8008238:	2778      	movs	r7, #120	@ 0x78
 800823a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	6831      	ldr	r1, [r6, #0]
 8008242:	061f      	lsls	r7, r3, #24
 8008244:	f851 5b04 	ldr.w	r5, [r1], #4
 8008248:	d402      	bmi.n	8008250 <_printf_i+0x188>
 800824a:	065f      	lsls	r7, r3, #25
 800824c:	bf48      	it	mi
 800824e:	b2ad      	uxthmi	r5, r5
 8008250:	6031      	str	r1, [r6, #0]
 8008252:	07d9      	lsls	r1, r3, #31
 8008254:	bf44      	itt	mi
 8008256:	f043 0320 	orrmi.w	r3, r3, #32
 800825a:	6023      	strmi	r3, [r4, #0]
 800825c:	b11d      	cbz	r5, 8008266 <_printf_i+0x19e>
 800825e:	2310      	movs	r3, #16
 8008260:	e7ac      	b.n	80081bc <_printf_i+0xf4>
 8008262:	4827      	ldr	r0, [pc, #156]	@ (8008300 <_printf_i+0x238>)
 8008264:	e7e9      	b.n	800823a <_printf_i+0x172>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	f023 0320 	bic.w	r3, r3, #32
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	e7f6      	b.n	800825e <_printf_i+0x196>
 8008270:	4616      	mov	r6, r2
 8008272:	e7bd      	b.n	80081f0 <_printf_i+0x128>
 8008274:	6833      	ldr	r3, [r6, #0]
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	6961      	ldr	r1, [r4, #20]
 800827a:	1d18      	adds	r0, r3, #4
 800827c:	6030      	str	r0, [r6, #0]
 800827e:	062e      	lsls	r6, r5, #24
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	d501      	bpl.n	8008288 <_printf_i+0x1c0>
 8008284:	6019      	str	r1, [r3, #0]
 8008286:	e002      	b.n	800828e <_printf_i+0x1c6>
 8008288:	0668      	lsls	r0, r5, #25
 800828a:	d5fb      	bpl.n	8008284 <_printf_i+0x1bc>
 800828c:	8019      	strh	r1, [r3, #0]
 800828e:	2300      	movs	r3, #0
 8008290:	6123      	str	r3, [r4, #16]
 8008292:	4616      	mov	r6, r2
 8008294:	e7bc      	b.n	8008210 <_printf_i+0x148>
 8008296:	6833      	ldr	r3, [r6, #0]
 8008298:	1d1a      	adds	r2, r3, #4
 800829a:	6032      	str	r2, [r6, #0]
 800829c:	681e      	ldr	r6, [r3, #0]
 800829e:	6862      	ldr	r2, [r4, #4]
 80082a0:	2100      	movs	r1, #0
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7f7 ff9c 	bl	80001e0 <memchr>
 80082a8:	b108      	cbz	r0, 80082ae <_printf_i+0x1e6>
 80082aa:	1b80      	subs	r0, r0, r6
 80082ac:	6060      	str	r0, [r4, #4]
 80082ae:	6863      	ldr	r3, [r4, #4]
 80082b0:	6123      	str	r3, [r4, #16]
 80082b2:	2300      	movs	r3, #0
 80082b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082b8:	e7aa      	b.n	8008210 <_printf_i+0x148>
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	4632      	mov	r2, r6
 80082be:	4649      	mov	r1, r9
 80082c0:	4640      	mov	r0, r8
 80082c2:	47d0      	blx	sl
 80082c4:	3001      	adds	r0, #1
 80082c6:	d0ad      	beq.n	8008224 <_printf_i+0x15c>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	079b      	lsls	r3, r3, #30
 80082cc:	d413      	bmi.n	80082f6 <_printf_i+0x22e>
 80082ce:	68e0      	ldr	r0, [r4, #12]
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	4298      	cmp	r0, r3
 80082d4:	bfb8      	it	lt
 80082d6:	4618      	movlt	r0, r3
 80082d8:	e7a6      	b.n	8008228 <_printf_i+0x160>
 80082da:	2301      	movs	r3, #1
 80082dc:	4632      	mov	r2, r6
 80082de:	4649      	mov	r1, r9
 80082e0:	4640      	mov	r0, r8
 80082e2:	47d0      	blx	sl
 80082e4:	3001      	adds	r0, #1
 80082e6:	d09d      	beq.n	8008224 <_printf_i+0x15c>
 80082e8:	3501      	adds	r5, #1
 80082ea:	68e3      	ldr	r3, [r4, #12]
 80082ec:	9903      	ldr	r1, [sp, #12]
 80082ee:	1a5b      	subs	r3, r3, r1
 80082f0:	42ab      	cmp	r3, r5
 80082f2:	dcf2      	bgt.n	80082da <_printf_i+0x212>
 80082f4:	e7eb      	b.n	80082ce <_printf_i+0x206>
 80082f6:	2500      	movs	r5, #0
 80082f8:	f104 0619 	add.w	r6, r4, #25
 80082fc:	e7f5      	b.n	80082ea <_printf_i+0x222>
 80082fe:	bf00      	nop
 8008300:	0800d516 	.word	0x0800d516
 8008304:	0800d527 	.word	0x0800d527

08008308 <std>:
 8008308:	2300      	movs	r3, #0
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	e9c0 3300 	strd	r3, r3, [r0]
 8008312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008316:	6083      	str	r3, [r0, #8]
 8008318:	8181      	strh	r1, [r0, #12]
 800831a:	6643      	str	r3, [r0, #100]	@ 0x64
 800831c:	81c2      	strh	r2, [r0, #14]
 800831e:	6183      	str	r3, [r0, #24]
 8008320:	4619      	mov	r1, r3
 8008322:	2208      	movs	r2, #8
 8008324:	305c      	adds	r0, #92	@ 0x5c
 8008326:	f000 f914 	bl	8008552 <memset>
 800832a:	4b0d      	ldr	r3, [pc, #52]	@ (8008360 <std+0x58>)
 800832c:	6263      	str	r3, [r4, #36]	@ 0x24
 800832e:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <std+0x5c>)
 8008330:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <std+0x60>)
 8008334:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008336:	4b0d      	ldr	r3, [pc, #52]	@ (800836c <std+0x64>)
 8008338:	6323      	str	r3, [r4, #48]	@ 0x30
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <std+0x68>)
 800833c:	6224      	str	r4, [r4, #32]
 800833e:	429c      	cmp	r4, r3
 8008340:	d006      	beq.n	8008350 <std+0x48>
 8008342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008346:	4294      	cmp	r4, r2
 8008348:	d002      	beq.n	8008350 <std+0x48>
 800834a:	33d0      	adds	r3, #208	@ 0xd0
 800834c:	429c      	cmp	r4, r3
 800834e:	d105      	bne.n	800835c <std+0x54>
 8008350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008358:	f000 b9ce 	b.w	80086f8 <__retarget_lock_init_recursive>
 800835c:	bd10      	pop	{r4, pc}
 800835e:	bf00      	nop
 8008360:	080084cd 	.word	0x080084cd
 8008364:	080084ef 	.word	0x080084ef
 8008368:	08008527 	.word	0x08008527
 800836c:	0800854b 	.word	0x0800854b
 8008370:	20005b00 	.word	0x20005b00

08008374 <stdio_exit_handler>:
 8008374:	4a02      	ldr	r2, [pc, #8]	@ (8008380 <stdio_exit_handler+0xc>)
 8008376:	4903      	ldr	r1, [pc, #12]	@ (8008384 <stdio_exit_handler+0x10>)
 8008378:	4803      	ldr	r0, [pc, #12]	@ (8008388 <stdio_exit_handler+0x14>)
 800837a:	f000 b869 	b.w	8008450 <_fwalk_sglue>
 800837e:	bf00      	nop
 8008380:	20000e28 	.word	0x20000e28
 8008384:	0800a075 	.word	0x0800a075
 8008388:	20000e38 	.word	0x20000e38

0800838c <cleanup_stdio>:
 800838c:	6841      	ldr	r1, [r0, #4]
 800838e:	4b0c      	ldr	r3, [pc, #48]	@ (80083c0 <cleanup_stdio+0x34>)
 8008390:	4299      	cmp	r1, r3
 8008392:	b510      	push	{r4, lr}
 8008394:	4604      	mov	r4, r0
 8008396:	d001      	beq.n	800839c <cleanup_stdio+0x10>
 8008398:	f001 fe6c 	bl	800a074 <_fflush_r>
 800839c:	68a1      	ldr	r1, [r4, #8]
 800839e:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <cleanup_stdio+0x38>)
 80083a0:	4299      	cmp	r1, r3
 80083a2:	d002      	beq.n	80083aa <cleanup_stdio+0x1e>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f001 fe65 	bl	800a074 <_fflush_r>
 80083aa:	68e1      	ldr	r1, [r4, #12]
 80083ac:	4b06      	ldr	r3, [pc, #24]	@ (80083c8 <cleanup_stdio+0x3c>)
 80083ae:	4299      	cmp	r1, r3
 80083b0:	d004      	beq.n	80083bc <cleanup_stdio+0x30>
 80083b2:	4620      	mov	r0, r4
 80083b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b8:	f001 be5c 	b.w	800a074 <_fflush_r>
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	bf00      	nop
 80083c0:	20005b00 	.word	0x20005b00
 80083c4:	20005b68 	.word	0x20005b68
 80083c8:	20005bd0 	.word	0x20005bd0

080083cc <global_stdio_init.part.0>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <global_stdio_init.part.0+0x30>)
 80083d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008400 <global_stdio_init.part.0+0x34>)
 80083d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008404 <global_stdio_init.part.0+0x38>)
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	4620      	mov	r0, r4
 80083d8:	2200      	movs	r2, #0
 80083da:	2104      	movs	r1, #4
 80083dc:	f7ff ff94 	bl	8008308 <std>
 80083e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083e4:	2201      	movs	r2, #1
 80083e6:	2109      	movs	r1, #9
 80083e8:	f7ff ff8e 	bl	8008308 <std>
 80083ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083f0:	2202      	movs	r2, #2
 80083f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f6:	2112      	movs	r1, #18
 80083f8:	f7ff bf86 	b.w	8008308 <std>
 80083fc:	20005c38 	.word	0x20005c38
 8008400:	20005b00 	.word	0x20005b00
 8008404:	08008375 	.word	0x08008375

08008408 <__sfp_lock_acquire>:
 8008408:	4801      	ldr	r0, [pc, #4]	@ (8008410 <__sfp_lock_acquire+0x8>)
 800840a:	f000 b976 	b.w	80086fa <__retarget_lock_acquire_recursive>
 800840e:	bf00      	nop
 8008410:	20005c41 	.word	0x20005c41

08008414 <__sfp_lock_release>:
 8008414:	4801      	ldr	r0, [pc, #4]	@ (800841c <__sfp_lock_release+0x8>)
 8008416:	f000 b971 	b.w	80086fc <__retarget_lock_release_recursive>
 800841a:	bf00      	nop
 800841c:	20005c41 	.word	0x20005c41

08008420 <__sinit>:
 8008420:	b510      	push	{r4, lr}
 8008422:	4604      	mov	r4, r0
 8008424:	f7ff fff0 	bl	8008408 <__sfp_lock_acquire>
 8008428:	6a23      	ldr	r3, [r4, #32]
 800842a:	b11b      	cbz	r3, 8008434 <__sinit+0x14>
 800842c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008430:	f7ff bff0 	b.w	8008414 <__sfp_lock_release>
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <__sinit+0x28>)
 8008436:	6223      	str	r3, [r4, #32]
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <__sinit+0x2c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f5      	bne.n	800842c <__sinit+0xc>
 8008440:	f7ff ffc4 	bl	80083cc <global_stdio_init.part.0>
 8008444:	e7f2      	b.n	800842c <__sinit+0xc>
 8008446:	bf00      	nop
 8008448:	0800838d 	.word	0x0800838d
 800844c:	20005c38 	.word	0x20005c38

08008450 <_fwalk_sglue>:
 8008450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008454:	4607      	mov	r7, r0
 8008456:	4688      	mov	r8, r1
 8008458:	4614      	mov	r4, r2
 800845a:	2600      	movs	r6, #0
 800845c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008460:	f1b9 0901 	subs.w	r9, r9, #1
 8008464:	d505      	bpl.n	8008472 <_fwalk_sglue+0x22>
 8008466:	6824      	ldr	r4, [r4, #0]
 8008468:	2c00      	cmp	r4, #0
 800846a:	d1f7      	bne.n	800845c <_fwalk_sglue+0xc>
 800846c:	4630      	mov	r0, r6
 800846e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d907      	bls.n	8008488 <_fwalk_sglue+0x38>
 8008478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800847c:	3301      	adds	r3, #1
 800847e:	d003      	beq.n	8008488 <_fwalk_sglue+0x38>
 8008480:	4629      	mov	r1, r5
 8008482:	4638      	mov	r0, r7
 8008484:	47c0      	blx	r8
 8008486:	4306      	orrs	r6, r0
 8008488:	3568      	adds	r5, #104	@ 0x68
 800848a:	e7e9      	b.n	8008460 <_fwalk_sglue+0x10>

0800848c <siprintf>:
 800848c:	b40e      	push	{r1, r2, r3}
 800848e:	b500      	push	{lr}
 8008490:	b09c      	sub	sp, #112	@ 0x70
 8008492:	ab1d      	add	r3, sp, #116	@ 0x74
 8008494:	9002      	str	r0, [sp, #8]
 8008496:	9006      	str	r0, [sp, #24]
 8008498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800849c:	4809      	ldr	r0, [pc, #36]	@ (80084c4 <siprintf+0x38>)
 800849e:	9107      	str	r1, [sp, #28]
 80084a0:	9104      	str	r1, [sp, #16]
 80084a2:	4909      	ldr	r1, [pc, #36]	@ (80084c8 <siprintf+0x3c>)
 80084a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084a8:	9105      	str	r1, [sp, #20]
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	a902      	add	r1, sp, #8
 80084b0:	f001 fc60 	bl	8009d74 <_svfiprintf_r>
 80084b4:	9b02      	ldr	r3, [sp, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	b01c      	add	sp, #112	@ 0x70
 80084bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c0:	b003      	add	sp, #12
 80084c2:	4770      	bx	lr
 80084c4:	20000e34 	.word	0x20000e34
 80084c8:	ffff0208 	.word	0xffff0208

080084cc <__sread>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	460c      	mov	r4, r1
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	f000 f8c2 	bl	800865c <_read_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	bfab      	itete	ge
 80084dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084de:	89a3      	ldrhlt	r3, [r4, #12]
 80084e0:	181b      	addge	r3, r3, r0
 80084e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084e6:	bfac      	ite	ge
 80084e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084ea:	81a3      	strhlt	r3, [r4, #12]
 80084ec:	bd10      	pop	{r4, pc}

080084ee <__swrite>:
 80084ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f2:	461f      	mov	r7, r3
 80084f4:	898b      	ldrh	r3, [r1, #12]
 80084f6:	05db      	lsls	r3, r3, #23
 80084f8:	4605      	mov	r5, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	4616      	mov	r6, r2
 80084fe:	d505      	bpl.n	800850c <__swrite+0x1e>
 8008500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008504:	2302      	movs	r3, #2
 8008506:	2200      	movs	r2, #0
 8008508:	f000 f896 	bl	8008638 <_lseek_r>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	4632      	mov	r2, r6
 800851a:	463b      	mov	r3, r7
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	f000 b8ad 	b.w	8008680 <_write_r>

08008526 <__sseek>:
 8008526:	b510      	push	{r4, lr}
 8008528:	460c      	mov	r4, r1
 800852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800852e:	f000 f883 	bl	8008638 <_lseek_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	bf15      	itete	ne
 8008538:	6560      	strne	r0, [r4, #84]	@ 0x54
 800853a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800853e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008542:	81a3      	strheq	r3, [r4, #12]
 8008544:	bf18      	it	ne
 8008546:	81a3      	strhne	r3, [r4, #12]
 8008548:	bd10      	pop	{r4, pc}

0800854a <__sclose>:
 800854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854e:	f000 b80d 	b.w	800856c <_close_r>

08008552 <memset>:
 8008552:	4402      	add	r2, r0
 8008554:	4603      	mov	r3, r0
 8008556:	4293      	cmp	r3, r2
 8008558:	d100      	bne.n	800855c <memset+0xa>
 800855a:	4770      	bx	lr
 800855c:	f803 1b01 	strb.w	r1, [r3], #1
 8008560:	e7f9      	b.n	8008556 <memset+0x4>
	...

08008564 <_localeconv_r>:
 8008564:	4800      	ldr	r0, [pc, #0]	@ (8008568 <_localeconv_r+0x4>)
 8008566:	4770      	bx	lr
 8008568:	20000f74 	.word	0x20000f74

0800856c <_close_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d06      	ldr	r5, [pc, #24]	@ (8008588 <_close_r+0x1c>)
 8008570:	2300      	movs	r3, #0
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	f7fa fa7a 	bl	8002a70 <_close>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_close_r+0x1a>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_close_r+0x1a>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20005c3c 	.word	0x20005c3c

0800858c <_reclaim_reent>:
 800858c:	4b29      	ldr	r3, [pc, #164]	@ (8008634 <_reclaim_reent+0xa8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4283      	cmp	r3, r0
 8008592:	b570      	push	{r4, r5, r6, lr}
 8008594:	4604      	mov	r4, r0
 8008596:	d04b      	beq.n	8008630 <_reclaim_reent+0xa4>
 8008598:	69c3      	ldr	r3, [r0, #28]
 800859a:	b1ab      	cbz	r3, 80085c8 <_reclaim_reent+0x3c>
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	b16b      	cbz	r3, 80085bc <_reclaim_reent+0x30>
 80085a0:	2500      	movs	r5, #0
 80085a2:	69e3      	ldr	r3, [r4, #28]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	5959      	ldr	r1, [r3, r5]
 80085a8:	2900      	cmp	r1, #0
 80085aa:	d13b      	bne.n	8008624 <_reclaim_reent+0x98>
 80085ac:	3504      	adds	r5, #4
 80085ae:	2d80      	cmp	r5, #128	@ 0x80
 80085b0:	d1f7      	bne.n	80085a2 <_reclaim_reent+0x16>
 80085b2:	69e3      	ldr	r3, [r4, #28]
 80085b4:	4620      	mov	r0, r4
 80085b6:	68d9      	ldr	r1, [r3, #12]
 80085b8:	f000 fefe 	bl	80093b8 <_free_r>
 80085bc:	69e3      	ldr	r3, [r4, #28]
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	b111      	cbz	r1, 80085c8 <_reclaim_reent+0x3c>
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 fef8 	bl	80093b8 <_free_r>
 80085c8:	6961      	ldr	r1, [r4, #20]
 80085ca:	b111      	cbz	r1, 80085d2 <_reclaim_reent+0x46>
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fef3 	bl	80093b8 <_free_r>
 80085d2:	69e1      	ldr	r1, [r4, #28]
 80085d4:	b111      	cbz	r1, 80085dc <_reclaim_reent+0x50>
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 feee 	bl	80093b8 <_free_r>
 80085dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80085de:	b111      	cbz	r1, 80085e6 <_reclaim_reent+0x5a>
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fee9 	bl	80093b8 <_free_r>
 80085e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085e8:	b111      	cbz	r1, 80085f0 <_reclaim_reent+0x64>
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fee4 	bl	80093b8 <_free_r>
 80085f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80085f2:	b111      	cbz	r1, 80085fa <_reclaim_reent+0x6e>
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fedf 	bl	80093b8 <_free_r>
 80085fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80085fc:	b111      	cbz	r1, 8008604 <_reclaim_reent+0x78>
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 feda 	bl	80093b8 <_free_r>
 8008604:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008606:	b111      	cbz	r1, 800860e <_reclaim_reent+0x82>
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fed5 	bl	80093b8 <_free_r>
 800860e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008610:	b111      	cbz	r1, 8008618 <_reclaim_reent+0x8c>
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fed0 	bl	80093b8 <_free_r>
 8008618:	6a23      	ldr	r3, [r4, #32]
 800861a:	b14b      	cbz	r3, 8008630 <_reclaim_reent+0xa4>
 800861c:	4620      	mov	r0, r4
 800861e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008622:	4718      	bx	r3
 8008624:	680e      	ldr	r6, [r1, #0]
 8008626:	4620      	mov	r0, r4
 8008628:	f000 fec6 	bl	80093b8 <_free_r>
 800862c:	4631      	mov	r1, r6
 800862e:	e7bb      	b.n	80085a8 <_reclaim_reent+0x1c>
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	bf00      	nop
 8008634:	20000e34 	.word	0x20000e34

08008638 <_lseek_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d07      	ldr	r5, [pc, #28]	@ (8008658 <_lseek_r+0x20>)
 800863c:	4604      	mov	r4, r0
 800863e:	4608      	mov	r0, r1
 8008640:	4611      	mov	r1, r2
 8008642:	2200      	movs	r2, #0
 8008644:	602a      	str	r2, [r5, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	f7fa fa39 	bl	8002abe <_lseek>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_lseek_r+0x1e>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_lseek_r+0x1e>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	20005c3c 	.word	0x20005c3c

0800865c <_read_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d07      	ldr	r5, [pc, #28]	@ (800867c <_read_r+0x20>)
 8008660:	4604      	mov	r4, r0
 8008662:	4608      	mov	r0, r1
 8008664:	4611      	mov	r1, r2
 8008666:	2200      	movs	r2, #0
 8008668:	602a      	str	r2, [r5, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f7fa f9c7 	bl	80029fe <_read>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_read_r+0x1e>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_read_r+0x1e>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20005c3c 	.word	0x20005c3c

08008680 <_write_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d07      	ldr	r5, [pc, #28]	@ (80086a0 <_write_r+0x20>)
 8008684:	4604      	mov	r4, r0
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	2200      	movs	r2, #0
 800868c:	602a      	str	r2, [r5, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f7fa f9d2 	bl	8002a38 <_write>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_write_r+0x1e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_write_r+0x1e>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	20005c3c 	.word	0x20005c3c

080086a4 <__errno>:
 80086a4:	4b01      	ldr	r3, [pc, #4]	@ (80086ac <__errno+0x8>)
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20000e34 	.word	0x20000e34

080086b0 <__libc_init_array>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4d0d      	ldr	r5, [pc, #52]	@ (80086e8 <__libc_init_array+0x38>)
 80086b4:	4c0d      	ldr	r4, [pc, #52]	@ (80086ec <__libc_init_array+0x3c>)
 80086b6:	1b64      	subs	r4, r4, r5
 80086b8:	10a4      	asrs	r4, r4, #2
 80086ba:	2600      	movs	r6, #0
 80086bc:	42a6      	cmp	r6, r4
 80086be:	d109      	bne.n	80086d4 <__libc_init_array+0x24>
 80086c0:	4d0b      	ldr	r5, [pc, #44]	@ (80086f0 <__libc_init_array+0x40>)
 80086c2:	4c0c      	ldr	r4, [pc, #48]	@ (80086f4 <__libc_init_array+0x44>)
 80086c4:	f003 f8ec 	bl	800b8a0 <_init>
 80086c8:	1b64      	subs	r4, r4, r5
 80086ca:	10a4      	asrs	r4, r4, #2
 80086cc:	2600      	movs	r6, #0
 80086ce:	42a6      	cmp	r6, r4
 80086d0:	d105      	bne.n	80086de <__libc_init_array+0x2e>
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d8:	4798      	blx	r3
 80086da:	3601      	adds	r6, #1
 80086dc:	e7ee      	b.n	80086bc <__libc_init_array+0xc>
 80086de:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e2:	4798      	blx	r3
 80086e4:	3601      	adds	r6, #1
 80086e6:	e7f2      	b.n	80086ce <__libc_init_array+0x1e>
 80086e8:	0800da58 	.word	0x0800da58
 80086ec:	0800da58 	.word	0x0800da58
 80086f0:	0800da58 	.word	0x0800da58
 80086f4:	0800da5c 	.word	0x0800da5c

080086f8 <__retarget_lock_init_recursive>:
 80086f8:	4770      	bx	lr

080086fa <__retarget_lock_acquire_recursive>:
 80086fa:	4770      	bx	lr

080086fc <__retarget_lock_release_recursive>:
 80086fc:	4770      	bx	lr

080086fe <memcpy>:
 80086fe:	440a      	add	r2, r1
 8008700:	4291      	cmp	r1, r2
 8008702:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008706:	d100      	bne.n	800870a <memcpy+0xc>
 8008708:	4770      	bx	lr
 800870a:	b510      	push	{r4, lr}
 800870c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008714:	4291      	cmp	r1, r2
 8008716:	d1f9      	bne.n	800870c <memcpy+0xe>
 8008718:	bd10      	pop	{r4, pc}

0800871a <quorem>:
 800871a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871e:	6903      	ldr	r3, [r0, #16]
 8008720:	690c      	ldr	r4, [r1, #16]
 8008722:	42a3      	cmp	r3, r4
 8008724:	4607      	mov	r7, r0
 8008726:	db7e      	blt.n	8008826 <quorem+0x10c>
 8008728:	3c01      	subs	r4, #1
 800872a:	f101 0814 	add.w	r8, r1, #20
 800872e:	00a3      	lsls	r3, r4, #2
 8008730:	f100 0514 	add.w	r5, r0, #20
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008740:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008744:	3301      	adds	r3, #1
 8008746:	429a      	cmp	r2, r3
 8008748:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800874c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008750:	d32e      	bcc.n	80087b0 <quorem+0x96>
 8008752:	f04f 0a00 	mov.w	sl, #0
 8008756:	46c4      	mov	ip, r8
 8008758:	46ae      	mov	lr, r5
 800875a:	46d3      	mov	fp, sl
 800875c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008760:	b298      	uxth	r0, r3
 8008762:	fb06 a000 	mla	r0, r6, r0, sl
 8008766:	0c02      	lsrs	r2, r0, #16
 8008768:	0c1b      	lsrs	r3, r3, #16
 800876a:	fb06 2303 	mla	r3, r6, r3, r2
 800876e:	f8de 2000 	ldr.w	r2, [lr]
 8008772:	b280      	uxth	r0, r0
 8008774:	b292      	uxth	r2, r2
 8008776:	1a12      	subs	r2, r2, r0
 8008778:	445a      	add	r2, fp
 800877a:	f8de 0000 	ldr.w	r0, [lr]
 800877e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008782:	b29b      	uxth	r3, r3
 8008784:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008788:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800878c:	b292      	uxth	r2, r2
 800878e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008792:	45e1      	cmp	r9, ip
 8008794:	f84e 2b04 	str.w	r2, [lr], #4
 8008798:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800879c:	d2de      	bcs.n	800875c <quorem+0x42>
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	58eb      	ldr	r3, [r5, r3]
 80087a2:	b92b      	cbnz	r3, 80087b0 <quorem+0x96>
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	3b04      	subs	r3, #4
 80087a8:	429d      	cmp	r5, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	d32f      	bcc.n	800880e <quorem+0xf4>
 80087ae:	613c      	str	r4, [r7, #16]
 80087b0:	4638      	mov	r0, r7
 80087b2:	f001 f97b 	bl	8009aac <__mcmp>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	db25      	blt.n	8008806 <quorem+0xec>
 80087ba:	4629      	mov	r1, r5
 80087bc:	2000      	movs	r0, #0
 80087be:	f858 2b04 	ldr.w	r2, [r8], #4
 80087c2:	f8d1 c000 	ldr.w	ip, [r1]
 80087c6:	fa1f fe82 	uxth.w	lr, r2
 80087ca:	fa1f f38c 	uxth.w	r3, ip
 80087ce:	eba3 030e 	sub.w	r3, r3, lr
 80087d2:	4403      	add	r3, r0
 80087d4:	0c12      	lsrs	r2, r2, #16
 80087d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087e4:	45c1      	cmp	r9, r8
 80087e6:	f841 3b04 	str.w	r3, [r1], #4
 80087ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087ee:	d2e6      	bcs.n	80087be <quorem+0xa4>
 80087f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087f8:	b922      	cbnz	r2, 8008804 <quorem+0xea>
 80087fa:	3b04      	subs	r3, #4
 80087fc:	429d      	cmp	r5, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	d30b      	bcc.n	800881a <quorem+0x100>
 8008802:	613c      	str	r4, [r7, #16]
 8008804:	3601      	adds	r6, #1
 8008806:	4630      	mov	r0, r6
 8008808:	b003      	add	sp, #12
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	3b04      	subs	r3, #4
 8008812:	2a00      	cmp	r2, #0
 8008814:	d1cb      	bne.n	80087ae <quorem+0x94>
 8008816:	3c01      	subs	r4, #1
 8008818:	e7c6      	b.n	80087a8 <quorem+0x8e>
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	3b04      	subs	r3, #4
 800881e:	2a00      	cmp	r2, #0
 8008820:	d1ef      	bne.n	8008802 <quorem+0xe8>
 8008822:	3c01      	subs	r4, #1
 8008824:	e7ea      	b.n	80087fc <quorem+0xe2>
 8008826:	2000      	movs	r0, #0
 8008828:	e7ee      	b.n	8008808 <quorem+0xee>
 800882a:	0000      	movs	r0, r0
 800882c:	0000      	movs	r0, r0
	...

08008830 <_dtoa_r>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	69c7      	ldr	r7, [r0, #28]
 8008836:	b099      	sub	sp, #100	@ 0x64
 8008838:	ed8d 0b02 	vstr	d0, [sp, #8]
 800883c:	ec55 4b10 	vmov	r4, r5, d0
 8008840:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008842:	9109      	str	r1, [sp, #36]	@ 0x24
 8008844:	4683      	mov	fp, r0
 8008846:	920e      	str	r2, [sp, #56]	@ 0x38
 8008848:	9313      	str	r3, [sp, #76]	@ 0x4c
 800884a:	b97f      	cbnz	r7, 800886c <_dtoa_r+0x3c>
 800884c:	2010      	movs	r0, #16
 800884e:	f000 fdfd 	bl	800944c <malloc>
 8008852:	4602      	mov	r2, r0
 8008854:	f8cb 001c 	str.w	r0, [fp, #28]
 8008858:	b920      	cbnz	r0, 8008864 <_dtoa_r+0x34>
 800885a:	4ba7      	ldr	r3, [pc, #668]	@ (8008af8 <_dtoa_r+0x2c8>)
 800885c:	21ef      	movs	r1, #239	@ 0xef
 800885e:	48a7      	ldr	r0, [pc, #668]	@ (8008afc <_dtoa_r+0x2cc>)
 8008860:	f001 fc5a 	bl	800a118 <__assert_func>
 8008864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008868:	6007      	str	r7, [r0, #0]
 800886a:	60c7      	str	r7, [r0, #12]
 800886c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008870:	6819      	ldr	r1, [r3, #0]
 8008872:	b159      	cbz	r1, 800888c <_dtoa_r+0x5c>
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	604a      	str	r2, [r1, #4]
 8008878:	2301      	movs	r3, #1
 800887a:	4093      	lsls	r3, r2
 800887c:	608b      	str	r3, [r1, #8]
 800887e:	4658      	mov	r0, fp
 8008880:	f000 feda 	bl	8009638 <_Bfree>
 8008884:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	1e2b      	subs	r3, r5, #0
 800888e:	bfb9      	ittee	lt
 8008890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008894:	9303      	strlt	r3, [sp, #12]
 8008896:	2300      	movge	r3, #0
 8008898:	6033      	strge	r3, [r6, #0]
 800889a:	9f03      	ldr	r7, [sp, #12]
 800889c:	4b98      	ldr	r3, [pc, #608]	@ (8008b00 <_dtoa_r+0x2d0>)
 800889e:	bfbc      	itt	lt
 80088a0:	2201      	movlt	r2, #1
 80088a2:	6032      	strlt	r2, [r6, #0]
 80088a4:	43bb      	bics	r3, r7
 80088a6:	d112      	bne.n	80088ce <_dtoa_r+0x9e>
 80088a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088b4:	4323      	orrs	r3, r4
 80088b6:	f000 854d 	beq.w	8009354 <_dtoa_r+0xb24>
 80088ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b14 <_dtoa_r+0x2e4>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 854f 	beq.w	8009364 <_dtoa_r+0xb34>
 80088c6:	f10a 0303 	add.w	r3, sl, #3
 80088ca:	f000 bd49 	b.w	8009360 <_dtoa_r+0xb30>
 80088ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	ec51 0b17 	vmov	r0, r1, d7
 80088d8:	2300      	movs	r3, #0
 80088da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088de:	f7f8 f8fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80088e2:	4680      	mov	r8, r0
 80088e4:	b158      	cbz	r0, 80088fe <_dtoa_r+0xce>
 80088e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088e8:	2301      	movs	r3, #1
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088ee:	b113      	cbz	r3, 80088f6 <_dtoa_r+0xc6>
 80088f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088f2:	4b84      	ldr	r3, [pc, #528]	@ (8008b04 <_dtoa_r+0x2d4>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b18 <_dtoa_r+0x2e8>
 80088fa:	f000 bd33 	b.w	8009364 <_dtoa_r+0xb34>
 80088fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008902:	aa16      	add	r2, sp, #88	@ 0x58
 8008904:	a917      	add	r1, sp, #92	@ 0x5c
 8008906:	4658      	mov	r0, fp
 8008908:	f001 f980 	bl	8009c0c <__d2b>
 800890c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008910:	4681      	mov	r9, r0
 8008912:	2e00      	cmp	r6, #0
 8008914:	d077      	beq.n	8008a06 <_dtoa_r+0x1d6>
 8008916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008918:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800891c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800892c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008930:	4619      	mov	r1, r3
 8008932:	2200      	movs	r2, #0
 8008934:	4b74      	ldr	r3, [pc, #464]	@ (8008b08 <_dtoa_r+0x2d8>)
 8008936:	f7f7 fcaf 	bl	8000298 <__aeabi_dsub>
 800893a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ae0 <_dtoa_r+0x2b0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe62 	bl	8000608 <__aeabi_dmul>
 8008944:	a368      	add	r3, pc, #416	@ (adr r3, 8008ae8 <_dtoa_r+0x2b8>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fca7 	bl	800029c <__adddf3>
 800894e:	4604      	mov	r4, r0
 8008950:	4630      	mov	r0, r6
 8008952:	460d      	mov	r5, r1
 8008954:	f7f7 fdee 	bl	8000534 <__aeabi_i2d>
 8008958:	a365      	add	r3, pc, #404	@ (adr r3, 8008af0 <_dtoa_r+0x2c0>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fe53 	bl	8000608 <__aeabi_dmul>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	f7f7 fc97 	bl	800029c <__adddf3>
 800896e:	4604      	mov	r4, r0
 8008970:	460d      	mov	r5, r1
 8008972:	f7f8 f8f9 	bl	8000b68 <__aeabi_d2iz>
 8008976:	2200      	movs	r2, #0
 8008978:	4607      	mov	r7, r0
 800897a:	2300      	movs	r3, #0
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	f7f8 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8008984:	b140      	cbz	r0, 8008998 <_dtoa_r+0x168>
 8008986:	4638      	mov	r0, r7
 8008988:	f7f7 fdd4 	bl	8000534 <__aeabi_i2d>
 800898c:	4622      	mov	r2, r4
 800898e:	462b      	mov	r3, r5
 8008990:	f7f8 f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008994:	b900      	cbnz	r0, 8008998 <_dtoa_r+0x168>
 8008996:	3f01      	subs	r7, #1
 8008998:	2f16      	cmp	r7, #22
 800899a:	d851      	bhi.n	8008a40 <_dtoa_r+0x210>
 800899c:	4b5b      	ldr	r3, [pc, #364]	@ (8008b0c <_dtoa_r+0x2dc>)
 800899e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089aa:	f7f8 f89f 	bl	8000aec <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d048      	beq.n	8008a44 <_dtoa_r+0x214>
 80089b2:	3f01      	subs	r7, #1
 80089b4:	2300      	movs	r3, #0
 80089b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80089b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089ba:	1b9b      	subs	r3, r3, r6
 80089bc:	1e5a      	subs	r2, r3, #1
 80089be:	bf44      	itt	mi
 80089c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80089c4:	2300      	movmi	r3, #0
 80089c6:	9208      	str	r2, [sp, #32]
 80089c8:	bf54      	ite	pl
 80089ca:	f04f 0800 	movpl.w	r8, #0
 80089ce:	9308      	strmi	r3, [sp, #32]
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	db39      	blt.n	8008a48 <_dtoa_r+0x218>
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089d8:	443b      	add	r3, r7
 80089da:	9308      	str	r3, [sp, #32]
 80089dc:	2300      	movs	r3, #0
 80089de:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e2:	2b09      	cmp	r3, #9
 80089e4:	d864      	bhi.n	8008ab0 <_dtoa_r+0x280>
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	bfc4      	itt	gt
 80089ea:	3b04      	subgt	r3, #4
 80089ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f0:	f1a3 0302 	sub.w	r3, r3, #2
 80089f4:	bfcc      	ite	gt
 80089f6:	2400      	movgt	r4, #0
 80089f8:	2401      	movle	r4, #1
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d863      	bhi.n	8008ac6 <_dtoa_r+0x296>
 80089fe:	e8df f003 	tbb	[pc, r3]
 8008a02:	372a      	.short	0x372a
 8008a04:	5535      	.short	0x5535
 8008a06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a0a:	441e      	add	r6, r3
 8008a0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	bfc1      	itttt	gt
 8008a14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a18:	409f      	lslgt	r7, r3
 8008a1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a22:	bfd6      	itet	le
 8008a24:	f1c3 0320 	rsble	r3, r3, #32
 8008a28:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a2c:	fa04 f003 	lslle.w	r0, r4, r3
 8008a30:	f7f7 fd70 	bl	8000514 <__aeabi_ui2d>
 8008a34:	2201      	movs	r2, #1
 8008a36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a3a:	3e01      	subs	r6, #1
 8008a3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a3e:	e777      	b.n	8008930 <_dtoa_r+0x100>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7b8      	b.n	80089b6 <_dtoa_r+0x186>
 8008a44:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a46:	e7b7      	b.n	80089b8 <_dtoa_r+0x188>
 8008a48:	427b      	negs	r3, r7
 8008a4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	eba8 0807 	sub.w	r8, r8, r7
 8008a52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a54:	e7c4      	b.n	80089e0 <_dtoa_r+0x1b0>
 8008a56:	2300      	movs	r3, #0
 8008a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dc35      	bgt.n	8008acc <_dtoa_r+0x29c>
 8008a60:	2301      	movs	r3, #1
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	9307      	str	r3, [sp, #28]
 8008a66:	461a      	mov	r2, r3
 8008a68:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a6a:	e00b      	b.n	8008a84 <_dtoa_r+0x254>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e7f3      	b.n	8008a58 <_dtoa_r+0x228>
 8008a70:	2300      	movs	r3, #0
 8008a72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	9307      	str	r3, [sp, #28]
 8008a80:	bfb8      	it	lt
 8008a82:	2301      	movlt	r3, #1
 8008a84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2204      	movs	r2, #4
 8008a8c:	f102 0514 	add.w	r5, r2, #20
 8008a90:	429d      	cmp	r5, r3
 8008a92:	d91f      	bls.n	8008ad4 <_dtoa_r+0x2a4>
 8008a94:	6041      	str	r1, [r0, #4]
 8008a96:	4658      	mov	r0, fp
 8008a98:	f000 fd8e 	bl	80095b8 <_Balloc>
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d13c      	bne.n	8008b1c <_dtoa_r+0x2ec>
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <_dtoa_r+0x2e0>)
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008aaa:	e6d8      	b.n	800885e <_dtoa_r+0x2e>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e7e0      	b.n	8008a72 <_dtoa_r+0x242>
 8008ab0:	2401      	movs	r4, #1
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ab6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ab8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2312      	movs	r3, #18
 8008ac4:	e7d0      	b.n	8008a68 <_dtoa_r+0x238>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aca:	e7f5      	b.n	8008ab8 <_dtoa_r+0x288>
 8008acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	e7d7      	b.n	8008a84 <_dtoa_r+0x254>
 8008ad4:	3101      	adds	r1, #1
 8008ad6:	0052      	lsls	r2, r2, #1
 8008ad8:	e7d8      	b.n	8008a8c <_dtoa_r+0x25c>
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
 8008ae0:	636f4361 	.word	0x636f4361
 8008ae4:	3fd287a7 	.word	0x3fd287a7
 8008ae8:	8b60c8b3 	.word	0x8b60c8b3
 8008aec:	3fc68a28 	.word	0x3fc68a28
 8008af0:	509f79fb 	.word	0x509f79fb
 8008af4:	3fd34413 	.word	0x3fd34413
 8008af8:	0800d545 	.word	0x0800d545
 8008afc:	0800d55c 	.word	0x0800d55c
 8008b00:	7ff00000 	.word	0x7ff00000
 8008b04:	0800d515 	.word	0x0800d515
 8008b08:	3ff80000 	.word	0x3ff80000
 8008b0c:	0800d658 	.word	0x0800d658
 8008b10:	0800d5b4 	.word	0x0800d5b4
 8008b14:	0800d541 	.word	0x0800d541
 8008b18:	0800d514 	.word	0x0800d514
 8008b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b20:	6018      	str	r0, [r3, #0]
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	2b0e      	cmp	r3, #14
 8008b26:	f200 80a4 	bhi.w	8008c72 <_dtoa_r+0x442>
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	f000 80a1 	beq.w	8008c72 <_dtoa_r+0x442>
 8008b30:	2f00      	cmp	r7, #0
 8008b32:	dd33      	ble.n	8008b9c <_dtoa_r+0x36c>
 8008b34:	4bad      	ldr	r3, [pc, #692]	@ (8008dec <_dtoa_r+0x5bc>)
 8008b36:	f007 020f 	and.w	r2, r7, #15
 8008b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b3e:	ed93 7b00 	vldr	d7, [r3]
 8008b42:	05f8      	lsls	r0, r7, #23
 8008b44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b4c:	d516      	bpl.n	8008b7c <_dtoa_r+0x34c>
 8008b4e:	4ba8      	ldr	r3, [pc, #672]	@ (8008df0 <_dtoa_r+0x5c0>)
 8008b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b58:	f7f7 fe80 	bl	800085c <__aeabi_ddiv>
 8008b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b60:	f004 040f 	and.w	r4, r4, #15
 8008b64:	2603      	movs	r6, #3
 8008b66:	4da2      	ldr	r5, [pc, #648]	@ (8008df0 <_dtoa_r+0x5c0>)
 8008b68:	b954      	cbnz	r4, 8008b80 <_dtoa_r+0x350>
 8008b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b72:	f7f7 fe73 	bl	800085c <__aeabi_ddiv>
 8008b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b7a:	e028      	b.n	8008bce <_dtoa_r+0x39e>
 8008b7c:	2602      	movs	r6, #2
 8008b7e:	e7f2      	b.n	8008b66 <_dtoa_r+0x336>
 8008b80:	07e1      	lsls	r1, r4, #31
 8008b82:	d508      	bpl.n	8008b96 <_dtoa_r+0x366>
 8008b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b8c:	f7f7 fd3c 	bl	8000608 <__aeabi_dmul>
 8008b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b94:	3601      	adds	r6, #1
 8008b96:	1064      	asrs	r4, r4, #1
 8008b98:	3508      	adds	r5, #8
 8008b9a:	e7e5      	b.n	8008b68 <_dtoa_r+0x338>
 8008b9c:	f000 80d2 	beq.w	8008d44 <_dtoa_r+0x514>
 8008ba0:	427c      	negs	r4, r7
 8008ba2:	4b92      	ldr	r3, [pc, #584]	@ (8008dec <_dtoa_r+0x5bc>)
 8008ba4:	4d92      	ldr	r5, [pc, #584]	@ (8008df0 <_dtoa_r+0x5c0>)
 8008ba6:	f004 020f 	and.w	r2, r4, #15
 8008baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bb6:	f7f7 fd27 	bl	8000608 <__aeabi_dmul>
 8008bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bbe:	1124      	asrs	r4, r4, #4
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2602      	movs	r6, #2
 8008bc4:	2c00      	cmp	r4, #0
 8008bc6:	f040 80b2 	bne.w	8008d2e <_dtoa_r+0x4fe>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1d3      	bne.n	8008b76 <_dtoa_r+0x346>
 8008bce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80b7 	beq.w	8008d48 <_dtoa_r+0x518>
 8008bda:	4b86      	ldr	r3, [pc, #536]	@ (8008df4 <_dtoa_r+0x5c4>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 ff83 	bl	8000aec <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f000 80ae 	beq.w	8008d48 <_dtoa_r+0x518>
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80aa 	beq.w	8008d48 <_dtoa_r+0x518>
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dd37      	ble.n	8008c6a <_dtoa_r+0x43a>
 8008bfa:	1e7b      	subs	r3, r7, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4b7d      	ldr	r3, [pc, #500]	@ (8008df8 <_dtoa_r+0x5c8>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7f7 fcff 	bl	8000608 <__aeabi_dmul>
 8008c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c0e:	9c00      	ldr	r4, [sp, #0]
 8008c10:	3601      	adds	r6, #1
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7f7 fc8e 	bl	8000534 <__aeabi_i2d>
 8008c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1c:	f7f7 fcf4 	bl	8000608 <__aeabi_dmul>
 8008c20:	4b76      	ldr	r3, [pc, #472]	@ (8008dfc <_dtoa_r+0x5cc>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	f7f7 fb3a 	bl	800029c <__adddf3>
 8008c28:	4605      	mov	r5, r0
 8008c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	f040 808d 	bne.w	8008d4e <_dtoa_r+0x51e>
 8008c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c38:	4b71      	ldr	r3, [pc, #452]	@ (8008e00 <_dtoa_r+0x5d0>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4633      	mov	r3, r6
 8008c4c:	f7f7 ff6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f040 828b 	bne.w	800916c <_dtoa_r+0x93c>
 8008c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c60:	f7f7 ff44 	bl	8000aec <__aeabi_dcmplt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f040 8128 	bne.w	8008eba <_dtoa_r+0x68a>
 8008c6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f2c0 815a 	blt.w	8008f2e <_dtoa_r+0x6fe>
 8008c7a:	2f0e      	cmp	r7, #14
 8008c7c:	f300 8157 	bgt.w	8008f2e <_dtoa_r+0x6fe>
 8008c80:	4b5a      	ldr	r3, [pc, #360]	@ (8008dec <_dtoa_r+0x5bc>)
 8008c82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c86:	ed93 7b00 	vldr	d7, [r3]
 8008c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	ed8d 7b00 	vstr	d7, [sp]
 8008c92:	da03      	bge.n	8008c9c <_dtoa_r+0x46c>
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f340 8101 	ble.w	8008e9e <_dtoa_r+0x66e>
 8008c9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ca0:	4656      	mov	r6, sl
 8008ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 fdd7 	bl	800085c <__aeabi_ddiv>
 8008cae:	f7f7 ff5b 	bl	8000b68 <__aeabi_d2iz>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	f7f7 fc3e 	bl	8000534 <__aeabi_i2d>
 8008cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ccc:	f7f7 fae4 	bl	8000298 <__aeabi_dsub>
 8008cd0:	f806 4b01 	strb.w	r4, [r6], #1
 8008cd4:	9d07      	ldr	r5, [sp, #28]
 8008cd6:	eba6 040a 	sub.w	r4, r6, sl
 8008cda:	42a5      	cmp	r5, r4
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	f040 8117 	bne.w	8008f12 <_dtoa_r+0x6e2>
 8008ce4:	f7f7 fada 	bl	800029c <__adddf3>
 8008ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	f7f7 ff1a 	bl	8000b28 <__aeabi_dcmpgt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f040 80f9 	bne.w	8008eec <_dtoa_r+0x6bc>
 8008cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d06:	b118      	cbz	r0, 8008d10 <_dtoa_r+0x4e0>
 8008d08:	f018 0f01 	tst.w	r8, #1
 8008d0c:	f040 80ee 	bne.w	8008eec <_dtoa_r+0x6bc>
 8008d10:	4649      	mov	r1, r9
 8008d12:	4658      	mov	r0, fp
 8008d14:	f000 fc90 	bl	8009638 <_Bfree>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	7033      	strb	r3, [r6, #0]
 8008d1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d1e:	3701      	adds	r7, #1
 8008d20:	601f      	str	r7, [r3, #0]
 8008d22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 831d 	beq.w	8009364 <_dtoa_r+0xb34>
 8008d2a:	601e      	str	r6, [r3, #0]
 8008d2c:	e31a      	b.n	8009364 <_dtoa_r+0xb34>
 8008d2e:	07e2      	lsls	r2, r4, #31
 8008d30:	d505      	bpl.n	8008d3e <_dtoa_r+0x50e>
 8008d32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	1064      	asrs	r4, r4, #1
 8008d40:	3508      	adds	r5, #8
 8008d42:	e73f      	b.n	8008bc4 <_dtoa_r+0x394>
 8008d44:	2602      	movs	r6, #2
 8008d46:	e742      	b.n	8008bce <_dtoa_r+0x39e>
 8008d48:	9c07      	ldr	r4, [sp, #28]
 8008d4a:	9704      	str	r7, [sp, #16]
 8008d4c:	e761      	b.n	8008c12 <_dtoa_r+0x3e2>
 8008d4e:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <_dtoa_r+0x5bc>)
 8008d50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d5a:	4454      	add	r4, sl
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	d053      	beq.n	8008e08 <_dtoa_r+0x5d8>
 8008d60:	4928      	ldr	r1, [pc, #160]	@ (8008e04 <_dtoa_r+0x5d4>)
 8008d62:	2000      	movs	r0, #0
 8008d64:	f7f7 fd7a 	bl	800085c <__aeabi_ddiv>
 8008d68:	4633      	mov	r3, r6
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	f7f7 fa94 	bl	8000298 <__aeabi_dsub>
 8008d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d74:	4656      	mov	r6, sl
 8008d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7a:	f7f7 fef5 	bl	8000b68 <__aeabi_d2iz>
 8008d7e:	4605      	mov	r5, r0
 8008d80:	f7f7 fbd8 	bl	8000534 <__aeabi_i2d>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d8c:	f7f7 fa84 	bl	8000298 <__aeabi_dsub>
 8008d90:	3530      	adds	r5, #48	@ 0x30
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d9a:	f806 5b01 	strb.w	r5, [r6], #1
 8008d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008da2:	f7f7 fea3 	bl	8000aec <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d171      	bne.n	8008e8e <_dtoa_r+0x65e>
 8008daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dae:	4911      	ldr	r1, [pc, #68]	@ (8008df4 <_dtoa_r+0x5c4>)
 8008db0:	2000      	movs	r0, #0
 8008db2:	f7f7 fa71 	bl	8000298 <__aeabi_dsub>
 8008db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dba:	f7f7 fe97 	bl	8000aec <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 8095 	bne.w	8008eee <_dtoa_r+0x6be>
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	f43f af50 	beq.w	8008c6a <_dtoa_r+0x43a>
 8008dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dce:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <_dtoa_r+0x5c8>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fc19 	bl	8000608 <__aeabi_dmul>
 8008dd6:	4b08      	ldr	r3, [pc, #32]	@ (8008df8 <_dtoa_r+0x5c8>)
 8008dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ddc:	2200      	movs	r2, #0
 8008dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de2:	f7f7 fc11 	bl	8000608 <__aeabi_dmul>
 8008de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dea:	e7c4      	b.n	8008d76 <_dtoa_r+0x546>
 8008dec:	0800d658 	.word	0x0800d658
 8008df0:	0800d630 	.word	0x0800d630
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	40240000 	.word	0x40240000
 8008dfc:	401c0000 	.word	0x401c0000
 8008e00:	40140000 	.word	0x40140000
 8008e04:	3fe00000 	.word	0x3fe00000
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f7f7 fbfc 	bl	8000608 <__aeabi_dmul>
 8008e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e14:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e16:	4656      	mov	r6, sl
 8008e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1c:	f7f7 fea4 	bl	8000b68 <__aeabi_d2iz>
 8008e20:	4605      	mov	r5, r0
 8008e22:	f7f7 fb87 	bl	8000534 <__aeabi_i2d>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	f7f7 fa33 	bl	8000298 <__aeabi_dsub>
 8008e32:	3530      	adds	r5, #48	@ 0x30
 8008e34:	f806 5b01 	strb.w	r5, [r6], #1
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	42a6      	cmp	r6, r4
 8008e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	d124      	bne.n	8008e92 <_dtoa_r+0x662>
 8008e48:	4bac      	ldr	r3, [pc, #688]	@ (80090fc <_dtoa_r+0x8cc>)
 8008e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e4e:	f7f7 fa25 	bl	800029c <__adddf3>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5a:	f7f7 fe65 	bl	8000b28 <__aeabi_dcmpgt>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d145      	bne.n	8008eee <_dtoa_r+0x6be>
 8008e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e66:	49a5      	ldr	r1, [pc, #660]	@ (80090fc <_dtoa_r+0x8cc>)
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f7f7 fa15 	bl	8000298 <__aeabi_dsub>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e76:	f7f7 fe39 	bl	8000aec <__aeabi_dcmplt>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	f43f aef5 	beq.w	8008c6a <_dtoa_r+0x43a>
 8008e80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e82:	1e73      	subs	r3, r6, #1
 8008e84:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e8a:	2b30      	cmp	r3, #48	@ 0x30
 8008e8c:	d0f8      	beq.n	8008e80 <_dtoa_r+0x650>
 8008e8e:	9f04      	ldr	r7, [sp, #16]
 8008e90:	e73e      	b.n	8008d10 <_dtoa_r+0x4e0>
 8008e92:	4b9b      	ldr	r3, [pc, #620]	@ (8009100 <_dtoa_r+0x8d0>)
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9c:	e7bc      	b.n	8008e18 <_dtoa_r+0x5e8>
 8008e9e:	d10c      	bne.n	8008eba <_dtoa_r+0x68a>
 8008ea0:	4b98      	ldr	r3, [pc, #608]	@ (8009104 <_dtoa_r+0x8d4>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ea8:	f7f7 fbae 	bl	8000608 <__aeabi_dmul>
 8008eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb0:	f7f7 fe30 	bl	8000b14 <__aeabi_dcmpge>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f000 8157 	beq.w	8009168 <_dtoa_r+0x938>
 8008eba:	2400      	movs	r4, #0
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	4656      	mov	r6, sl
 8008ec6:	2700      	movs	r7, #0
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f000 fbb4 	bl	8009638 <_Bfree>
 8008ed0:	2d00      	cmp	r5, #0
 8008ed2:	d0dc      	beq.n	8008e8e <_dtoa_r+0x65e>
 8008ed4:	b12f      	cbz	r7, 8008ee2 <_dtoa_r+0x6b2>
 8008ed6:	42af      	cmp	r7, r5
 8008ed8:	d003      	beq.n	8008ee2 <_dtoa_r+0x6b2>
 8008eda:	4639      	mov	r1, r7
 8008edc:	4658      	mov	r0, fp
 8008ede:	f000 fbab 	bl	8009638 <_Bfree>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f000 fba7 	bl	8009638 <_Bfree>
 8008eea:	e7d0      	b.n	8008e8e <_dtoa_r+0x65e>
 8008eec:	9704      	str	r7, [sp, #16]
 8008eee:	4633      	mov	r3, r6
 8008ef0:	461e      	mov	r6, r3
 8008ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ef6:	2a39      	cmp	r2, #57	@ 0x39
 8008ef8:	d107      	bne.n	8008f0a <_dtoa_r+0x6da>
 8008efa:	459a      	cmp	sl, r3
 8008efc:	d1f8      	bne.n	8008ef0 <_dtoa_r+0x6c0>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	3201      	adds	r2, #1
 8008f02:	9204      	str	r2, [sp, #16]
 8008f04:	2230      	movs	r2, #48	@ 0x30
 8008f06:	f88a 2000 	strb.w	r2, [sl]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	3201      	adds	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	e7bd      	b.n	8008e8e <_dtoa_r+0x65e>
 8008f12:	4b7b      	ldr	r3, [pc, #492]	@ (8009100 <_dtoa_r+0x8d0>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	f7f7 fb77 	bl	8000608 <__aeabi_dmul>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	f7f7 fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f aebb 	beq.w	8008ca2 <_dtoa_r+0x472>
 8008f2c:	e6f0      	b.n	8008d10 <_dtoa_r+0x4e0>
 8008f2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	f000 80db 	beq.w	80090ec <_dtoa_r+0x8bc>
 8008f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f38:	2a01      	cmp	r2, #1
 8008f3a:	f300 80bf 	bgt.w	80090bc <_dtoa_r+0x88c>
 8008f3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	f000 80b7 	beq.w	80090b4 <_dtoa_r+0x884>
 8008f46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f4c:	4646      	mov	r6, r8
 8008f4e:	9a08      	ldr	r2, [sp, #32]
 8008f50:	2101      	movs	r1, #1
 8008f52:	441a      	add	r2, r3
 8008f54:	4658      	mov	r0, fp
 8008f56:	4498      	add	r8, r3
 8008f58:	9208      	str	r2, [sp, #32]
 8008f5a:	f000 fc21 	bl	80097a0 <__i2b>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b15e      	cbz	r6, 8008f7a <_dtoa_r+0x74a>
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dd08      	ble.n	8008f7a <_dtoa_r+0x74a>
 8008f68:	42b3      	cmp	r3, r6
 8008f6a:	9a08      	ldr	r2, [sp, #32]
 8008f6c:	bfa8      	it	ge
 8008f6e:	4633      	movge	r3, r6
 8008f70:	eba8 0803 	sub.w	r8, r8, r3
 8008f74:	1af6      	subs	r6, r6, r3
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	9308      	str	r3, [sp, #32]
 8008f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7c:	b1f3      	cbz	r3, 8008fbc <_dtoa_r+0x78c>
 8008f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 80b7 	beq.w	80090f4 <_dtoa_r+0x8c4>
 8008f86:	b18c      	cbz	r4, 8008fac <_dtoa_r+0x77c>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	4658      	mov	r0, fp
 8008f8e:	f000 fcc7 	bl	8009920 <__pow5mult>
 8008f92:	464a      	mov	r2, r9
 8008f94:	4601      	mov	r1, r0
 8008f96:	4605      	mov	r5, r0
 8008f98:	4658      	mov	r0, fp
 8008f9a:	f000 fc17 	bl	80097cc <__multiply>
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	9004      	str	r0, [sp, #16]
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fb48 	bl	8009638 <_Bfree>
 8008fa8:	9b04      	ldr	r3, [sp, #16]
 8008faa:	4699      	mov	r9, r3
 8008fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fae:	1b1a      	subs	r2, r3, r4
 8008fb0:	d004      	beq.n	8008fbc <_dtoa_r+0x78c>
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	f000 fcb3 	bl	8009920 <__pow5mult>
 8008fba:	4681      	mov	r9, r0
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 fbee 	bl	80097a0 <__i2b>
 8008fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 81cf 	beq.w	800936c <_dtoa_r+0xb3c>
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	4658      	mov	r0, fp
 8008fd4:	f000 fca4 	bl	8009920 <__pow5mult>
 8008fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	4604      	mov	r4, r0
 8008fde:	f300 8095 	bgt.w	800910c <_dtoa_r+0x8dc>
 8008fe2:	9b02      	ldr	r3, [sp, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f040 8087 	bne.w	80090f8 <_dtoa_r+0x8c8>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 8089 	bne.w	8009108 <_dtoa_r+0x8d8>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ffc:	0d1b      	lsrs	r3, r3, #20
 8008ffe:	051b      	lsls	r3, r3, #20
 8009000:	b12b      	cbz	r3, 800900e <_dtoa_r+0x7de>
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	3301      	adds	r3, #1
 8009006:	9308      	str	r3, [sp, #32]
 8009008:	f108 0801 	add.w	r8, r8, #1
 800900c:	2301      	movs	r3, #1
 800900e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81b0 	beq.w	8009378 <_dtoa_r+0xb48>
 8009018:	6923      	ldr	r3, [r4, #16]
 800901a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800901e:	6918      	ldr	r0, [r3, #16]
 8009020:	f000 fb72 	bl	8009708 <__hi0bits>
 8009024:	f1c0 0020 	rsb	r0, r0, #32
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	4418      	add	r0, r3
 800902c:	f010 001f 	ands.w	r0, r0, #31
 8009030:	d077      	beq.n	8009122 <_dtoa_r+0x8f2>
 8009032:	f1c0 0320 	rsb	r3, r0, #32
 8009036:	2b04      	cmp	r3, #4
 8009038:	dd6b      	ble.n	8009112 <_dtoa_r+0x8e2>
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	f1c0 001c 	rsb	r0, r0, #28
 8009040:	4403      	add	r3, r0
 8009042:	4480      	add	r8, r0
 8009044:	4406      	add	r6, r0
 8009046:	9308      	str	r3, [sp, #32]
 8009048:	f1b8 0f00 	cmp.w	r8, #0
 800904c:	dd05      	ble.n	800905a <_dtoa_r+0x82a>
 800904e:	4649      	mov	r1, r9
 8009050:	4642      	mov	r2, r8
 8009052:	4658      	mov	r0, fp
 8009054:	f000 fcbe 	bl	80099d4 <__lshift>
 8009058:	4681      	mov	r9, r0
 800905a:	9b08      	ldr	r3, [sp, #32]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd05      	ble.n	800906c <_dtoa_r+0x83c>
 8009060:	4621      	mov	r1, r4
 8009062:	461a      	mov	r2, r3
 8009064:	4658      	mov	r0, fp
 8009066:	f000 fcb5 	bl	80099d4 <__lshift>
 800906a:	4604      	mov	r4, r0
 800906c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800906e:	2b00      	cmp	r3, #0
 8009070:	d059      	beq.n	8009126 <_dtoa_r+0x8f6>
 8009072:	4621      	mov	r1, r4
 8009074:	4648      	mov	r0, r9
 8009076:	f000 fd19 	bl	8009aac <__mcmp>
 800907a:	2800      	cmp	r0, #0
 800907c:	da53      	bge.n	8009126 <_dtoa_r+0x8f6>
 800907e:	1e7b      	subs	r3, r7, #1
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	4649      	mov	r1, r9
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4658      	mov	r0, fp
 800908a:	f000 faf7 	bl	800967c <__multadd>
 800908e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009090:	4681      	mov	r9, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 8172 	beq.w	800937c <_dtoa_r+0xb4c>
 8009098:	2300      	movs	r3, #0
 800909a:	4629      	mov	r1, r5
 800909c:	220a      	movs	r2, #10
 800909e:	4658      	mov	r0, fp
 80090a0:	f000 faec 	bl	800967c <__multadd>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	4605      	mov	r5, r0
 80090aa:	dc67      	bgt.n	800917c <_dtoa_r+0x94c>
 80090ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	dc41      	bgt.n	8009136 <_dtoa_r+0x906>
 80090b2:	e063      	b.n	800917c <_dtoa_r+0x94c>
 80090b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090ba:	e746      	b.n	8008f4a <_dtoa_r+0x71a>
 80090bc:	9b07      	ldr	r3, [sp, #28]
 80090be:	1e5c      	subs	r4, r3, #1
 80090c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	bfbf      	itttt	lt
 80090c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090cc:	1ae3      	sublt	r3, r4, r3
 80090ce:	bfb4      	ite	lt
 80090d0:	18d2      	addlt	r2, r2, r3
 80090d2:	1b1c      	subge	r4, r3, r4
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	bfbc      	itt	lt
 80090d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090da:	2400      	movlt	r4, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfb5      	itete	lt
 80090e0:	eba8 0603 	sublt.w	r6, r8, r3
 80090e4:	9b07      	ldrge	r3, [sp, #28]
 80090e6:	2300      	movlt	r3, #0
 80090e8:	4646      	movge	r6, r8
 80090ea:	e730      	b.n	8008f4e <_dtoa_r+0x71e>
 80090ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090f0:	4646      	mov	r6, r8
 80090f2:	e735      	b.n	8008f60 <_dtoa_r+0x730>
 80090f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090f6:	e75c      	b.n	8008fb2 <_dtoa_r+0x782>
 80090f8:	2300      	movs	r3, #0
 80090fa:	e788      	b.n	800900e <_dtoa_r+0x7de>
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	40240000 	.word	0x40240000
 8009104:	40140000 	.word	0x40140000
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	e780      	b.n	800900e <_dtoa_r+0x7de>
 800910c:	2300      	movs	r3, #0
 800910e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009110:	e782      	b.n	8009018 <_dtoa_r+0x7e8>
 8009112:	d099      	beq.n	8009048 <_dtoa_r+0x818>
 8009114:	9a08      	ldr	r2, [sp, #32]
 8009116:	331c      	adds	r3, #28
 8009118:	441a      	add	r2, r3
 800911a:	4498      	add	r8, r3
 800911c:	441e      	add	r6, r3
 800911e:	9208      	str	r2, [sp, #32]
 8009120:	e792      	b.n	8009048 <_dtoa_r+0x818>
 8009122:	4603      	mov	r3, r0
 8009124:	e7f6      	b.n	8009114 <_dtoa_r+0x8e4>
 8009126:	9b07      	ldr	r3, [sp, #28]
 8009128:	9704      	str	r7, [sp, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc20      	bgt.n	8009170 <_dtoa_r+0x940>
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009132:	2b02      	cmp	r3, #2
 8009134:	dd1e      	ble.n	8009174 <_dtoa_r+0x944>
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f47f aec0 	bne.w	8008ebe <_dtoa_r+0x68e>
 800913e:	4621      	mov	r1, r4
 8009140:	2205      	movs	r2, #5
 8009142:	4658      	mov	r0, fp
 8009144:	f000 fa9a 	bl	800967c <__multadd>
 8009148:	4601      	mov	r1, r0
 800914a:	4604      	mov	r4, r0
 800914c:	4648      	mov	r0, r9
 800914e:	f000 fcad 	bl	8009aac <__mcmp>
 8009152:	2800      	cmp	r0, #0
 8009154:	f77f aeb3 	ble.w	8008ebe <_dtoa_r+0x68e>
 8009158:	4656      	mov	r6, sl
 800915a:	2331      	movs	r3, #49	@ 0x31
 800915c:	f806 3b01 	strb.w	r3, [r6], #1
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	3301      	adds	r3, #1
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	e6ae      	b.n	8008ec6 <_dtoa_r+0x696>
 8009168:	9c07      	ldr	r4, [sp, #28]
 800916a:	9704      	str	r7, [sp, #16]
 800916c:	4625      	mov	r5, r4
 800916e:	e7f3      	b.n	8009158 <_dtoa_r+0x928>
 8009170:	9b07      	ldr	r3, [sp, #28]
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 8104 	beq.w	8009384 <_dtoa_r+0xb54>
 800917c:	2e00      	cmp	r6, #0
 800917e:	dd05      	ble.n	800918c <_dtoa_r+0x95c>
 8009180:	4629      	mov	r1, r5
 8009182:	4632      	mov	r2, r6
 8009184:	4658      	mov	r0, fp
 8009186:	f000 fc25 	bl	80099d4 <__lshift>
 800918a:	4605      	mov	r5, r0
 800918c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d05a      	beq.n	8009248 <_dtoa_r+0xa18>
 8009192:	6869      	ldr	r1, [r5, #4]
 8009194:	4658      	mov	r0, fp
 8009196:	f000 fa0f 	bl	80095b8 <_Balloc>
 800919a:	4606      	mov	r6, r0
 800919c:	b928      	cbnz	r0, 80091aa <_dtoa_r+0x97a>
 800919e:	4b84      	ldr	r3, [pc, #528]	@ (80093b0 <_dtoa_r+0xb80>)
 80091a0:	4602      	mov	r2, r0
 80091a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091a6:	f7ff bb5a 	b.w	800885e <_dtoa_r+0x2e>
 80091aa:	692a      	ldr	r2, [r5, #16]
 80091ac:	3202      	adds	r2, #2
 80091ae:	0092      	lsls	r2, r2, #2
 80091b0:	f105 010c 	add.w	r1, r5, #12
 80091b4:	300c      	adds	r0, #12
 80091b6:	f7ff faa2 	bl	80086fe <memcpy>
 80091ba:	2201      	movs	r2, #1
 80091bc:	4631      	mov	r1, r6
 80091be:	4658      	mov	r0, fp
 80091c0:	f000 fc08 	bl	80099d4 <__lshift>
 80091c4:	f10a 0301 	add.w	r3, sl, #1
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	4453      	add	r3, sl
 80091ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	462f      	mov	r7, r5
 80091d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80091da:	4605      	mov	r5, r0
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	4621      	mov	r1, r4
 80091e0:	3b01      	subs	r3, #1
 80091e2:	4648      	mov	r0, r9
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	f7ff fa98 	bl	800871a <quorem>
 80091ea:	4639      	mov	r1, r7
 80091ec:	9002      	str	r0, [sp, #8]
 80091ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091f2:	4648      	mov	r0, r9
 80091f4:	f000 fc5a 	bl	8009aac <__mcmp>
 80091f8:	462a      	mov	r2, r5
 80091fa:	9008      	str	r0, [sp, #32]
 80091fc:	4621      	mov	r1, r4
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 fc70 	bl	8009ae4 <__mdiff>
 8009204:	68c2      	ldr	r2, [r0, #12]
 8009206:	4606      	mov	r6, r0
 8009208:	bb02      	cbnz	r2, 800924c <_dtoa_r+0xa1c>
 800920a:	4601      	mov	r1, r0
 800920c:	4648      	mov	r0, r9
 800920e:	f000 fc4d 	bl	8009aac <__mcmp>
 8009212:	4602      	mov	r2, r0
 8009214:	4631      	mov	r1, r6
 8009216:	4658      	mov	r0, fp
 8009218:	920e      	str	r2, [sp, #56]	@ 0x38
 800921a:	f000 fa0d 	bl	8009638 <_Bfree>
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009222:	9e07      	ldr	r6, [sp, #28]
 8009224:	ea43 0102 	orr.w	r1, r3, r2
 8009228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922a:	4319      	orrs	r1, r3
 800922c:	d110      	bne.n	8009250 <_dtoa_r+0xa20>
 800922e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009232:	d029      	beq.n	8009288 <_dtoa_r+0xa58>
 8009234:	9b08      	ldr	r3, [sp, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	dd02      	ble.n	8009240 <_dtoa_r+0xa10>
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009240:	9b00      	ldr	r3, [sp, #0]
 8009242:	f883 8000 	strb.w	r8, [r3]
 8009246:	e63f      	b.n	8008ec8 <_dtoa_r+0x698>
 8009248:	4628      	mov	r0, r5
 800924a:	e7bb      	b.n	80091c4 <_dtoa_r+0x994>
 800924c:	2201      	movs	r2, #1
 800924e:	e7e1      	b.n	8009214 <_dtoa_r+0x9e4>
 8009250:	9b08      	ldr	r3, [sp, #32]
 8009252:	2b00      	cmp	r3, #0
 8009254:	db04      	blt.n	8009260 <_dtoa_r+0xa30>
 8009256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009258:	430b      	orrs	r3, r1
 800925a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800925c:	430b      	orrs	r3, r1
 800925e:	d120      	bne.n	80092a2 <_dtoa_r+0xa72>
 8009260:	2a00      	cmp	r2, #0
 8009262:	dded      	ble.n	8009240 <_dtoa_r+0xa10>
 8009264:	4649      	mov	r1, r9
 8009266:	2201      	movs	r2, #1
 8009268:	4658      	mov	r0, fp
 800926a:	f000 fbb3 	bl	80099d4 <__lshift>
 800926e:	4621      	mov	r1, r4
 8009270:	4681      	mov	r9, r0
 8009272:	f000 fc1b 	bl	8009aac <__mcmp>
 8009276:	2800      	cmp	r0, #0
 8009278:	dc03      	bgt.n	8009282 <_dtoa_r+0xa52>
 800927a:	d1e1      	bne.n	8009240 <_dtoa_r+0xa10>
 800927c:	f018 0f01 	tst.w	r8, #1
 8009280:	d0de      	beq.n	8009240 <_dtoa_r+0xa10>
 8009282:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009286:	d1d8      	bne.n	800923a <_dtoa_r+0xa0a>
 8009288:	9a00      	ldr	r2, [sp, #0]
 800928a:	2339      	movs	r3, #57	@ 0x39
 800928c:	7013      	strb	r3, [r2, #0]
 800928e:	4633      	mov	r3, r6
 8009290:	461e      	mov	r6, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009298:	2a39      	cmp	r2, #57	@ 0x39
 800929a:	d052      	beq.n	8009342 <_dtoa_r+0xb12>
 800929c:	3201      	adds	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	e612      	b.n	8008ec8 <_dtoa_r+0x698>
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	dd07      	ble.n	80092b6 <_dtoa_r+0xa86>
 80092a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092aa:	d0ed      	beq.n	8009288 <_dtoa_r+0xa58>
 80092ac:	9a00      	ldr	r2, [sp, #0]
 80092ae:	f108 0301 	add.w	r3, r8, #1
 80092b2:	7013      	strb	r3, [r2, #0]
 80092b4:	e608      	b.n	8008ec8 <_dtoa_r+0x698>
 80092b6:	9b07      	ldr	r3, [sp, #28]
 80092b8:	9a07      	ldr	r2, [sp, #28]
 80092ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d028      	beq.n	8009316 <_dtoa_r+0xae6>
 80092c4:	4649      	mov	r1, r9
 80092c6:	2300      	movs	r3, #0
 80092c8:	220a      	movs	r2, #10
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 f9d6 	bl	800967c <__multadd>
 80092d0:	42af      	cmp	r7, r5
 80092d2:	4681      	mov	r9, r0
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	f04f 020a 	mov.w	r2, #10
 80092dc:	4639      	mov	r1, r7
 80092de:	4658      	mov	r0, fp
 80092e0:	d107      	bne.n	80092f2 <_dtoa_r+0xac2>
 80092e2:	f000 f9cb 	bl	800967c <__multadd>
 80092e6:	4607      	mov	r7, r0
 80092e8:	4605      	mov	r5, r0
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	3301      	adds	r3, #1
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	e774      	b.n	80091dc <_dtoa_r+0x9ac>
 80092f2:	f000 f9c3 	bl	800967c <__multadd>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4607      	mov	r7, r0
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	4658      	mov	r0, fp
 8009300:	f000 f9bc 	bl	800967c <__multadd>
 8009304:	4605      	mov	r5, r0
 8009306:	e7f0      	b.n	80092ea <_dtoa_r+0xaba>
 8009308:	9b00      	ldr	r3, [sp, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	bfcc      	ite	gt
 800930e:	461e      	movgt	r6, r3
 8009310:	2601      	movle	r6, #1
 8009312:	4456      	add	r6, sl
 8009314:	2700      	movs	r7, #0
 8009316:	4649      	mov	r1, r9
 8009318:	2201      	movs	r2, #1
 800931a:	4658      	mov	r0, fp
 800931c:	f000 fb5a 	bl	80099d4 <__lshift>
 8009320:	4621      	mov	r1, r4
 8009322:	4681      	mov	r9, r0
 8009324:	f000 fbc2 	bl	8009aac <__mcmp>
 8009328:	2800      	cmp	r0, #0
 800932a:	dcb0      	bgt.n	800928e <_dtoa_r+0xa5e>
 800932c:	d102      	bne.n	8009334 <_dtoa_r+0xb04>
 800932e:	f018 0f01 	tst.w	r8, #1
 8009332:	d1ac      	bne.n	800928e <_dtoa_r+0xa5e>
 8009334:	4633      	mov	r3, r6
 8009336:	461e      	mov	r6, r3
 8009338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800933c:	2a30      	cmp	r2, #48	@ 0x30
 800933e:	d0fa      	beq.n	8009336 <_dtoa_r+0xb06>
 8009340:	e5c2      	b.n	8008ec8 <_dtoa_r+0x698>
 8009342:	459a      	cmp	sl, r3
 8009344:	d1a4      	bne.n	8009290 <_dtoa_r+0xa60>
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	3301      	adds	r3, #1
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	2331      	movs	r3, #49	@ 0x31
 800934e:	f88a 3000 	strb.w	r3, [sl]
 8009352:	e5b9      	b.n	8008ec8 <_dtoa_r+0x698>
 8009354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009356:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093b4 <_dtoa_r+0xb84>
 800935a:	b11b      	cbz	r3, 8009364 <_dtoa_r+0xb34>
 800935c:	f10a 0308 	add.w	r3, sl, #8
 8009360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	4650      	mov	r0, sl
 8009366:	b019      	add	sp, #100	@ 0x64
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936e:	2b01      	cmp	r3, #1
 8009370:	f77f ae37 	ble.w	8008fe2 <_dtoa_r+0x7b2>
 8009374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009376:	930a      	str	r3, [sp, #40]	@ 0x28
 8009378:	2001      	movs	r0, #1
 800937a:	e655      	b.n	8009028 <_dtoa_r+0x7f8>
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f77f aed6 	ble.w	8009130 <_dtoa_r+0x900>
 8009384:	4656      	mov	r6, sl
 8009386:	4621      	mov	r1, r4
 8009388:	4648      	mov	r0, r9
 800938a:	f7ff f9c6 	bl	800871a <quorem>
 800938e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009392:	f806 8b01 	strb.w	r8, [r6], #1
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	eba6 020a 	sub.w	r2, r6, sl
 800939c:	4293      	cmp	r3, r2
 800939e:	ddb3      	ble.n	8009308 <_dtoa_r+0xad8>
 80093a0:	4649      	mov	r1, r9
 80093a2:	2300      	movs	r3, #0
 80093a4:	220a      	movs	r2, #10
 80093a6:	4658      	mov	r0, fp
 80093a8:	f000 f968 	bl	800967c <__multadd>
 80093ac:	4681      	mov	r9, r0
 80093ae:	e7ea      	b.n	8009386 <_dtoa_r+0xb56>
 80093b0:	0800d5b4 	.word	0x0800d5b4
 80093b4:	0800d538 	.word	0x0800d538

080093b8 <_free_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4605      	mov	r5, r0
 80093bc:	2900      	cmp	r1, #0
 80093be:	d041      	beq.n	8009444 <_free_r+0x8c>
 80093c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c4:	1f0c      	subs	r4, r1, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bfb8      	it	lt
 80093ca:	18e4      	addlt	r4, r4, r3
 80093cc:	f000 f8e8 	bl	80095a0 <__malloc_lock>
 80093d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009448 <_free_r+0x90>)
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	b933      	cbnz	r3, 80093e4 <_free_r+0x2c>
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6014      	str	r4, [r2, #0]
 80093da:	4628      	mov	r0, r5
 80093dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e0:	f000 b8e4 	b.w	80095ac <__malloc_unlock>
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d908      	bls.n	80093fa <_free_r+0x42>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	e7ed      	b.n	80093d6 <_free_r+0x1e>
 80093fa:	461a      	mov	r2, r3
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b10b      	cbz	r3, 8009404 <_free_r+0x4c>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d9fa      	bls.n	80093fa <_free_r+0x42>
 8009404:	6811      	ldr	r1, [r2, #0]
 8009406:	1850      	adds	r0, r2, r1
 8009408:	42a0      	cmp	r0, r4
 800940a:	d10b      	bne.n	8009424 <_free_r+0x6c>
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	4401      	add	r1, r0
 8009410:	1850      	adds	r0, r2, r1
 8009412:	4283      	cmp	r3, r0
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	d1e0      	bne.n	80093da <_free_r+0x22>
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	6053      	str	r3, [r2, #4]
 800941e:	4408      	add	r0, r1
 8009420:	6010      	str	r0, [r2, #0]
 8009422:	e7da      	b.n	80093da <_free_r+0x22>
 8009424:	d902      	bls.n	800942c <_free_r+0x74>
 8009426:	230c      	movs	r3, #12
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	e7d6      	b.n	80093da <_free_r+0x22>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	1821      	adds	r1, r4, r0
 8009430:	428b      	cmp	r3, r1
 8009432:	bf04      	itt	eq
 8009434:	6819      	ldreq	r1, [r3, #0]
 8009436:	685b      	ldreq	r3, [r3, #4]
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	bf04      	itt	eq
 800943c:	1809      	addeq	r1, r1, r0
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	6054      	str	r4, [r2, #4]
 8009442:	e7ca      	b.n	80093da <_free_r+0x22>
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	bf00      	nop
 8009448:	20005c48 	.word	0x20005c48

0800944c <malloc>:
 800944c:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <malloc+0xc>)
 800944e:	4601      	mov	r1, r0
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f000 b825 	b.w	80094a0 <_malloc_r>
 8009456:	bf00      	nop
 8009458:	20000e34 	.word	0x20000e34

0800945c <sbrk_aligned>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4e0f      	ldr	r6, [pc, #60]	@ (800949c <sbrk_aligned+0x40>)
 8009460:	460c      	mov	r4, r1
 8009462:	6831      	ldr	r1, [r6, #0]
 8009464:	4605      	mov	r5, r0
 8009466:	b911      	cbnz	r1, 800946e <sbrk_aligned+0x12>
 8009468:	f000 fe46 	bl	800a0f8 <_sbrk_r>
 800946c:	6030      	str	r0, [r6, #0]
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f000 fe41 	bl	800a0f8 <_sbrk_r>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d103      	bne.n	8009482 <sbrk_aligned+0x26>
 800947a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800947e:	4620      	mov	r0, r4
 8009480:	bd70      	pop	{r4, r5, r6, pc}
 8009482:	1cc4      	adds	r4, r0, #3
 8009484:	f024 0403 	bic.w	r4, r4, #3
 8009488:	42a0      	cmp	r0, r4
 800948a:	d0f8      	beq.n	800947e <sbrk_aligned+0x22>
 800948c:	1a21      	subs	r1, r4, r0
 800948e:	4628      	mov	r0, r5
 8009490:	f000 fe32 	bl	800a0f8 <_sbrk_r>
 8009494:	3001      	adds	r0, #1
 8009496:	d1f2      	bne.n	800947e <sbrk_aligned+0x22>
 8009498:	e7ef      	b.n	800947a <sbrk_aligned+0x1e>
 800949a:	bf00      	nop
 800949c:	20005c44 	.word	0x20005c44

080094a0 <_malloc_r>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	1ccd      	adds	r5, r1, #3
 80094a6:	f025 0503 	bic.w	r5, r5, #3
 80094aa:	3508      	adds	r5, #8
 80094ac:	2d0c      	cmp	r5, #12
 80094ae:	bf38      	it	cc
 80094b0:	250c      	movcc	r5, #12
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	4606      	mov	r6, r0
 80094b6:	db01      	blt.n	80094bc <_malloc_r+0x1c>
 80094b8:	42a9      	cmp	r1, r5
 80094ba:	d904      	bls.n	80094c6 <_malloc_r+0x26>
 80094bc:	230c      	movs	r3, #12
 80094be:	6033      	str	r3, [r6, #0]
 80094c0:	2000      	movs	r0, #0
 80094c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800959c <_malloc_r+0xfc>
 80094ca:	f000 f869 	bl	80095a0 <__malloc_lock>
 80094ce:	f8d8 3000 	ldr.w	r3, [r8]
 80094d2:	461c      	mov	r4, r3
 80094d4:	bb44      	cbnz	r4, 8009528 <_malloc_r+0x88>
 80094d6:	4629      	mov	r1, r5
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff ffbf 	bl	800945c <sbrk_aligned>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	4604      	mov	r4, r0
 80094e2:	d158      	bne.n	8009596 <_malloc_r+0xf6>
 80094e4:	f8d8 4000 	ldr.w	r4, [r8]
 80094e8:	4627      	mov	r7, r4
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	d143      	bne.n	8009576 <_malloc_r+0xd6>
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	d04b      	beq.n	800958a <_malloc_r+0xea>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	4639      	mov	r1, r7
 80094f6:	4630      	mov	r0, r6
 80094f8:	eb04 0903 	add.w	r9, r4, r3
 80094fc:	f000 fdfc 	bl	800a0f8 <_sbrk_r>
 8009500:	4581      	cmp	r9, r0
 8009502:	d142      	bne.n	800958a <_malloc_r+0xea>
 8009504:	6821      	ldr	r1, [r4, #0]
 8009506:	1a6d      	subs	r5, r5, r1
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ffa6 	bl	800945c <sbrk_aligned>
 8009510:	3001      	adds	r0, #1
 8009512:	d03a      	beq.n	800958a <_malloc_r+0xea>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	442b      	add	r3, r5
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	f8d8 3000 	ldr.w	r3, [r8]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	bb62      	cbnz	r2, 800957c <_malloc_r+0xdc>
 8009522:	f8c8 7000 	str.w	r7, [r8]
 8009526:	e00f      	b.n	8009548 <_malloc_r+0xa8>
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	1b52      	subs	r2, r2, r5
 800952c:	d420      	bmi.n	8009570 <_malloc_r+0xd0>
 800952e:	2a0b      	cmp	r2, #11
 8009530:	d917      	bls.n	8009562 <_malloc_r+0xc2>
 8009532:	1961      	adds	r1, r4, r5
 8009534:	42a3      	cmp	r3, r4
 8009536:	6025      	str	r5, [r4, #0]
 8009538:	bf18      	it	ne
 800953a:	6059      	strne	r1, [r3, #4]
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	bf08      	it	eq
 8009540:	f8c8 1000 	streq.w	r1, [r8]
 8009544:	5162      	str	r2, [r4, r5]
 8009546:	604b      	str	r3, [r1, #4]
 8009548:	4630      	mov	r0, r6
 800954a:	f000 f82f 	bl	80095ac <__malloc_unlock>
 800954e:	f104 000b 	add.w	r0, r4, #11
 8009552:	1d23      	adds	r3, r4, #4
 8009554:	f020 0007 	bic.w	r0, r0, #7
 8009558:	1ac2      	subs	r2, r0, r3
 800955a:	bf1c      	itt	ne
 800955c:	1a1b      	subne	r3, r3, r0
 800955e:	50a3      	strne	r3, [r4, r2]
 8009560:	e7af      	b.n	80094c2 <_malloc_r+0x22>
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	42a3      	cmp	r3, r4
 8009566:	bf0c      	ite	eq
 8009568:	f8c8 2000 	streq.w	r2, [r8]
 800956c:	605a      	strne	r2, [r3, #4]
 800956e:	e7eb      	b.n	8009548 <_malloc_r+0xa8>
 8009570:	4623      	mov	r3, r4
 8009572:	6864      	ldr	r4, [r4, #4]
 8009574:	e7ae      	b.n	80094d4 <_malloc_r+0x34>
 8009576:	463c      	mov	r4, r7
 8009578:	687f      	ldr	r7, [r7, #4]
 800957a:	e7b6      	b.n	80094ea <_malloc_r+0x4a>
 800957c:	461a      	mov	r2, r3
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	42a3      	cmp	r3, r4
 8009582:	d1fb      	bne.n	800957c <_malloc_r+0xdc>
 8009584:	2300      	movs	r3, #0
 8009586:	6053      	str	r3, [r2, #4]
 8009588:	e7de      	b.n	8009548 <_malloc_r+0xa8>
 800958a:	230c      	movs	r3, #12
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	4630      	mov	r0, r6
 8009590:	f000 f80c 	bl	80095ac <__malloc_unlock>
 8009594:	e794      	b.n	80094c0 <_malloc_r+0x20>
 8009596:	6005      	str	r5, [r0, #0]
 8009598:	e7d6      	b.n	8009548 <_malloc_r+0xa8>
 800959a:	bf00      	nop
 800959c:	20005c48 	.word	0x20005c48

080095a0 <__malloc_lock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	@ (80095a8 <__malloc_lock+0x8>)
 80095a2:	f7ff b8aa 	b.w	80086fa <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	20005c40 	.word	0x20005c40

080095ac <__malloc_unlock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	@ (80095b4 <__malloc_unlock+0x8>)
 80095ae:	f7ff b8a5 	b.w	80086fc <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	20005c40 	.word	0x20005c40

080095b8 <_Balloc>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	69c6      	ldr	r6, [r0, #28]
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	b976      	cbnz	r6, 80095e0 <_Balloc+0x28>
 80095c2:	2010      	movs	r0, #16
 80095c4:	f7ff ff42 	bl	800944c <malloc>
 80095c8:	4602      	mov	r2, r0
 80095ca:	61e0      	str	r0, [r4, #28]
 80095cc:	b920      	cbnz	r0, 80095d8 <_Balloc+0x20>
 80095ce:	4b18      	ldr	r3, [pc, #96]	@ (8009630 <_Balloc+0x78>)
 80095d0:	4818      	ldr	r0, [pc, #96]	@ (8009634 <_Balloc+0x7c>)
 80095d2:	216b      	movs	r1, #107	@ 0x6b
 80095d4:	f000 fda0 	bl	800a118 <__assert_func>
 80095d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095dc:	6006      	str	r6, [r0, #0]
 80095de:	60c6      	str	r6, [r0, #12]
 80095e0:	69e6      	ldr	r6, [r4, #28]
 80095e2:	68f3      	ldr	r3, [r6, #12]
 80095e4:	b183      	cbz	r3, 8009608 <_Balloc+0x50>
 80095e6:	69e3      	ldr	r3, [r4, #28]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ee:	b9b8      	cbnz	r0, 8009620 <_Balloc+0x68>
 80095f0:	2101      	movs	r1, #1
 80095f2:	fa01 f605 	lsl.w	r6, r1, r5
 80095f6:	1d72      	adds	r2, r6, #5
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fdaa 	bl	800a154 <_calloc_r>
 8009600:	b160      	cbz	r0, 800961c <_Balloc+0x64>
 8009602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009606:	e00e      	b.n	8009626 <_Balloc+0x6e>
 8009608:	2221      	movs	r2, #33	@ 0x21
 800960a:	2104      	movs	r1, #4
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fda1 	bl	800a154 <_calloc_r>
 8009612:	69e3      	ldr	r3, [r4, #28]
 8009614:	60f0      	str	r0, [r6, #12]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e4      	bne.n	80095e6 <_Balloc+0x2e>
 800961c:	2000      	movs	r0, #0
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	6802      	ldr	r2, [r0, #0]
 8009622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009626:	2300      	movs	r3, #0
 8009628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800962c:	e7f7      	b.n	800961e <_Balloc+0x66>
 800962e:	bf00      	nop
 8009630:	0800d545 	.word	0x0800d545
 8009634:	0800d5c5 	.word	0x0800d5c5

08009638 <_Bfree>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	69c6      	ldr	r6, [r0, #28]
 800963c:	4605      	mov	r5, r0
 800963e:	460c      	mov	r4, r1
 8009640:	b976      	cbnz	r6, 8009660 <_Bfree+0x28>
 8009642:	2010      	movs	r0, #16
 8009644:	f7ff ff02 	bl	800944c <malloc>
 8009648:	4602      	mov	r2, r0
 800964a:	61e8      	str	r0, [r5, #28]
 800964c:	b920      	cbnz	r0, 8009658 <_Bfree+0x20>
 800964e:	4b09      	ldr	r3, [pc, #36]	@ (8009674 <_Bfree+0x3c>)
 8009650:	4809      	ldr	r0, [pc, #36]	@ (8009678 <_Bfree+0x40>)
 8009652:	218f      	movs	r1, #143	@ 0x8f
 8009654:	f000 fd60 	bl	800a118 <__assert_func>
 8009658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800965c:	6006      	str	r6, [r0, #0]
 800965e:	60c6      	str	r6, [r0, #12]
 8009660:	b13c      	cbz	r4, 8009672 <_Bfree+0x3a>
 8009662:	69eb      	ldr	r3, [r5, #28]
 8009664:	6862      	ldr	r2, [r4, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800966c:	6021      	str	r1, [r4, #0]
 800966e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	0800d545 	.word	0x0800d545
 8009678:	0800d5c5 	.word	0x0800d5c5

0800967c <__multadd>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	690d      	ldr	r5, [r1, #16]
 8009682:	4607      	mov	r7, r0
 8009684:	460c      	mov	r4, r1
 8009686:	461e      	mov	r6, r3
 8009688:	f101 0c14 	add.w	ip, r1, #20
 800968c:	2000      	movs	r0, #0
 800968e:	f8dc 3000 	ldr.w	r3, [ip]
 8009692:	b299      	uxth	r1, r3
 8009694:	fb02 6101 	mla	r1, r2, r1, r6
 8009698:	0c1e      	lsrs	r6, r3, #16
 800969a:	0c0b      	lsrs	r3, r1, #16
 800969c:	fb02 3306 	mla	r3, r2, r6, r3
 80096a0:	b289      	uxth	r1, r1
 80096a2:	3001      	adds	r0, #1
 80096a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096a8:	4285      	cmp	r5, r0
 80096aa:	f84c 1b04 	str.w	r1, [ip], #4
 80096ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096b2:	dcec      	bgt.n	800968e <__multadd+0x12>
 80096b4:	b30e      	cbz	r6, 80096fa <__multadd+0x7e>
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	42ab      	cmp	r3, r5
 80096ba:	dc19      	bgt.n	80096f0 <__multadd+0x74>
 80096bc:	6861      	ldr	r1, [r4, #4]
 80096be:	4638      	mov	r0, r7
 80096c0:	3101      	adds	r1, #1
 80096c2:	f7ff ff79 	bl	80095b8 <_Balloc>
 80096c6:	4680      	mov	r8, r0
 80096c8:	b928      	cbnz	r0, 80096d6 <__multadd+0x5a>
 80096ca:	4602      	mov	r2, r0
 80096cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009700 <__multadd+0x84>)
 80096ce:	480d      	ldr	r0, [pc, #52]	@ (8009704 <__multadd+0x88>)
 80096d0:	21ba      	movs	r1, #186	@ 0xba
 80096d2:	f000 fd21 	bl	800a118 <__assert_func>
 80096d6:	6922      	ldr	r2, [r4, #16]
 80096d8:	3202      	adds	r2, #2
 80096da:	f104 010c 	add.w	r1, r4, #12
 80096de:	0092      	lsls	r2, r2, #2
 80096e0:	300c      	adds	r0, #12
 80096e2:	f7ff f80c 	bl	80086fe <memcpy>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff ffa5 	bl	8009638 <_Bfree>
 80096ee:	4644      	mov	r4, r8
 80096f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096f4:	3501      	adds	r5, #1
 80096f6:	615e      	str	r6, [r3, #20]
 80096f8:	6125      	str	r5, [r4, #16]
 80096fa:	4620      	mov	r0, r4
 80096fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009700:	0800d5b4 	.word	0x0800d5b4
 8009704:	0800d5c5 	.word	0x0800d5c5

08009708 <__hi0bits>:
 8009708:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800970c:	4603      	mov	r3, r0
 800970e:	bf36      	itet	cc
 8009710:	0403      	lslcc	r3, r0, #16
 8009712:	2000      	movcs	r0, #0
 8009714:	2010      	movcc	r0, #16
 8009716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800971a:	bf3c      	itt	cc
 800971c:	021b      	lslcc	r3, r3, #8
 800971e:	3008      	addcc	r0, #8
 8009720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009724:	bf3c      	itt	cc
 8009726:	011b      	lslcc	r3, r3, #4
 8009728:	3004      	addcc	r0, #4
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972e:	bf3c      	itt	cc
 8009730:	009b      	lslcc	r3, r3, #2
 8009732:	3002      	addcc	r0, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	db05      	blt.n	8009744 <__hi0bits+0x3c>
 8009738:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800973c:	f100 0001 	add.w	r0, r0, #1
 8009740:	bf08      	it	eq
 8009742:	2020      	moveq	r0, #32
 8009744:	4770      	bx	lr

08009746 <__lo0bits>:
 8009746:	6803      	ldr	r3, [r0, #0]
 8009748:	4602      	mov	r2, r0
 800974a:	f013 0007 	ands.w	r0, r3, #7
 800974e:	d00b      	beq.n	8009768 <__lo0bits+0x22>
 8009750:	07d9      	lsls	r1, r3, #31
 8009752:	d421      	bmi.n	8009798 <__lo0bits+0x52>
 8009754:	0798      	lsls	r0, r3, #30
 8009756:	bf49      	itett	mi
 8009758:	085b      	lsrmi	r3, r3, #1
 800975a:	089b      	lsrpl	r3, r3, #2
 800975c:	2001      	movmi	r0, #1
 800975e:	6013      	strmi	r3, [r2, #0]
 8009760:	bf5c      	itt	pl
 8009762:	6013      	strpl	r3, [r2, #0]
 8009764:	2002      	movpl	r0, #2
 8009766:	4770      	bx	lr
 8009768:	b299      	uxth	r1, r3
 800976a:	b909      	cbnz	r1, 8009770 <__lo0bits+0x2a>
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	2010      	movs	r0, #16
 8009770:	b2d9      	uxtb	r1, r3
 8009772:	b909      	cbnz	r1, 8009778 <__lo0bits+0x32>
 8009774:	3008      	adds	r0, #8
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	0719      	lsls	r1, r3, #28
 800977a:	bf04      	itt	eq
 800977c:	091b      	lsreq	r3, r3, #4
 800977e:	3004      	addeq	r0, #4
 8009780:	0799      	lsls	r1, r3, #30
 8009782:	bf04      	itt	eq
 8009784:	089b      	lsreq	r3, r3, #2
 8009786:	3002      	addeq	r0, #2
 8009788:	07d9      	lsls	r1, r3, #31
 800978a:	d403      	bmi.n	8009794 <__lo0bits+0x4e>
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	f100 0001 	add.w	r0, r0, #1
 8009792:	d003      	beq.n	800979c <__lo0bits+0x56>
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	4770      	bx	lr
 8009798:	2000      	movs	r0, #0
 800979a:	4770      	bx	lr
 800979c:	2020      	movs	r0, #32
 800979e:	4770      	bx	lr

080097a0 <__i2b>:
 80097a0:	b510      	push	{r4, lr}
 80097a2:	460c      	mov	r4, r1
 80097a4:	2101      	movs	r1, #1
 80097a6:	f7ff ff07 	bl	80095b8 <_Balloc>
 80097aa:	4602      	mov	r2, r0
 80097ac:	b928      	cbnz	r0, 80097ba <__i2b+0x1a>
 80097ae:	4b05      	ldr	r3, [pc, #20]	@ (80097c4 <__i2b+0x24>)
 80097b0:	4805      	ldr	r0, [pc, #20]	@ (80097c8 <__i2b+0x28>)
 80097b2:	f240 1145 	movw	r1, #325	@ 0x145
 80097b6:	f000 fcaf 	bl	800a118 <__assert_func>
 80097ba:	2301      	movs	r3, #1
 80097bc:	6144      	str	r4, [r0, #20]
 80097be:	6103      	str	r3, [r0, #16]
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	bf00      	nop
 80097c4:	0800d5b4 	.word	0x0800d5b4
 80097c8:	0800d5c5 	.word	0x0800d5c5

080097cc <__multiply>:
 80097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4614      	mov	r4, r2
 80097d2:	690a      	ldr	r2, [r1, #16]
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	bfa8      	it	ge
 80097da:	4623      	movge	r3, r4
 80097dc:	460f      	mov	r7, r1
 80097de:	bfa4      	itt	ge
 80097e0:	460c      	movge	r4, r1
 80097e2:	461f      	movge	r7, r3
 80097e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80097e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80097ec:	68a3      	ldr	r3, [r4, #8]
 80097ee:	6861      	ldr	r1, [r4, #4]
 80097f0:	eb0a 0609 	add.w	r6, sl, r9
 80097f4:	42b3      	cmp	r3, r6
 80097f6:	b085      	sub	sp, #20
 80097f8:	bfb8      	it	lt
 80097fa:	3101      	addlt	r1, #1
 80097fc:	f7ff fedc 	bl	80095b8 <_Balloc>
 8009800:	b930      	cbnz	r0, 8009810 <__multiply+0x44>
 8009802:	4602      	mov	r2, r0
 8009804:	4b44      	ldr	r3, [pc, #272]	@ (8009918 <__multiply+0x14c>)
 8009806:	4845      	ldr	r0, [pc, #276]	@ (800991c <__multiply+0x150>)
 8009808:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800980c:	f000 fc84 	bl	800a118 <__assert_func>
 8009810:	f100 0514 	add.w	r5, r0, #20
 8009814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009818:	462b      	mov	r3, r5
 800981a:	2200      	movs	r2, #0
 800981c:	4543      	cmp	r3, r8
 800981e:	d321      	bcc.n	8009864 <__multiply+0x98>
 8009820:	f107 0114 	add.w	r1, r7, #20
 8009824:	f104 0214 	add.w	r2, r4, #20
 8009828:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800982c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	1b13      	subs	r3, r2, r4
 8009834:	3b15      	subs	r3, #21
 8009836:	f023 0303 	bic.w	r3, r3, #3
 800983a:	3304      	adds	r3, #4
 800983c:	f104 0715 	add.w	r7, r4, #21
 8009840:	42ba      	cmp	r2, r7
 8009842:	bf38      	it	cc
 8009844:	2304      	movcc	r3, #4
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	9b02      	ldr	r3, [sp, #8]
 800984a:	9103      	str	r1, [sp, #12]
 800984c:	428b      	cmp	r3, r1
 800984e:	d80c      	bhi.n	800986a <__multiply+0x9e>
 8009850:	2e00      	cmp	r6, #0
 8009852:	dd03      	ble.n	800985c <__multiply+0x90>
 8009854:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009858:	2b00      	cmp	r3, #0
 800985a:	d05b      	beq.n	8009914 <__multiply+0x148>
 800985c:	6106      	str	r6, [r0, #16]
 800985e:	b005      	add	sp, #20
 8009860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009864:	f843 2b04 	str.w	r2, [r3], #4
 8009868:	e7d8      	b.n	800981c <__multiply+0x50>
 800986a:	f8b1 a000 	ldrh.w	sl, [r1]
 800986e:	f1ba 0f00 	cmp.w	sl, #0
 8009872:	d024      	beq.n	80098be <__multiply+0xf2>
 8009874:	f104 0e14 	add.w	lr, r4, #20
 8009878:	46a9      	mov	r9, r5
 800987a:	f04f 0c00 	mov.w	ip, #0
 800987e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009882:	f8d9 3000 	ldr.w	r3, [r9]
 8009886:	fa1f fb87 	uxth.w	fp, r7
 800988a:	b29b      	uxth	r3, r3
 800988c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009890:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009894:	f8d9 7000 	ldr.w	r7, [r9]
 8009898:	4463      	add	r3, ip
 800989a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800989e:	fb0a c70b 	mla	r7, sl, fp, ip
 80098a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098ac:	4572      	cmp	r2, lr
 80098ae:	f849 3b04 	str.w	r3, [r9], #4
 80098b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098b6:	d8e2      	bhi.n	800987e <__multiply+0xb2>
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	f845 c003 	str.w	ip, [r5, r3]
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098c4:	3104      	adds	r1, #4
 80098c6:	f1b9 0f00 	cmp.w	r9, #0
 80098ca:	d021      	beq.n	8009910 <__multiply+0x144>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	f104 0c14 	add.w	ip, r4, #20
 80098d2:	46ae      	mov	lr, r5
 80098d4:	f04f 0a00 	mov.w	sl, #0
 80098d8:	f8bc b000 	ldrh.w	fp, [ip]
 80098dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80098e0:	fb09 770b 	mla	r7, r9, fp, r7
 80098e4:	4457      	add	r7, sl
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098ec:	f84e 3b04 	str.w	r3, [lr], #4
 80098f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098f8:	f8be 3000 	ldrh.w	r3, [lr]
 80098fc:	fb09 330a 	mla	r3, r9, sl, r3
 8009900:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009904:	4562      	cmp	r2, ip
 8009906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800990a:	d8e5      	bhi.n	80098d8 <__multiply+0x10c>
 800990c:	9f01      	ldr	r7, [sp, #4]
 800990e:	51eb      	str	r3, [r5, r7]
 8009910:	3504      	adds	r5, #4
 8009912:	e799      	b.n	8009848 <__multiply+0x7c>
 8009914:	3e01      	subs	r6, #1
 8009916:	e79b      	b.n	8009850 <__multiply+0x84>
 8009918:	0800d5b4 	.word	0x0800d5b4
 800991c:	0800d5c5 	.word	0x0800d5c5

08009920 <__pow5mult>:
 8009920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009924:	4615      	mov	r5, r2
 8009926:	f012 0203 	ands.w	r2, r2, #3
 800992a:	4607      	mov	r7, r0
 800992c:	460e      	mov	r6, r1
 800992e:	d007      	beq.n	8009940 <__pow5mult+0x20>
 8009930:	4c25      	ldr	r4, [pc, #148]	@ (80099c8 <__pow5mult+0xa8>)
 8009932:	3a01      	subs	r2, #1
 8009934:	2300      	movs	r3, #0
 8009936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800993a:	f7ff fe9f 	bl	800967c <__multadd>
 800993e:	4606      	mov	r6, r0
 8009940:	10ad      	asrs	r5, r5, #2
 8009942:	d03d      	beq.n	80099c0 <__pow5mult+0xa0>
 8009944:	69fc      	ldr	r4, [r7, #28]
 8009946:	b97c      	cbnz	r4, 8009968 <__pow5mult+0x48>
 8009948:	2010      	movs	r0, #16
 800994a:	f7ff fd7f 	bl	800944c <malloc>
 800994e:	4602      	mov	r2, r0
 8009950:	61f8      	str	r0, [r7, #28]
 8009952:	b928      	cbnz	r0, 8009960 <__pow5mult+0x40>
 8009954:	4b1d      	ldr	r3, [pc, #116]	@ (80099cc <__pow5mult+0xac>)
 8009956:	481e      	ldr	r0, [pc, #120]	@ (80099d0 <__pow5mult+0xb0>)
 8009958:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800995c:	f000 fbdc 	bl	800a118 <__assert_func>
 8009960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009964:	6004      	str	r4, [r0, #0]
 8009966:	60c4      	str	r4, [r0, #12]
 8009968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800996c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009970:	b94c      	cbnz	r4, 8009986 <__pow5mult+0x66>
 8009972:	f240 2171 	movw	r1, #625	@ 0x271
 8009976:	4638      	mov	r0, r7
 8009978:	f7ff ff12 	bl	80097a0 <__i2b>
 800997c:	2300      	movs	r3, #0
 800997e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009982:	4604      	mov	r4, r0
 8009984:	6003      	str	r3, [r0, #0]
 8009986:	f04f 0900 	mov.w	r9, #0
 800998a:	07eb      	lsls	r3, r5, #31
 800998c:	d50a      	bpl.n	80099a4 <__pow5mult+0x84>
 800998e:	4631      	mov	r1, r6
 8009990:	4622      	mov	r2, r4
 8009992:	4638      	mov	r0, r7
 8009994:	f7ff ff1a 	bl	80097cc <__multiply>
 8009998:	4631      	mov	r1, r6
 800999a:	4680      	mov	r8, r0
 800999c:	4638      	mov	r0, r7
 800999e:	f7ff fe4b 	bl	8009638 <_Bfree>
 80099a2:	4646      	mov	r6, r8
 80099a4:	106d      	asrs	r5, r5, #1
 80099a6:	d00b      	beq.n	80099c0 <__pow5mult+0xa0>
 80099a8:	6820      	ldr	r0, [r4, #0]
 80099aa:	b938      	cbnz	r0, 80099bc <__pow5mult+0x9c>
 80099ac:	4622      	mov	r2, r4
 80099ae:	4621      	mov	r1, r4
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7ff ff0b 	bl	80097cc <__multiply>
 80099b6:	6020      	str	r0, [r4, #0]
 80099b8:	f8c0 9000 	str.w	r9, [r0]
 80099bc:	4604      	mov	r4, r0
 80099be:	e7e4      	b.n	800998a <__pow5mult+0x6a>
 80099c0:	4630      	mov	r0, r6
 80099c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c6:	bf00      	nop
 80099c8:	0800d620 	.word	0x0800d620
 80099cc:	0800d545 	.word	0x0800d545
 80099d0:	0800d5c5 	.word	0x0800d5c5

080099d4 <__lshift>:
 80099d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	460c      	mov	r4, r1
 80099da:	6849      	ldr	r1, [r1, #4]
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	4607      	mov	r7, r0
 80099e6:	4691      	mov	r9, r2
 80099e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099ec:	f108 0601 	add.w	r6, r8, #1
 80099f0:	42b3      	cmp	r3, r6
 80099f2:	db0b      	blt.n	8009a0c <__lshift+0x38>
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7ff fddf 	bl	80095b8 <_Balloc>
 80099fa:	4605      	mov	r5, r0
 80099fc:	b948      	cbnz	r0, 8009a12 <__lshift+0x3e>
 80099fe:	4602      	mov	r2, r0
 8009a00:	4b28      	ldr	r3, [pc, #160]	@ (8009aa4 <__lshift+0xd0>)
 8009a02:	4829      	ldr	r0, [pc, #164]	@ (8009aa8 <__lshift+0xd4>)
 8009a04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a08:	f000 fb86 	bl	800a118 <__assert_func>
 8009a0c:	3101      	adds	r1, #1
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	e7ee      	b.n	80099f0 <__lshift+0x1c>
 8009a12:	2300      	movs	r3, #0
 8009a14:	f100 0114 	add.w	r1, r0, #20
 8009a18:	f100 0210 	add.w	r2, r0, #16
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	4553      	cmp	r3, sl
 8009a20:	db33      	blt.n	8009a8a <__lshift+0xb6>
 8009a22:	6920      	ldr	r0, [r4, #16]
 8009a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a28:	f104 0314 	add.w	r3, r4, #20
 8009a2c:	f019 091f 	ands.w	r9, r9, #31
 8009a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a38:	d02b      	beq.n	8009a92 <__lshift+0xbe>
 8009a3a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a3e:	468a      	mov	sl, r1
 8009a40:	2200      	movs	r2, #0
 8009a42:	6818      	ldr	r0, [r3, #0]
 8009a44:	fa00 f009 	lsl.w	r0, r0, r9
 8009a48:	4310      	orrs	r0, r2
 8009a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a52:	459c      	cmp	ip, r3
 8009a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a58:	d8f3      	bhi.n	8009a42 <__lshift+0x6e>
 8009a5a:	ebac 0304 	sub.w	r3, ip, r4
 8009a5e:	3b15      	subs	r3, #21
 8009a60:	f023 0303 	bic.w	r3, r3, #3
 8009a64:	3304      	adds	r3, #4
 8009a66:	f104 0015 	add.w	r0, r4, #21
 8009a6a:	4584      	cmp	ip, r0
 8009a6c:	bf38      	it	cc
 8009a6e:	2304      	movcc	r3, #4
 8009a70:	50ca      	str	r2, [r1, r3]
 8009a72:	b10a      	cbz	r2, 8009a78 <__lshift+0xa4>
 8009a74:	f108 0602 	add.w	r6, r8, #2
 8009a78:	3e01      	subs	r6, #1
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	612e      	str	r6, [r5, #16]
 8009a7e:	4621      	mov	r1, r4
 8009a80:	f7ff fdda 	bl	8009638 <_Bfree>
 8009a84:	4628      	mov	r0, r5
 8009a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a8e:	3301      	adds	r3, #1
 8009a90:	e7c5      	b.n	8009a1e <__lshift+0x4a>
 8009a92:	3904      	subs	r1, #4
 8009a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a98:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a9c:	459c      	cmp	ip, r3
 8009a9e:	d8f9      	bhi.n	8009a94 <__lshift+0xc0>
 8009aa0:	e7ea      	b.n	8009a78 <__lshift+0xa4>
 8009aa2:	bf00      	nop
 8009aa4:	0800d5b4 	.word	0x0800d5b4
 8009aa8:	0800d5c5 	.word	0x0800d5c5

08009aac <__mcmp>:
 8009aac:	690a      	ldr	r2, [r1, #16]
 8009aae:	4603      	mov	r3, r0
 8009ab0:	6900      	ldr	r0, [r0, #16]
 8009ab2:	1a80      	subs	r0, r0, r2
 8009ab4:	b530      	push	{r4, r5, lr}
 8009ab6:	d10e      	bne.n	8009ad6 <__mcmp+0x2a>
 8009ab8:	3314      	adds	r3, #20
 8009aba:	3114      	adds	r1, #20
 8009abc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009acc:	4295      	cmp	r5, r2
 8009ace:	d003      	beq.n	8009ad8 <__mcmp+0x2c>
 8009ad0:	d205      	bcs.n	8009ade <__mcmp+0x32>
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ad6:	bd30      	pop	{r4, r5, pc}
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d3f3      	bcc.n	8009ac4 <__mcmp+0x18>
 8009adc:	e7fb      	b.n	8009ad6 <__mcmp+0x2a>
 8009ade:	2001      	movs	r0, #1
 8009ae0:	e7f9      	b.n	8009ad6 <__mcmp+0x2a>
	...

08009ae4 <__mdiff>:
 8009ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4689      	mov	r9, r1
 8009aea:	4606      	mov	r6, r0
 8009aec:	4611      	mov	r1, r2
 8009aee:	4648      	mov	r0, r9
 8009af0:	4614      	mov	r4, r2
 8009af2:	f7ff ffdb 	bl	8009aac <__mcmp>
 8009af6:	1e05      	subs	r5, r0, #0
 8009af8:	d112      	bne.n	8009b20 <__mdiff+0x3c>
 8009afa:	4629      	mov	r1, r5
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff fd5b 	bl	80095b8 <_Balloc>
 8009b02:	4602      	mov	r2, r0
 8009b04:	b928      	cbnz	r0, 8009b12 <__mdiff+0x2e>
 8009b06:	4b3f      	ldr	r3, [pc, #252]	@ (8009c04 <__mdiff+0x120>)
 8009b08:	f240 2137 	movw	r1, #567	@ 0x237
 8009b0c:	483e      	ldr	r0, [pc, #248]	@ (8009c08 <__mdiff+0x124>)
 8009b0e:	f000 fb03 	bl	800a118 <__assert_func>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b18:	4610      	mov	r0, r2
 8009b1a:	b003      	add	sp, #12
 8009b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b20:	bfbc      	itt	lt
 8009b22:	464b      	movlt	r3, r9
 8009b24:	46a1      	movlt	r9, r4
 8009b26:	4630      	mov	r0, r6
 8009b28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b2c:	bfba      	itte	lt
 8009b2e:	461c      	movlt	r4, r3
 8009b30:	2501      	movlt	r5, #1
 8009b32:	2500      	movge	r5, #0
 8009b34:	f7ff fd40 	bl	80095b8 <_Balloc>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	b918      	cbnz	r0, 8009b44 <__mdiff+0x60>
 8009b3c:	4b31      	ldr	r3, [pc, #196]	@ (8009c04 <__mdiff+0x120>)
 8009b3e:	f240 2145 	movw	r1, #581	@ 0x245
 8009b42:	e7e3      	b.n	8009b0c <__mdiff+0x28>
 8009b44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b48:	6926      	ldr	r6, [r4, #16]
 8009b4a:	60c5      	str	r5, [r0, #12]
 8009b4c:	f109 0310 	add.w	r3, r9, #16
 8009b50:	f109 0514 	add.w	r5, r9, #20
 8009b54:	f104 0e14 	add.w	lr, r4, #20
 8009b58:	f100 0b14 	add.w	fp, r0, #20
 8009b5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	46d9      	mov	r9, fp
 8009b68:	f04f 0c00 	mov.w	ip, #0
 8009b6c:	9b01      	ldr	r3, [sp, #4]
 8009b6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	fa1f f38a 	uxth.w	r3, sl
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	b283      	uxth	r3, r0
 8009b80:	1acb      	subs	r3, r1, r3
 8009b82:	0c00      	lsrs	r0, r0, #16
 8009b84:	4463      	add	r3, ip
 8009b86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b94:	4576      	cmp	r6, lr
 8009b96:	f849 3b04 	str.w	r3, [r9], #4
 8009b9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b9e:	d8e5      	bhi.n	8009b6c <__mdiff+0x88>
 8009ba0:	1b33      	subs	r3, r6, r4
 8009ba2:	3b15      	subs	r3, #21
 8009ba4:	f023 0303 	bic.w	r3, r3, #3
 8009ba8:	3415      	adds	r4, #21
 8009baa:	3304      	adds	r3, #4
 8009bac:	42a6      	cmp	r6, r4
 8009bae:	bf38      	it	cc
 8009bb0:	2304      	movcc	r3, #4
 8009bb2:	441d      	add	r5, r3
 8009bb4:	445b      	add	r3, fp
 8009bb6:	461e      	mov	r6, r3
 8009bb8:	462c      	mov	r4, r5
 8009bba:	4544      	cmp	r4, r8
 8009bbc:	d30e      	bcc.n	8009bdc <__mdiff+0xf8>
 8009bbe:	f108 0103 	add.w	r1, r8, #3
 8009bc2:	1b49      	subs	r1, r1, r5
 8009bc4:	f021 0103 	bic.w	r1, r1, #3
 8009bc8:	3d03      	subs	r5, #3
 8009bca:	45a8      	cmp	r8, r5
 8009bcc:	bf38      	it	cc
 8009bce:	2100      	movcc	r1, #0
 8009bd0:	440b      	add	r3, r1
 8009bd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bd6:	b191      	cbz	r1, 8009bfe <__mdiff+0x11a>
 8009bd8:	6117      	str	r7, [r2, #16]
 8009bda:	e79d      	b.n	8009b18 <__mdiff+0x34>
 8009bdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8009be0:	46e6      	mov	lr, ip
 8009be2:	0c08      	lsrs	r0, r1, #16
 8009be4:	fa1c fc81 	uxtah	ip, ip, r1
 8009be8:	4471      	add	r1, lr
 8009bea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bee:	b289      	uxth	r1, r1
 8009bf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bf4:	f846 1b04 	str.w	r1, [r6], #4
 8009bf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bfc:	e7dd      	b.n	8009bba <__mdiff+0xd6>
 8009bfe:	3f01      	subs	r7, #1
 8009c00:	e7e7      	b.n	8009bd2 <__mdiff+0xee>
 8009c02:	bf00      	nop
 8009c04:	0800d5b4 	.word	0x0800d5b4
 8009c08:	0800d5c5 	.word	0x0800d5c5

08009c0c <__d2b>:
 8009c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	460f      	mov	r7, r1
 8009c12:	2101      	movs	r1, #1
 8009c14:	ec59 8b10 	vmov	r8, r9, d0
 8009c18:	4616      	mov	r6, r2
 8009c1a:	f7ff fccd 	bl	80095b8 <_Balloc>
 8009c1e:	4604      	mov	r4, r0
 8009c20:	b930      	cbnz	r0, 8009c30 <__d2b+0x24>
 8009c22:	4602      	mov	r2, r0
 8009c24:	4b23      	ldr	r3, [pc, #140]	@ (8009cb4 <__d2b+0xa8>)
 8009c26:	4824      	ldr	r0, [pc, #144]	@ (8009cb8 <__d2b+0xac>)
 8009c28:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c2c:	f000 fa74 	bl	800a118 <__assert_func>
 8009c30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c38:	b10d      	cbz	r5, 8009c3e <__d2b+0x32>
 8009c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	f1b8 0300 	subs.w	r3, r8, #0
 8009c44:	d023      	beq.n	8009c8e <__d2b+0x82>
 8009c46:	4668      	mov	r0, sp
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	f7ff fd7c 	bl	8009746 <__lo0bits>
 8009c4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c52:	b1d0      	cbz	r0, 8009c8a <__d2b+0x7e>
 8009c54:	f1c0 0320 	rsb	r3, r0, #32
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	40c2      	lsrs	r2, r0
 8009c60:	6163      	str	r3, [r4, #20]
 8009c62:	9201      	str	r2, [sp, #4]
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	61a3      	str	r3, [r4, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf0c      	ite	eq
 8009c6c:	2201      	moveq	r2, #1
 8009c6e:	2202      	movne	r2, #2
 8009c70:	6122      	str	r2, [r4, #16]
 8009c72:	b1a5      	cbz	r5, 8009c9e <__d2b+0x92>
 8009c74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c78:	4405      	add	r5, r0
 8009c7a:	603d      	str	r5, [r7, #0]
 8009c7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c80:	6030      	str	r0, [r6, #0]
 8009c82:	4620      	mov	r0, r4
 8009c84:	b003      	add	sp, #12
 8009c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c8a:	6161      	str	r1, [r4, #20]
 8009c8c:	e7ea      	b.n	8009c64 <__d2b+0x58>
 8009c8e:	a801      	add	r0, sp, #4
 8009c90:	f7ff fd59 	bl	8009746 <__lo0bits>
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	6163      	str	r3, [r4, #20]
 8009c98:	3020      	adds	r0, #32
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	e7e8      	b.n	8009c70 <__d2b+0x64>
 8009c9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ca6:	6038      	str	r0, [r7, #0]
 8009ca8:	6918      	ldr	r0, [r3, #16]
 8009caa:	f7ff fd2d 	bl	8009708 <__hi0bits>
 8009cae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cb2:	e7e5      	b.n	8009c80 <__d2b+0x74>
 8009cb4:	0800d5b4 	.word	0x0800d5b4
 8009cb8:	0800d5c5 	.word	0x0800d5c5

08009cbc <__ssputs_r>:
 8009cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc0:	688e      	ldr	r6, [r1, #8]
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	42be      	cmp	r6, r7
 8009cc6:	680b      	ldr	r3, [r1, #0]
 8009cc8:	4682      	mov	sl, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4690      	mov	r8, r2
 8009cce:	d82d      	bhi.n	8009d2c <__ssputs_r+0x70>
 8009cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cd8:	d026      	beq.n	8009d28 <__ssputs_r+0x6c>
 8009cda:	6965      	ldr	r5, [r4, #20]
 8009cdc:	6909      	ldr	r1, [r1, #16]
 8009cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce2:	eba3 0901 	sub.w	r9, r3, r1
 8009ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cea:	1c7b      	adds	r3, r7, #1
 8009cec:	444b      	add	r3, r9
 8009cee:	106d      	asrs	r5, r5, #1
 8009cf0:	429d      	cmp	r5, r3
 8009cf2:	bf38      	it	cc
 8009cf4:	461d      	movcc	r5, r3
 8009cf6:	0553      	lsls	r3, r2, #21
 8009cf8:	d527      	bpl.n	8009d4a <__ssputs_r+0x8e>
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7ff fbd0 	bl	80094a0 <_malloc_r>
 8009d00:	4606      	mov	r6, r0
 8009d02:	b360      	cbz	r0, 8009d5e <__ssputs_r+0xa2>
 8009d04:	6921      	ldr	r1, [r4, #16]
 8009d06:	464a      	mov	r2, r9
 8009d08:	f7fe fcf9 	bl	80086fe <memcpy>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	6126      	str	r6, [r4, #16]
 8009d1a:	6165      	str	r5, [r4, #20]
 8009d1c:	444e      	add	r6, r9
 8009d1e:	eba5 0509 	sub.w	r5, r5, r9
 8009d22:	6026      	str	r6, [r4, #0]
 8009d24:	60a5      	str	r5, [r4, #8]
 8009d26:	463e      	mov	r6, r7
 8009d28:	42be      	cmp	r6, r7
 8009d2a:	d900      	bls.n	8009d2e <__ssputs_r+0x72>
 8009d2c:	463e      	mov	r6, r7
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	4632      	mov	r2, r6
 8009d32:	4641      	mov	r1, r8
 8009d34:	f000 f9c6 	bl	800a0c4 <memmove>
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	1b9b      	subs	r3, r3, r6
 8009d3c:	60a3      	str	r3, [r4, #8]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	4433      	add	r3, r6
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	2000      	movs	r0, #0
 8009d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	f000 fa28 	bl	800a1a0 <_realloc_r>
 8009d50:	4606      	mov	r6, r0
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d1e0      	bne.n	8009d18 <__ssputs_r+0x5c>
 8009d56:	6921      	ldr	r1, [r4, #16]
 8009d58:	4650      	mov	r0, sl
 8009d5a:	f7ff fb2d 	bl	80093b8 <_free_r>
 8009d5e:	230c      	movs	r3, #12
 8009d60:	f8ca 3000 	str.w	r3, [sl]
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d70:	e7e9      	b.n	8009d46 <__ssputs_r+0x8a>
	...

08009d74 <_svfiprintf_r>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	4698      	mov	r8, r3
 8009d7a:	898b      	ldrh	r3, [r1, #12]
 8009d7c:	061b      	lsls	r3, r3, #24
 8009d7e:	b09d      	sub	sp, #116	@ 0x74
 8009d80:	4607      	mov	r7, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	d510      	bpl.n	8009daa <_svfiprintf_r+0x36>
 8009d88:	690b      	ldr	r3, [r1, #16]
 8009d8a:	b973      	cbnz	r3, 8009daa <_svfiprintf_r+0x36>
 8009d8c:	2140      	movs	r1, #64	@ 0x40
 8009d8e:	f7ff fb87 	bl	80094a0 <_malloc_r>
 8009d92:	6028      	str	r0, [r5, #0]
 8009d94:	6128      	str	r0, [r5, #16]
 8009d96:	b930      	cbnz	r0, 8009da6 <_svfiprintf_r+0x32>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009da0:	b01d      	add	sp, #116	@ 0x74
 8009da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da6:	2340      	movs	r3, #64	@ 0x40
 8009da8:	616b      	str	r3, [r5, #20]
 8009daa:	2300      	movs	r3, #0
 8009dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dae:	2320      	movs	r3, #32
 8009db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db8:	2330      	movs	r3, #48	@ 0x30
 8009dba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f58 <_svfiprintf_r+0x1e4>
 8009dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dc2:	f04f 0901 	mov.w	r9, #1
 8009dc6:	4623      	mov	r3, r4
 8009dc8:	469a      	mov	sl, r3
 8009dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dce:	b10a      	cbz	r2, 8009dd4 <_svfiprintf_r+0x60>
 8009dd0:	2a25      	cmp	r2, #37	@ 0x25
 8009dd2:	d1f9      	bne.n	8009dc8 <_svfiprintf_r+0x54>
 8009dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd8:	d00b      	beq.n	8009df2 <_svfiprintf_r+0x7e>
 8009dda:	465b      	mov	r3, fp
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ff6b 	bl	8009cbc <__ssputs_r>
 8009de6:	3001      	adds	r0, #1
 8009de8:	f000 80a7 	beq.w	8009f3a <_svfiprintf_r+0x1c6>
 8009dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dee:	445a      	add	r2, fp
 8009df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009df2:	f89a 3000 	ldrb.w	r3, [sl]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 809f 	beq.w	8009f3a <_svfiprintf_r+0x1c6>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e06:	f10a 0a01 	add.w	sl, sl, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	9307      	str	r3, [sp, #28]
 8009e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e14:	4654      	mov	r4, sl
 8009e16:	2205      	movs	r2, #5
 8009e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1c:	484e      	ldr	r0, [pc, #312]	@ (8009f58 <_svfiprintf_r+0x1e4>)
 8009e1e:	f7f6 f9df 	bl	80001e0 <memchr>
 8009e22:	9a04      	ldr	r2, [sp, #16]
 8009e24:	b9d8      	cbnz	r0, 8009e5e <_svfiprintf_r+0xea>
 8009e26:	06d0      	lsls	r0, r2, #27
 8009e28:	bf44      	itt	mi
 8009e2a:	2320      	movmi	r3, #32
 8009e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e30:	0711      	lsls	r1, r2, #28
 8009e32:	bf44      	itt	mi
 8009e34:	232b      	movmi	r3, #43	@ 0x2b
 8009e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e40:	d015      	beq.n	8009e6e <_svfiprintf_r+0xfa>
 8009e42:	9a07      	ldr	r2, [sp, #28]
 8009e44:	4654      	mov	r4, sl
 8009e46:	2000      	movs	r0, #0
 8009e48:	f04f 0c0a 	mov.w	ip, #10
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e52:	3b30      	subs	r3, #48	@ 0x30
 8009e54:	2b09      	cmp	r3, #9
 8009e56:	d94b      	bls.n	8009ef0 <_svfiprintf_r+0x17c>
 8009e58:	b1b0      	cbz	r0, 8009e88 <_svfiprintf_r+0x114>
 8009e5a:	9207      	str	r2, [sp, #28]
 8009e5c:	e014      	b.n	8009e88 <_svfiprintf_r+0x114>
 8009e5e:	eba0 0308 	sub.w	r3, r0, r8
 8009e62:	fa09 f303 	lsl.w	r3, r9, r3
 8009e66:	4313      	orrs	r3, r2
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	46a2      	mov	sl, r4
 8009e6c:	e7d2      	b.n	8009e14 <_svfiprintf_r+0xa0>
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	1d19      	adds	r1, r3, #4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	9103      	str	r1, [sp, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfbb      	ittet	lt
 8009e7a:	425b      	neglt	r3, r3
 8009e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e80:	9307      	strge	r3, [sp, #28]
 8009e82:	9307      	strlt	r3, [sp, #28]
 8009e84:	bfb8      	it	lt
 8009e86:	9204      	strlt	r2, [sp, #16]
 8009e88:	7823      	ldrb	r3, [r4, #0]
 8009e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e8c:	d10a      	bne.n	8009ea4 <_svfiprintf_r+0x130>
 8009e8e:	7863      	ldrb	r3, [r4, #1]
 8009e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e92:	d132      	bne.n	8009efa <_svfiprintf_r+0x186>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	9203      	str	r2, [sp, #12]
 8009e9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ea0:	3402      	adds	r4, #2
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f68 <_svfiprintf_r+0x1f4>
 8009ea8:	7821      	ldrb	r1, [r4, #0]
 8009eaa:	2203      	movs	r2, #3
 8009eac:	4650      	mov	r0, sl
 8009eae:	f7f6 f997 	bl	80001e0 <memchr>
 8009eb2:	b138      	cbz	r0, 8009ec4 <_svfiprintf_r+0x150>
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	eba0 000a 	sub.w	r0, r0, sl
 8009eba:	2240      	movs	r2, #64	@ 0x40
 8009ebc:	4082      	lsls	r2, r0
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	3401      	adds	r4, #1
 8009ec2:	9304      	str	r3, [sp, #16]
 8009ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec8:	4824      	ldr	r0, [pc, #144]	@ (8009f5c <_svfiprintf_r+0x1e8>)
 8009eca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ece:	2206      	movs	r2, #6
 8009ed0:	f7f6 f986 	bl	80001e0 <memchr>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d036      	beq.n	8009f46 <_svfiprintf_r+0x1d2>
 8009ed8:	4b21      	ldr	r3, [pc, #132]	@ (8009f60 <_svfiprintf_r+0x1ec>)
 8009eda:	bb1b      	cbnz	r3, 8009f24 <_svfiprintf_r+0x1b0>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	3307      	adds	r3, #7
 8009ee0:	f023 0307 	bic.w	r3, r3, #7
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eea:	4433      	add	r3, r6
 8009eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eee:	e76a      	b.n	8009dc6 <_svfiprintf_r+0x52>
 8009ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7a8      	b.n	8009e4c <_svfiprintf_r+0xd8>
 8009efa:	2300      	movs	r3, #0
 8009efc:	3401      	adds	r4, #1
 8009efe:	9305      	str	r3, [sp, #20]
 8009f00:	4619      	mov	r1, r3
 8009f02:	f04f 0c0a 	mov.w	ip, #10
 8009f06:	4620      	mov	r0, r4
 8009f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f0c:	3a30      	subs	r2, #48	@ 0x30
 8009f0e:	2a09      	cmp	r2, #9
 8009f10:	d903      	bls.n	8009f1a <_svfiprintf_r+0x1a6>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0c6      	beq.n	8009ea4 <_svfiprintf_r+0x130>
 8009f16:	9105      	str	r1, [sp, #20]
 8009f18:	e7c4      	b.n	8009ea4 <_svfiprintf_r+0x130>
 8009f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f1e:	4604      	mov	r4, r0
 8009f20:	2301      	movs	r3, #1
 8009f22:	e7f0      	b.n	8009f06 <_svfiprintf_r+0x192>
 8009f24:	ab03      	add	r3, sp, #12
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	462a      	mov	r2, r5
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f64 <_svfiprintf_r+0x1f0>)
 8009f2c:	a904      	add	r1, sp, #16
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f7fd fe32 	bl	8007b98 <_printf_float>
 8009f34:	1c42      	adds	r2, r0, #1
 8009f36:	4606      	mov	r6, r0
 8009f38:	d1d6      	bne.n	8009ee8 <_svfiprintf_r+0x174>
 8009f3a:	89ab      	ldrh	r3, [r5, #12]
 8009f3c:	065b      	lsls	r3, r3, #25
 8009f3e:	f53f af2d 	bmi.w	8009d9c <_svfiprintf_r+0x28>
 8009f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f44:	e72c      	b.n	8009da0 <_svfiprintf_r+0x2c>
 8009f46:	ab03      	add	r3, sp, #12
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	4b05      	ldr	r3, [pc, #20]	@ (8009f64 <_svfiprintf_r+0x1f0>)
 8009f4e:	a904      	add	r1, sp, #16
 8009f50:	4638      	mov	r0, r7
 8009f52:	f7fe f8b9 	bl	80080c8 <_printf_i>
 8009f56:	e7ed      	b.n	8009f34 <_svfiprintf_r+0x1c0>
 8009f58:	0800d720 	.word	0x0800d720
 8009f5c:	0800d72a 	.word	0x0800d72a
 8009f60:	08007b99 	.word	0x08007b99
 8009f64:	08009cbd 	.word	0x08009cbd
 8009f68:	0800d726 	.word	0x0800d726

08009f6c <__sflush_r>:
 8009f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f74:	0716      	lsls	r6, r2, #28
 8009f76:	4605      	mov	r5, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	d454      	bmi.n	800a026 <__sflush_r+0xba>
 8009f7c:	684b      	ldr	r3, [r1, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dc02      	bgt.n	8009f88 <__sflush_r+0x1c>
 8009f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd48      	ble.n	800a01a <__sflush_r+0xae>
 8009f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	d045      	beq.n	800a01a <__sflush_r+0xae>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f94:	682f      	ldr	r7, [r5, #0]
 8009f96:	6a21      	ldr	r1, [r4, #32]
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	d030      	beq.n	8009ffe <__sflush_r+0x92>
 8009f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	0759      	lsls	r1, r3, #29
 8009fa2:	d505      	bpl.n	8009fb0 <__sflush_r+0x44>
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009faa:	b10b      	cbz	r3, 8009fb0 <__sflush_r+0x44>
 8009fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fb4:	6a21      	ldr	r1, [r4, #32]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b0      	blx	r6
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	d106      	bne.n	8009fce <__sflush_r+0x62>
 8009fc0:	6829      	ldr	r1, [r5, #0]
 8009fc2:	291d      	cmp	r1, #29
 8009fc4:	d82b      	bhi.n	800a01e <__sflush_r+0xb2>
 8009fc6:	4a2a      	ldr	r2, [pc, #168]	@ (800a070 <__sflush_r+0x104>)
 8009fc8:	410a      	asrs	r2, r1
 8009fca:	07d6      	lsls	r6, r2, #31
 8009fcc:	d427      	bmi.n	800a01e <__sflush_r+0xb2>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	6062      	str	r2, [r4, #4]
 8009fd2:	04d9      	lsls	r1, r3, #19
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	6022      	str	r2, [r4, #0]
 8009fd8:	d504      	bpl.n	8009fe4 <__sflush_r+0x78>
 8009fda:	1c42      	adds	r2, r0, #1
 8009fdc:	d101      	bne.n	8009fe2 <__sflush_r+0x76>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b903      	cbnz	r3, 8009fe4 <__sflush_r+0x78>
 8009fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe6:	602f      	str	r7, [r5, #0]
 8009fe8:	b1b9      	cbz	r1, 800a01a <__sflush_r+0xae>
 8009fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fee:	4299      	cmp	r1, r3
 8009ff0:	d002      	beq.n	8009ff8 <__sflush_r+0x8c>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7ff f9e0 	bl	80093b8 <_free_r>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ffc:	e00d      	b.n	800a01a <__sflush_r+0xae>
 8009ffe:	2301      	movs	r3, #1
 800a000:	4628      	mov	r0, r5
 800a002:	47b0      	blx	r6
 800a004:	4602      	mov	r2, r0
 800a006:	1c50      	adds	r0, r2, #1
 800a008:	d1c9      	bne.n	8009f9e <__sflush_r+0x32>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0c6      	beq.n	8009f9e <__sflush_r+0x32>
 800a010:	2b1d      	cmp	r3, #29
 800a012:	d001      	beq.n	800a018 <__sflush_r+0xac>
 800a014:	2b16      	cmp	r3, #22
 800a016:	d11e      	bne.n	800a056 <__sflush_r+0xea>
 800a018:	602f      	str	r7, [r5, #0]
 800a01a:	2000      	movs	r0, #0
 800a01c:	e022      	b.n	800a064 <__sflush_r+0xf8>
 800a01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a022:	b21b      	sxth	r3, r3
 800a024:	e01b      	b.n	800a05e <__sflush_r+0xf2>
 800a026:	690f      	ldr	r7, [r1, #16]
 800a028:	2f00      	cmp	r7, #0
 800a02a:	d0f6      	beq.n	800a01a <__sflush_r+0xae>
 800a02c:	0793      	lsls	r3, r2, #30
 800a02e:	680e      	ldr	r6, [r1, #0]
 800a030:	bf08      	it	eq
 800a032:	694b      	ldreq	r3, [r1, #20]
 800a034:	600f      	str	r7, [r1, #0]
 800a036:	bf18      	it	ne
 800a038:	2300      	movne	r3, #0
 800a03a:	eba6 0807 	sub.w	r8, r6, r7
 800a03e:	608b      	str	r3, [r1, #8]
 800a040:	f1b8 0f00 	cmp.w	r8, #0
 800a044:	dde9      	ble.n	800a01a <__sflush_r+0xae>
 800a046:	6a21      	ldr	r1, [r4, #32]
 800a048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a04a:	4643      	mov	r3, r8
 800a04c:	463a      	mov	r2, r7
 800a04e:	4628      	mov	r0, r5
 800a050:	47b0      	blx	r6
 800a052:	2800      	cmp	r0, #0
 800a054:	dc08      	bgt.n	800a068 <__sflush_r+0xfc>
 800a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a068:	4407      	add	r7, r0
 800a06a:	eba8 0800 	sub.w	r8, r8, r0
 800a06e:	e7e7      	b.n	800a040 <__sflush_r+0xd4>
 800a070:	dfbffffe 	.word	0xdfbffffe

0800a074 <_fflush_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	690b      	ldr	r3, [r1, #16]
 800a078:	4605      	mov	r5, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	b913      	cbnz	r3, 800a084 <_fflush_r+0x10>
 800a07e:	2500      	movs	r5, #0
 800a080:	4628      	mov	r0, r5
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	b118      	cbz	r0, 800a08e <_fflush_r+0x1a>
 800a086:	6a03      	ldr	r3, [r0, #32]
 800a088:	b90b      	cbnz	r3, 800a08e <_fflush_r+0x1a>
 800a08a:	f7fe f9c9 	bl	8008420 <__sinit>
 800a08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f3      	beq.n	800a07e <_fflush_r+0xa>
 800a096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a098:	07d0      	lsls	r0, r2, #31
 800a09a:	d404      	bmi.n	800a0a6 <_fflush_r+0x32>
 800a09c:	0599      	lsls	r1, r3, #22
 800a09e:	d402      	bmi.n	800a0a6 <_fflush_r+0x32>
 800a0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0a2:	f7fe fb2a 	bl	80086fa <__retarget_lock_acquire_recursive>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f7ff ff5f 	bl	8009f6c <__sflush_r>
 800a0ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0b0:	07da      	lsls	r2, r3, #31
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	d4e4      	bmi.n	800a080 <_fflush_r+0xc>
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	059b      	lsls	r3, r3, #22
 800a0ba:	d4e1      	bmi.n	800a080 <_fflush_r+0xc>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0be:	f7fe fb1d 	bl	80086fc <__retarget_lock_release_recursive>
 800a0c2:	e7dd      	b.n	800a080 <_fflush_r+0xc>

0800a0c4 <memmove>:
 800a0c4:	4288      	cmp	r0, r1
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	eb01 0402 	add.w	r4, r1, r2
 800a0cc:	d902      	bls.n	800a0d4 <memmove+0x10>
 800a0ce:	4284      	cmp	r4, r0
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	d807      	bhi.n	800a0e4 <memmove+0x20>
 800a0d4:	1e43      	subs	r3, r0, #1
 800a0d6:	42a1      	cmp	r1, r4
 800a0d8:	d008      	beq.n	800a0ec <memmove+0x28>
 800a0da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0e2:	e7f8      	b.n	800a0d6 <memmove+0x12>
 800a0e4:	4402      	add	r2, r0
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	428a      	cmp	r2, r1
 800a0ea:	d100      	bne.n	800a0ee <memmove+0x2a>
 800a0ec:	bd10      	pop	{r4, pc}
 800a0ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0f6:	e7f7      	b.n	800a0e8 <memmove+0x24>

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	@ (800a114 <_sbrk_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f8 fce8 	bl	8002ad8 <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20005c3c 	.word	0x20005c3c

0800a118 <__assert_func>:
 800a118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a11a:	4614      	mov	r4, r2
 800a11c:	461a      	mov	r2, r3
 800a11e:	4b09      	ldr	r3, [pc, #36]	@ (800a144 <__assert_func+0x2c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4605      	mov	r5, r0
 800a124:	68d8      	ldr	r0, [r3, #12]
 800a126:	b954      	cbnz	r4, 800a13e <__assert_func+0x26>
 800a128:	4b07      	ldr	r3, [pc, #28]	@ (800a148 <__assert_func+0x30>)
 800a12a:	461c      	mov	r4, r3
 800a12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a130:	9100      	str	r1, [sp, #0]
 800a132:	462b      	mov	r3, r5
 800a134:	4905      	ldr	r1, [pc, #20]	@ (800a14c <__assert_func+0x34>)
 800a136:	f000 f86f 	bl	800a218 <fiprintf>
 800a13a:	f000 f87f 	bl	800a23c <abort>
 800a13e:	4b04      	ldr	r3, [pc, #16]	@ (800a150 <__assert_func+0x38>)
 800a140:	e7f4      	b.n	800a12c <__assert_func+0x14>
 800a142:	bf00      	nop
 800a144:	20000e34 	.word	0x20000e34
 800a148:	0800d776 	.word	0x0800d776
 800a14c:	0800d748 	.word	0x0800d748
 800a150:	0800d73b 	.word	0x0800d73b

0800a154 <_calloc_r>:
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	fba1 5402 	umull	r5, r4, r1, r2
 800a15a:	b93c      	cbnz	r4, 800a16c <_calloc_r+0x18>
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7ff f99f 	bl	80094a0 <_malloc_r>
 800a162:	4606      	mov	r6, r0
 800a164:	b928      	cbnz	r0, 800a172 <_calloc_r+0x1e>
 800a166:	2600      	movs	r6, #0
 800a168:	4630      	mov	r0, r6
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	220c      	movs	r2, #12
 800a16e:	6002      	str	r2, [r0, #0]
 800a170:	e7f9      	b.n	800a166 <_calloc_r+0x12>
 800a172:	462a      	mov	r2, r5
 800a174:	4621      	mov	r1, r4
 800a176:	f7fe f9ec 	bl	8008552 <memset>
 800a17a:	e7f5      	b.n	800a168 <_calloc_r+0x14>

0800a17c <__ascii_mbtowc>:
 800a17c:	b082      	sub	sp, #8
 800a17e:	b901      	cbnz	r1, 800a182 <__ascii_mbtowc+0x6>
 800a180:	a901      	add	r1, sp, #4
 800a182:	b142      	cbz	r2, 800a196 <__ascii_mbtowc+0x1a>
 800a184:	b14b      	cbz	r3, 800a19a <__ascii_mbtowc+0x1e>
 800a186:	7813      	ldrb	r3, [r2, #0]
 800a188:	600b      	str	r3, [r1, #0]
 800a18a:	7812      	ldrb	r2, [r2, #0]
 800a18c:	1e10      	subs	r0, r2, #0
 800a18e:	bf18      	it	ne
 800a190:	2001      	movne	r0, #1
 800a192:	b002      	add	sp, #8
 800a194:	4770      	bx	lr
 800a196:	4610      	mov	r0, r2
 800a198:	e7fb      	b.n	800a192 <__ascii_mbtowc+0x16>
 800a19a:	f06f 0001 	mvn.w	r0, #1
 800a19e:	e7f8      	b.n	800a192 <__ascii_mbtowc+0x16>

0800a1a0 <_realloc_r>:
 800a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4615      	mov	r5, r2
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	b921      	cbnz	r1, 800a1b6 <_realloc_r+0x16>
 800a1ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	f7ff b975 	b.w	80094a0 <_malloc_r>
 800a1b6:	b92a      	cbnz	r2, 800a1c4 <_realloc_r+0x24>
 800a1b8:	f7ff f8fe 	bl	80093b8 <_free_r>
 800a1bc:	2400      	movs	r4, #0
 800a1be:	4620      	mov	r0, r4
 800a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c4:	f000 f841 	bl	800a24a <_malloc_usable_size_r>
 800a1c8:	4285      	cmp	r5, r0
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	d802      	bhi.n	800a1d4 <_realloc_r+0x34>
 800a1ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1d2:	d8f4      	bhi.n	800a1be <_realloc_r+0x1e>
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f7ff f962 	bl	80094a0 <_malloc_r>
 800a1dc:	4607      	mov	r7, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d0ec      	beq.n	800a1bc <_realloc_r+0x1c>
 800a1e2:	42b5      	cmp	r5, r6
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	bf28      	it	cs
 800a1ea:	4632      	movcs	r2, r6
 800a1ec:	f7fe fa87 	bl	80086fe <memcpy>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f7ff f8e0 	bl	80093b8 <_free_r>
 800a1f8:	463c      	mov	r4, r7
 800a1fa:	e7e0      	b.n	800a1be <_realloc_r+0x1e>

0800a1fc <__ascii_wctomb>:
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	4608      	mov	r0, r1
 800a200:	b141      	cbz	r1, 800a214 <__ascii_wctomb+0x18>
 800a202:	2aff      	cmp	r2, #255	@ 0xff
 800a204:	d904      	bls.n	800a210 <__ascii_wctomb+0x14>
 800a206:	228a      	movs	r2, #138	@ 0x8a
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a20e:	4770      	bx	lr
 800a210:	700a      	strb	r2, [r1, #0]
 800a212:	2001      	movs	r0, #1
 800a214:	4770      	bx	lr
	...

0800a218 <fiprintf>:
 800a218:	b40e      	push	{r1, r2, r3}
 800a21a:	b503      	push	{r0, r1, lr}
 800a21c:	4601      	mov	r1, r0
 800a21e:	ab03      	add	r3, sp, #12
 800a220:	4805      	ldr	r0, [pc, #20]	@ (800a238 <fiprintf+0x20>)
 800a222:	f853 2b04 	ldr.w	r2, [r3], #4
 800a226:	6800      	ldr	r0, [r0, #0]
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	f000 f83f 	bl	800a2ac <_vfiprintf_r>
 800a22e:	b002      	add	sp, #8
 800a230:	f85d eb04 	ldr.w	lr, [sp], #4
 800a234:	b003      	add	sp, #12
 800a236:	4770      	bx	lr
 800a238:	20000e34 	.word	0x20000e34

0800a23c <abort>:
 800a23c:	b508      	push	{r3, lr}
 800a23e:	2006      	movs	r0, #6
 800a240:	f000 fa08 	bl	800a654 <raise>
 800a244:	2001      	movs	r0, #1
 800a246:	f7f8 fbcf 	bl	80029e8 <_exit>

0800a24a <_malloc_usable_size_r>:
 800a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24e:	1f18      	subs	r0, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfbc      	itt	lt
 800a254:	580b      	ldrlt	r3, [r1, r0]
 800a256:	18c0      	addlt	r0, r0, r3
 800a258:	4770      	bx	lr

0800a25a <__sfputc_r>:
 800a25a:	6893      	ldr	r3, [r2, #8]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	b410      	push	{r4}
 800a262:	6093      	str	r3, [r2, #8]
 800a264:	da08      	bge.n	800a278 <__sfputc_r+0x1e>
 800a266:	6994      	ldr	r4, [r2, #24]
 800a268:	42a3      	cmp	r3, r4
 800a26a:	db01      	blt.n	800a270 <__sfputc_r+0x16>
 800a26c:	290a      	cmp	r1, #10
 800a26e:	d103      	bne.n	800a278 <__sfputc_r+0x1e>
 800a270:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a274:	f000 b932 	b.w	800a4dc <__swbuf_r>
 800a278:	6813      	ldr	r3, [r2, #0]
 800a27a:	1c58      	adds	r0, r3, #1
 800a27c:	6010      	str	r0, [r2, #0]
 800a27e:	7019      	strb	r1, [r3, #0]
 800a280:	4608      	mov	r0, r1
 800a282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <__sfputs_r>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	4606      	mov	r6, r0
 800a28c:	460f      	mov	r7, r1
 800a28e:	4614      	mov	r4, r2
 800a290:	18d5      	adds	r5, r2, r3
 800a292:	42ac      	cmp	r4, r5
 800a294:	d101      	bne.n	800a29a <__sfputs_r+0x12>
 800a296:	2000      	movs	r0, #0
 800a298:	e007      	b.n	800a2aa <__sfputs_r+0x22>
 800a29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29e:	463a      	mov	r2, r7
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f7ff ffda 	bl	800a25a <__sfputc_r>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	d1f3      	bne.n	800a292 <__sfputs_r+0xa>
 800a2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2ac <_vfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	b09d      	sub	sp, #116	@ 0x74
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	b118      	cbz	r0, 800a2c4 <_vfiprintf_r+0x18>
 800a2bc:	6a03      	ldr	r3, [r0, #32]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x18>
 800a2c0:	f7fe f8ae 	bl	8008420 <__sinit>
 800a2c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	d405      	bmi.n	800a2d6 <_vfiprintf_r+0x2a>
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	059a      	lsls	r2, r3, #22
 800a2ce:	d402      	bmi.n	800a2d6 <_vfiprintf_r+0x2a>
 800a2d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2d2:	f7fe fa12 	bl	80086fa <__retarget_lock_acquire_recursive>
 800a2d6:	89ab      	ldrh	r3, [r5, #12]
 800a2d8:	071b      	lsls	r3, r3, #28
 800a2da:	d501      	bpl.n	800a2e0 <_vfiprintf_r+0x34>
 800a2dc:	692b      	ldr	r3, [r5, #16]
 800a2de:	b99b      	cbnz	r3, 800a308 <_vfiprintf_r+0x5c>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f000 f938 	bl	800a558 <__swsetup_r>
 800a2e8:	b170      	cbz	r0, 800a308 <_vfiprintf_r+0x5c>
 800a2ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2ec:	07dc      	lsls	r4, r3, #31
 800a2ee:	d504      	bpl.n	800a2fa <_vfiprintf_r+0x4e>
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2f4:	b01d      	add	sp, #116	@ 0x74
 800a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fa:	89ab      	ldrh	r3, [r5, #12]
 800a2fc:	0598      	lsls	r0, r3, #22
 800a2fe:	d4f7      	bmi.n	800a2f0 <_vfiprintf_r+0x44>
 800a300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a302:	f7fe f9fb 	bl	80086fc <__retarget_lock_release_recursive>
 800a306:	e7f3      	b.n	800a2f0 <_vfiprintf_r+0x44>
 800a308:	2300      	movs	r3, #0
 800a30a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a30c:	2320      	movs	r3, #32
 800a30e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a312:	f8cd 800c 	str.w	r8, [sp, #12]
 800a316:	2330      	movs	r3, #48	@ 0x30
 800a318:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4c8 <_vfiprintf_r+0x21c>
 800a31c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a320:	f04f 0901 	mov.w	r9, #1
 800a324:	4623      	mov	r3, r4
 800a326:	469a      	mov	sl, r3
 800a328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a32c:	b10a      	cbz	r2, 800a332 <_vfiprintf_r+0x86>
 800a32e:	2a25      	cmp	r2, #37	@ 0x25
 800a330:	d1f9      	bne.n	800a326 <_vfiprintf_r+0x7a>
 800a332:	ebba 0b04 	subs.w	fp, sl, r4
 800a336:	d00b      	beq.n	800a350 <_vfiprintf_r+0xa4>
 800a338:	465b      	mov	r3, fp
 800a33a:	4622      	mov	r2, r4
 800a33c:	4629      	mov	r1, r5
 800a33e:	4630      	mov	r0, r6
 800a340:	f7ff ffa2 	bl	800a288 <__sfputs_r>
 800a344:	3001      	adds	r0, #1
 800a346:	f000 80a7 	beq.w	800a498 <_vfiprintf_r+0x1ec>
 800a34a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a34c:	445a      	add	r2, fp
 800a34e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a350:	f89a 3000 	ldrb.w	r3, [sl]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 809f 	beq.w	800a498 <_vfiprintf_r+0x1ec>
 800a35a:	2300      	movs	r3, #0
 800a35c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a364:	f10a 0a01 	add.w	sl, sl, #1
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a370:	931a      	str	r3, [sp, #104]	@ 0x68
 800a372:	4654      	mov	r4, sl
 800a374:	2205      	movs	r2, #5
 800a376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a37a:	4853      	ldr	r0, [pc, #332]	@ (800a4c8 <_vfiprintf_r+0x21c>)
 800a37c:	f7f5 ff30 	bl	80001e0 <memchr>
 800a380:	9a04      	ldr	r2, [sp, #16]
 800a382:	b9d8      	cbnz	r0, 800a3bc <_vfiprintf_r+0x110>
 800a384:	06d1      	lsls	r1, r2, #27
 800a386:	bf44      	itt	mi
 800a388:	2320      	movmi	r3, #32
 800a38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a38e:	0713      	lsls	r3, r2, #28
 800a390:	bf44      	itt	mi
 800a392:	232b      	movmi	r3, #43	@ 0x2b
 800a394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a398:	f89a 3000 	ldrb.w	r3, [sl]
 800a39c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a39e:	d015      	beq.n	800a3cc <_vfiprintf_r+0x120>
 800a3a0:	9a07      	ldr	r2, [sp, #28]
 800a3a2:	4654      	mov	r4, sl
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f04f 0c0a 	mov.w	ip, #10
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3b0:	3b30      	subs	r3, #48	@ 0x30
 800a3b2:	2b09      	cmp	r3, #9
 800a3b4:	d94b      	bls.n	800a44e <_vfiprintf_r+0x1a2>
 800a3b6:	b1b0      	cbz	r0, 800a3e6 <_vfiprintf_r+0x13a>
 800a3b8:	9207      	str	r2, [sp, #28]
 800a3ba:	e014      	b.n	800a3e6 <_vfiprintf_r+0x13a>
 800a3bc:	eba0 0308 	sub.w	r3, r0, r8
 800a3c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	9304      	str	r3, [sp, #16]
 800a3c8:	46a2      	mov	sl, r4
 800a3ca:	e7d2      	b.n	800a372 <_vfiprintf_r+0xc6>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	1d19      	adds	r1, r3, #4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	9103      	str	r1, [sp, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfbb      	ittet	lt
 800a3d8:	425b      	neglt	r3, r3
 800a3da:	f042 0202 	orrlt.w	r2, r2, #2
 800a3de:	9307      	strge	r3, [sp, #28]
 800a3e0:	9307      	strlt	r3, [sp, #28]
 800a3e2:	bfb8      	it	lt
 800a3e4:	9204      	strlt	r2, [sp, #16]
 800a3e6:	7823      	ldrb	r3, [r4, #0]
 800a3e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3ea:	d10a      	bne.n	800a402 <_vfiprintf_r+0x156>
 800a3ec:	7863      	ldrb	r3, [r4, #1]
 800a3ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3f0:	d132      	bne.n	800a458 <_vfiprintf_r+0x1ac>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	1d1a      	adds	r2, r3, #4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	9203      	str	r2, [sp, #12]
 800a3fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3fe:	3402      	adds	r4, #2
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4d8 <_vfiprintf_r+0x22c>
 800a406:	7821      	ldrb	r1, [r4, #0]
 800a408:	2203      	movs	r2, #3
 800a40a:	4650      	mov	r0, sl
 800a40c:	f7f5 fee8 	bl	80001e0 <memchr>
 800a410:	b138      	cbz	r0, 800a422 <_vfiprintf_r+0x176>
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	eba0 000a 	sub.w	r0, r0, sl
 800a418:	2240      	movs	r2, #64	@ 0x40
 800a41a:	4082      	lsls	r2, r0
 800a41c:	4313      	orrs	r3, r2
 800a41e:	3401      	adds	r4, #1
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a426:	4829      	ldr	r0, [pc, #164]	@ (800a4cc <_vfiprintf_r+0x220>)
 800a428:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a42c:	2206      	movs	r2, #6
 800a42e:	f7f5 fed7 	bl	80001e0 <memchr>
 800a432:	2800      	cmp	r0, #0
 800a434:	d03f      	beq.n	800a4b6 <_vfiprintf_r+0x20a>
 800a436:	4b26      	ldr	r3, [pc, #152]	@ (800a4d0 <_vfiprintf_r+0x224>)
 800a438:	bb1b      	cbnz	r3, 800a482 <_vfiprintf_r+0x1d6>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	3307      	adds	r3, #7
 800a43e:	f023 0307 	bic.w	r3, r3, #7
 800a442:	3308      	adds	r3, #8
 800a444:	9303      	str	r3, [sp, #12]
 800a446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a448:	443b      	add	r3, r7
 800a44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a44c:	e76a      	b.n	800a324 <_vfiprintf_r+0x78>
 800a44e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a452:	460c      	mov	r4, r1
 800a454:	2001      	movs	r0, #1
 800a456:	e7a8      	b.n	800a3aa <_vfiprintf_r+0xfe>
 800a458:	2300      	movs	r3, #0
 800a45a:	3401      	adds	r4, #1
 800a45c:	9305      	str	r3, [sp, #20]
 800a45e:	4619      	mov	r1, r3
 800a460:	f04f 0c0a 	mov.w	ip, #10
 800a464:	4620      	mov	r0, r4
 800a466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a46a:	3a30      	subs	r2, #48	@ 0x30
 800a46c:	2a09      	cmp	r2, #9
 800a46e:	d903      	bls.n	800a478 <_vfiprintf_r+0x1cc>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0c6      	beq.n	800a402 <_vfiprintf_r+0x156>
 800a474:	9105      	str	r1, [sp, #20]
 800a476:	e7c4      	b.n	800a402 <_vfiprintf_r+0x156>
 800a478:	fb0c 2101 	mla	r1, ip, r1, r2
 800a47c:	4604      	mov	r4, r0
 800a47e:	2301      	movs	r3, #1
 800a480:	e7f0      	b.n	800a464 <_vfiprintf_r+0x1b8>
 800a482:	ab03      	add	r3, sp, #12
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	462a      	mov	r2, r5
 800a488:	4b12      	ldr	r3, [pc, #72]	@ (800a4d4 <_vfiprintf_r+0x228>)
 800a48a:	a904      	add	r1, sp, #16
 800a48c:	4630      	mov	r0, r6
 800a48e:	f7fd fb83 	bl	8007b98 <_printf_float>
 800a492:	4607      	mov	r7, r0
 800a494:	1c78      	adds	r0, r7, #1
 800a496:	d1d6      	bne.n	800a446 <_vfiprintf_r+0x19a>
 800a498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a49a:	07d9      	lsls	r1, r3, #31
 800a49c:	d405      	bmi.n	800a4aa <_vfiprintf_r+0x1fe>
 800a49e:	89ab      	ldrh	r3, [r5, #12]
 800a4a0:	059a      	lsls	r2, r3, #22
 800a4a2:	d402      	bmi.n	800a4aa <_vfiprintf_r+0x1fe>
 800a4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4a6:	f7fe f929 	bl	80086fc <__retarget_lock_release_recursive>
 800a4aa:	89ab      	ldrh	r3, [r5, #12]
 800a4ac:	065b      	lsls	r3, r3, #25
 800a4ae:	f53f af1f 	bmi.w	800a2f0 <_vfiprintf_r+0x44>
 800a4b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4b4:	e71e      	b.n	800a2f4 <_vfiprintf_r+0x48>
 800a4b6:	ab03      	add	r3, sp, #12
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <_vfiprintf_r+0x228>)
 800a4be:	a904      	add	r1, sp, #16
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7fd fe01 	bl	80080c8 <_printf_i>
 800a4c6:	e7e4      	b.n	800a492 <_vfiprintf_r+0x1e6>
 800a4c8:	0800d720 	.word	0x0800d720
 800a4cc:	0800d72a 	.word	0x0800d72a
 800a4d0:	08007b99 	.word	0x08007b99
 800a4d4:	0800a289 	.word	0x0800a289
 800a4d8:	0800d726 	.word	0x0800d726

0800a4dc <__swbuf_r>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	460e      	mov	r6, r1
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	b118      	cbz	r0, 800a4ee <__swbuf_r+0x12>
 800a4e6:	6a03      	ldr	r3, [r0, #32]
 800a4e8:	b90b      	cbnz	r3, 800a4ee <__swbuf_r+0x12>
 800a4ea:	f7fd ff99 	bl	8008420 <__sinit>
 800a4ee:	69a3      	ldr	r3, [r4, #24]
 800a4f0:	60a3      	str	r3, [r4, #8]
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	071a      	lsls	r2, r3, #28
 800a4f6:	d501      	bpl.n	800a4fc <__swbuf_r+0x20>
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	b943      	cbnz	r3, 800a50e <__swbuf_r+0x32>
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4628      	mov	r0, r5
 800a500:	f000 f82a 	bl	800a558 <__swsetup_r>
 800a504:	b118      	cbz	r0, 800a50e <__swbuf_r+0x32>
 800a506:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a50a:	4638      	mov	r0, r7
 800a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	1a98      	subs	r0, r3, r2
 800a514:	6963      	ldr	r3, [r4, #20]
 800a516:	b2f6      	uxtb	r6, r6
 800a518:	4283      	cmp	r3, r0
 800a51a:	4637      	mov	r7, r6
 800a51c:	dc05      	bgt.n	800a52a <__swbuf_r+0x4e>
 800a51e:	4621      	mov	r1, r4
 800a520:	4628      	mov	r0, r5
 800a522:	f7ff fda7 	bl	800a074 <_fflush_r>
 800a526:	2800      	cmp	r0, #0
 800a528:	d1ed      	bne.n	800a506 <__swbuf_r+0x2a>
 800a52a:	68a3      	ldr	r3, [r4, #8]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	6022      	str	r2, [r4, #0]
 800a536:	701e      	strb	r6, [r3, #0]
 800a538:	6962      	ldr	r2, [r4, #20]
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d004      	beq.n	800a54a <__swbuf_r+0x6e>
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	07db      	lsls	r3, r3, #31
 800a544:	d5e1      	bpl.n	800a50a <__swbuf_r+0x2e>
 800a546:	2e0a      	cmp	r6, #10
 800a548:	d1df      	bne.n	800a50a <__swbuf_r+0x2e>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4628      	mov	r0, r5
 800a54e:	f7ff fd91 	bl	800a074 <_fflush_r>
 800a552:	2800      	cmp	r0, #0
 800a554:	d0d9      	beq.n	800a50a <__swbuf_r+0x2e>
 800a556:	e7d6      	b.n	800a506 <__swbuf_r+0x2a>

0800a558 <__swsetup_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4b29      	ldr	r3, [pc, #164]	@ (800a600 <__swsetup_r+0xa8>)
 800a55c:	4605      	mov	r5, r0
 800a55e:	6818      	ldr	r0, [r3, #0]
 800a560:	460c      	mov	r4, r1
 800a562:	b118      	cbz	r0, 800a56c <__swsetup_r+0x14>
 800a564:	6a03      	ldr	r3, [r0, #32]
 800a566:	b90b      	cbnz	r3, 800a56c <__swsetup_r+0x14>
 800a568:	f7fd ff5a 	bl	8008420 <__sinit>
 800a56c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a570:	0719      	lsls	r1, r3, #28
 800a572:	d422      	bmi.n	800a5ba <__swsetup_r+0x62>
 800a574:	06da      	lsls	r2, r3, #27
 800a576:	d407      	bmi.n	800a588 <__swsetup_r+0x30>
 800a578:	2209      	movs	r2, #9
 800a57a:	602a      	str	r2, [r5, #0]
 800a57c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a586:	e033      	b.n	800a5f0 <__swsetup_r+0x98>
 800a588:	0758      	lsls	r0, r3, #29
 800a58a:	d512      	bpl.n	800a5b2 <__swsetup_r+0x5a>
 800a58c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a58e:	b141      	cbz	r1, 800a5a2 <__swsetup_r+0x4a>
 800a590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a594:	4299      	cmp	r1, r3
 800a596:	d002      	beq.n	800a59e <__swsetup_r+0x46>
 800a598:	4628      	mov	r0, r5
 800a59a:	f7fe ff0d 	bl	80093b8 <_free_r>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	6063      	str	r3, [r4, #4]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f043 0308 	orr.w	r3, r3, #8
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	6923      	ldr	r3, [r4, #16]
 800a5bc:	b94b      	cbnz	r3, 800a5d2 <__swsetup_r+0x7a>
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5c8:	d003      	beq.n	800a5d2 <__swsetup_r+0x7a>
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f000 f883 	bl	800a6d8 <__smakebuf_r>
 800a5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d6:	f013 0201 	ands.w	r2, r3, #1
 800a5da:	d00a      	beq.n	800a5f2 <__swsetup_r+0x9a>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	60a2      	str	r2, [r4, #8]
 800a5e0:	6962      	ldr	r2, [r4, #20]
 800a5e2:	4252      	negs	r2, r2
 800a5e4:	61a2      	str	r2, [r4, #24]
 800a5e6:	6922      	ldr	r2, [r4, #16]
 800a5e8:	b942      	cbnz	r2, 800a5fc <__swsetup_r+0xa4>
 800a5ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5ee:	d1c5      	bne.n	800a57c <__swsetup_r+0x24>
 800a5f0:	bd38      	pop	{r3, r4, r5, pc}
 800a5f2:	0799      	lsls	r1, r3, #30
 800a5f4:	bf58      	it	pl
 800a5f6:	6962      	ldrpl	r2, [r4, #20]
 800a5f8:	60a2      	str	r2, [r4, #8]
 800a5fa:	e7f4      	b.n	800a5e6 <__swsetup_r+0x8e>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e7f7      	b.n	800a5f0 <__swsetup_r+0x98>
 800a600:	20000e34 	.word	0x20000e34

0800a604 <_raise_r>:
 800a604:	291f      	cmp	r1, #31
 800a606:	b538      	push	{r3, r4, r5, lr}
 800a608:	4605      	mov	r5, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	d904      	bls.n	800a618 <_raise_r+0x14>
 800a60e:	2316      	movs	r3, #22
 800a610:	6003      	str	r3, [r0, #0]
 800a612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a61a:	b112      	cbz	r2, 800a622 <_raise_r+0x1e>
 800a61c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a620:	b94b      	cbnz	r3, 800a636 <_raise_r+0x32>
 800a622:	4628      	mov	r0, r5
 800a624:	f000 f830 	bl	800a688 <_getpid_r>
 800a628:	4622      	mov	r2, r4
 800a62a:	4601      	mov	r1, r0
 800a62c:	4628      	mov	r0, r5
 800a62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a632:	f000 b817 	b.w	800a664 <_kill_r>
 800a636:	2b01      	cmp	r3, #1
 800a638:	d00a      	beq.n	800a650 <_raise_r+0x4c>
 800a63a:	1c59      	adds	r1, r3, #1
 800a63c:	d103      	bne.n	800a646 <_raise_r+0x42>
 800a63e:	2316      	movs	r3, #22
 800a640:	6003      	str	r3, [r0, #0]
 800a642:	2001      	movs	r0, #1
 800a644:	e7e7      	b.n	800a616 <_raise_r+0x12>
 800a646:	2100      	movs	r1, #0
 800a648:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a64c:	4620      	mov	r0, r4
 800a64e:	4798      	blx	r3
 800a650:	2000      	movs	r0, #0
 800a652:	e7e0      	b.n	800a616 <_raise_r+0x12>

0800a654 <raise>:
 800a654:	4b02      	ldr	r3, [pc, #8]	@ (800a660 <raise+0xc>)
 800a656:	4601      	mov	r1, r0
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	f7ff bfd3 	b.w	800a604 <_raise_r>
 800a65e:	bf00      	nop
 800a660:	20000e34 	.word	0x20000e34

0800a664 <_kill_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d07      	ldr	r5, [pc, #28]	@ (800a684 <_kill_r+0x20>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	4611      	mov	r1, r2
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	f7f8 f9a9 	bl	80029c8 <_kill>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d102      	bne.n	800a680 <_kill_r+0x1c>
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	b103      	cbz	r3, 800a680 <_kill_r+0x1c>
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	bf00      	nop
 800a684:	20005c3c 	.word	0x20005c3c

0800a688 <_getpid_r>:
 800a688:	f7f8 b996 	b.w	80029b8 <_getpid>

0800a68c <__swhatbuf_r>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	460c      	mov	r4, r1
 800a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a694:	2900      	cmp	r1, #0
 800a696:	b096      	sub	sp, #88	@ 0x58
 800a698:	4615      	mov	r5, r2
 800a69a:	461e      	mov	r6, r3
 800a69c:	da0d      	bge.n	800a6ba <__swhatbuf_r+0x2e>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6a4:	f04f 0100 	mov.w	r1, #0
 800a6a8:	bf14      	ite	ne
 800a6aa:	2340      	movne	r3, #64	@ 0x40
 800a6ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	6031      	str	r1, [r6, #0]
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	b016      	add	sp, #88	@ 0x58
 800a6b8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ba:	466a      	mov	r2, sp
 800a6bc:	f000 f848 	bl	800a750 <_fstat_r>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	dbec      	blt.n	800a69e <__swhatbuf_r+0x12>
 800a6c4:	9901      	ldr	r1, [sp, #4]
 800a6c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6ce:	4259      	negs	r1, r3
 800a6d0:	4159      	adcs	r1, r3
 800a6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6d6:	e7eb      	b.n	800a6b0 <__swhatbuf_r+0x24>

0800a6d8 <__smakebuf_r>:
 800a6d8:	898b      	ldrh	r3, [r1, #12]
 800a6da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6dc:	079d      	lsls	r5, r3, #30
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	d507      	bpl.n	800a6f4 <__smakebuf_r+0x1c>
 800a6e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	6163      	str	r3, [r4, #20]
 800a6f0:	b003      	add	sp, #12
 800a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f4:	ab01      	add	r3, sp, #4
 800a6f6:	466a      	mov	r2, sp
 800a6f8:	f7ff ffc8 	bl	800a68c <__swhatbuf_r>
 800a6fc:	9f00      	ldr	r7, [sp, #0]
 800a6fe:	4605      	mov	r5, r0
 800a700:	4639      	mov	r1, r7
 800a702:	4630      	mov	r0, r6
 800a704:	f7fe fecc 	bl	80094a0 <_malloc_r>
 800a708:	b948      	cbnz	r0, 800a71e <__smakebuf_r+0x46>
 800a70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70e:	059a      	lsls	r2, r3, #22
 800a710:	d4ee      	bmi.n	800a6f0 <__smakebuf_r+0x18>
 800a712:	f023 0303 	bic.w	r3, r3, #3
 800a716:	f043 0302 	orr.w	r3, r3, #2
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	e7e2      	b.n	800a6e4 <__smakebuf_r+0xc>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	6020      	str	r0, [r4, #0]
 800a722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a72e:	b15b      	cbz	r3, 800a748 <__smakebuf_r+0x70>
 800a730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a734:	4630      	mov	r0, r6
 800a736:	f000 f81d 	bl	800a774 <_isatty_r>
 800a73a:	b128      	cbz	r0, 800a748 <__smakebuf_r+0x70>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	f023 0303 	bic.w	r3, r3, #3
 800a742:	f043 0301 	orr.w	r3, r3, #1
 800a746:	81a3      	strh	r3, [r4, #12]
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	431d      	orrs	r5, r3
 800a74c:	81a5      	strh	r5, [r4, #12]
 800a74e:	e7cf      	b.n	800a6f0 <__smakebuf_r+0x18>

0800a750 <_fstat_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d07      	ldr	r5, [pc, #28]	@ (800a770 <_fstat_r+0x20>)
 800a754:	2300      	movs	r3, #0
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	4611      	mov	r1, r2
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	f7f8 f993 	bl	8002a88 <_fstat>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d102      	bne.n	800a76c <_fstat_r+0x1c>
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	b103      	cbz	r3, 800a76c <_fstat_r+0x1c>
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	bf00      	nop
 800a770:	20005c3c 	.word	0x20005c3c

0800a774 <_isatty_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d06      	ldr	r5, [pc, #24]	@ (800a790 <_isatty_r+0x1c>)
 800a778:	2300      	movs	r3, #0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f8 f992 	bl	8002aa8 <_isatty>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_isatty_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_isatty_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20005c3c 	.word	0x20005c3c
 800a794:	00000000 	.word	0x00000000

0800a798 <cos>:
 800a798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a79a:	ec53 2b10 	vmov	r2, r3, d0
 800a79e:	4826      	ldr	r0, [pc, #152]	@ (800a838 <cos+0xa0>)
 800a7a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a7a4:	4281      	cmp	r1, r0
 800a7a6:	d806      	bhi.n	800a7b6 <cos+0x1e>
 800a7a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a830 <cos+0x98>
 800a7ac:	b005      	add	sp, #20
 800a7ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b2:	f000 b899 	b.w	800a8e8 <__kernel_cos>
 800a7b6:	4821      	ldr	r0, [pc, #132]	@ (800a83c <cos+0xa4>)
 800a7b8:	4281      	cmp	r1, r0
 800a7ba:	d908      	bls.n	800a7ce <cos+0x36>
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f7f5 fd6a 	bl	8000298 <__aeabi_dsub>
 800a7c4:	ec41 0b10 	vmov	d0, r0, r1
 800a7c8:	b005      	add	sp, #20
 800a7ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7ce:	4668      	mov	r0, sp
 800a7d0:	f000 fa0e 	bl	800abf0 <__ieee754_rem_pio2>
 800a7d4:	f000 0003 	and.w	r0, r0, #3
 800a7d8:	2801      	cmp	r0, #1
 800a7da:	d00b      	beq.n	800a7f4 <cos+0x5c>
 800a7dc:	2802      	cmp	r0, #2
 800a7de:	d015      	beq.n	800a80c <cos+0x74>
 800a7e0:	b9d8      	cbnz	r0, 800a81a <cos+0x82>
 800a7e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7e6:	ed9d 0b00 	vldr	d0, [sp]
 800a7ea:	f000 f87d 	bl	800a8e8 <__kernel_cos>
 800a7ee:	ec51 0b10 	vmov	r0, r1, d0
 800a7f2:	e7e7      	b.n	800a7c4 <cos+0x2c>
 800a7f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7f8:	ed9d 0b00 	vldr	d0, [sp]
 800a7fc:	f000 f93c 	bl	800aa78 <__kernel_sin>
 800a800:	ec53 2b10 	vmov	r2, r3, d0
 800a804:	4610      	mov	r0, r2
 800a806:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a80a:	e7db      	b.n	800a7c4 <cos+0x2c>
 800a80c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a810:	ed9d 0b00 	vldr	d0, [sp]
 800a814:	f000 f868 	bl	800a8e8 <__kernel_cos>
 800a818:	e7f2      	b.n	800a800 <cos+0x68>
 800a81a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a81e:	ed9d 0b00 	vldr	d0, [sp]
 800a822:	2001      	movs	r0, #1
 800a824:	f000 f928 	bl	800aa78 <__kernel_sin>
 800a828:	e7e1      	b.n	800a7ee <cos+0x56>
 800a82a:	bf00      	nop
 800a82c:	f3af 8000 	nop.w
	...
 800a838:	3fe921fb 	.word	0x3fe921fb
 800a83c:	7fefffff 	.word	0x7fefffff

0800a840 <sin>:
 800a840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a842:	ec53 2b10 	vmov	r2, r3, d0
 800a846:	4826      	ldr	r0, [pc, #152]	@ (800a8e0 <sin+0xa0>)
 800a848:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a84c:	4281      	cmp	r1, r0
 800a84e:	d807      	bhi.n	800a860 <sin+0x20>
 800a850:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a8d8 <sin+0x98>
 800a854:	2000      	movs	r0, #0
 800a856:	b005      	add	sp, #20
 800a858:	f85d eb04 	ldr.w	lr, [sp], #4
 800a85c:	f000 b90c 	b.w	800aa78 <__kernel_sin>
 800a860:	4820      	ldr	r0, [pc, #128]	@ (800a8e4 <sin+0xa4>)
 800a862:	4281      	cmp	r1, r0
 800a864:	d908      	bls.n	800a878 <sin+0x38>
 800a866:	4610      	mov	r0, r2
 800a868:	4619      	mov	r1, r3
 800a86a:	f7f5 fd15 	bl	8000298 <__aeabi_dsub>
 800a86e:	ec41 0b10 	vmov	d0, r0, r1
 800a872:	b005      	add	sp, #20
 800a874:	f85d fb04 	ldr.w	pc, [sp], #4
 800a878:	4668      	mov	r0, sp
 800a87a:	f000 f9b9 	bl	800abf0 <__ieee754_rem_pio2>
 800a87e:	f000 0003 	and.w	r0, r0, #3
 800a882:	2801      	cmp	r0, #1
 800a884:	d00c      	beq.n	800a8a0 <sin+0x60>
 800a886:	2802      	cmp	r0, #2
 800a888:	d011      	beq.n	800a8ae <sin+0x6e>
 800a88a:	b9e8      	cbnz	r0, 800a8c8 <sin+0x88>
 800a88c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a890:	ed9d 0b00 	vldr	d0, [sp]
 800a894:	2001      	movs	r0, #1
 800a896:	f000 f8ef 	bl	800aa78 <__kernel_sin>
 800a89a:	ec51 0b10 	vmov	r0, r1, d0
 800a89e:	e7e6      	b.n	800a86e <sin+0x2e>
 800a8a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8a4:	ed9d 0b00 	vldr	d0, [sp]
 800a8a8:	f000 f81e 	bl	800a8e8 <__kernel_cos>
 800a8ac:	e7f5      	b.n	800a89a <sin+0x5a>
 800a8ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8b2:	ed9d 0b00 	vldr	d0, [sp]
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	f000 f8de 	bl	800aa78 <__kernel_sin>
 800a8bc:	ec53 2b10 	vmov	r2, r3, d0
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a8c6:	e7d2      	b.n	800a86e <sin+0x2e>
 800a8c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8cc:	ed9d 0b00 	vldr	d0, [sp]
 800a8d0:	f000 f80a 	bl	800a8e8 <__kernel_cos>
 800a8d4:	e7f2      	b.n	800a8bc <sin+0x7c>
 800a8d6:	bf00      	nop
	...
 800a8e0:	3fe921fb 	.word	0x3fe921fb
 800a8e4:	7fefffff 	.word	0x7fefffff

0800a8e8 <__kernel_cos>:
 800a8e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	ec57 6b10 	vmov	r6, r7, d0
 800a8f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a8f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a8f8:	ed8d 1b00 	vstr	d1, [sp]
 800a8fc:	d206      	bcs.n	800a90c <__kernel_cos+0x24>
 800a8fe:	4630      	mov	r0, r6
 800a900:	4639      	mov	r1, r7
 800a902:	f7f6 f931 	bl	8000b68 <__aeabi_d2iz>
 800a906:	2800      	cmp	r0, #0
 800a908:	f000 8088 	beq.w	800aa1c <__kernel_cos+0x134>
 800a90c:	4632      	mov	r2, r6
 800a90e:	463b      	mov	r3, r7
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f5 fe78 	bl	8000608 <__aeabi_dmul>
 800a918:	4b51      	ldr	r3, [pc, #324]	@ (800aa60 <__kernel_cos+0x178>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	4604      	mov	r4, r0
 800a91e:	460d      	mov	r5, r1
 800a920:	f7f5 fe72 	bl	8000608 <__aeabi_dmul>
 800a924:	a340      	add	r3, pc, #256	@ (adr r3, 800aa28 <__kernel_cos+0x140>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	4682      	mov	sl, r0
 800a92c:	468b      	mov	fp, r1
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fe69 	bl	8000608 <__aeabi_dmul>
 800a936:	a33e      	add	r3, pc, #248	@ (adr r3, 800aa30 <__kernel_cos+0x148>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fcae 	bl	800029c <__adddf3>
 800a940:	4622      	mov	r2, r4
 800a942:	462b      	mov	r3, r5
 800a944:	f7f5 fe60 	bl	8000608 <__aeabi_dmul>
 800a948:	a33b      	add	r3, pc, #236	@ (adr r3, 800aa38 <__kernel_cos+0x150>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fca3 	bl	8000298 <__aeabi_dsub>
 800a952:	4622      	mov	r2, r4
 800a954:	462b      	mov	r3, r5
 800a956:	f7f5 fe57 	bl	8000608 <__aeabi_dmul>
 800a95a:	a339      	add	r3, pc, #228	@ (adr r3, 800aa40 <__kernel_cos+0x158>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fc9c 	bl	800029c <__adddf3>
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	f7f5 fe4e 	bl	8000608 <__aeabi_dmul>
 800a96c:	a336      	add	r3, pc, #216	@ (adr r3, 800aa48 <__kernel_cos+0x160>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fc91 	bl	8000298 <__aeabi_dsub>
 800a976:	4622      	mov	r2, r4
 800a978:	462b      	mov	r3, r5
 800a97a:	f7f5 fe45 	bl	8000608 <__aeabi_dmul>
 800a97e:	a334      	add	r3, pc, #208	@ (adr r3, 800aa50 <__kernel_cos+0x168>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fc8a 	bl	800029c <__adddf3>
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	f7f5 fe3c 	bl	8000608 <__aeabi_dmul>
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	f7f5 fe38 	bl	8000608 <__aeabi_dmul>
 800a998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f5 fe30 	bl	8000608 <__aeabi_dmul>
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7f5 fc72 	bl	8000298 <__aeabi_dsub>
 800a9b4:	4b2b      	ldr	r3, [pc, #172]	@ (800aa64 <__kernel_cos+0x17c>)
 800a9b6:	4598      	cmp	r8, r3
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	460f      	mov	r7, r1
 800a9bc:	d810      	bhi.n	800a9e0 <__kernel_cos+0xf8>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	4650      	mov	r0, sl
 800a9c4:	4659      	mov	r1, fp
 800a9c6:	f7f5 fc67 	bl	8000298 <__aeabi_dsub>
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4926      	ldr	r1, [pc, #152]	@ (800aa68 <__kernel_cos+0x180>)
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f7f5 fc61 	bl	8000298 <__aeabi_dsub>
 800a9d6:	ec41 0b10 	vmov	d0, r0, r1
 800a9da:	b003      	add	sp, #12
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	4b22      	ldr	r3, [pc, #136]	@ (800aa6c <__kernel_cos+0x184>)
 800a9e2:	4921      	ldr	r1, [pc, #132]	@ (800aa68 <__kernel_cos+0x180>)
 800a9e4:	4598      	cmp	r8, r3
 800a9e6:	bf8c      	ite	hi
 800a9e8:	4d21      	ldrhi	r5, [pc, #132]	@ (800aa70 <__kernel_cos+0x188>)
 800a9ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a9ee:	2400      	movs	r4, #0
 800a9f0:	4622      	mov	r2, r4
 800a9f2:	462b      	mov	r3, r5
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f7f5 fc4f 	bl	8000298 <__aeabi_dsub>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	4689      	mov	r9, r1
 800aa00:	462b      	mov	r3, r5
 800aa02:	4650      	mov	r0, sl
 800aa04:	4659      	mov	r1, fp
 800aa06:	f7f5 fc47 	bl	8000298 <__aeabi_dsub>
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	f7f5 fc43 	bl	8000298 <__aeabi_dsub>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4640      	mov	r0, r8
 800aa18:	4649      	mov	r1, r9
 800aa1a:	e7da      	b.n	800a9d2 <__kernel_cos+0xea>
 800aa1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800aa58 <__kernel_cos+0x170>
 800aa20:	e7db      	b.n	800a9da <__kernel_cos+0xf2>
 800aa22:	bf00      	nop
 800aa24:	f3af 8000 	nop.w
 800aa28:	be8838d4 	.word	0xbe8838d4
 800aa2c:	bda8fae9 	.word	0xbda8fae9
 800aa30:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa34:	3e21ee9e 	.word	0x3e21ee9e
 800aa38:	809c52ad 	.word	0x809c52ad
 800aa3c:	3e927e4f 	.word	0x3e927e4f
 800aa40:	19cb1590 	.word	0x19cb1590
 800aa44:	3efa01a0 	.word	0x3efa01a0
 800aa48:	16c15177 	.word	0x16c15177
 800aa4c:	3f56c16c 	.word	0x3f56c16c
 800aa50:	5555554c 	.word	0x5555554c
 800aa54:	3fa55555 	.word	0x3fa55555
 800aa58:	00000000 	.word	0x00000000
 800aa5c:	3ff00000 	.word	0x3ff00000
 800aa60:	3fe00000 	.word	0x3fe00000
 800aa64:	3fd33332 	.word	0x3fd33332
 800aa68:	3ff00000 	.word	0x3ff00000
 800aa6c:	3fe90000 	.word	0x3fe90000
 800aa70:	3fd20000 	.word	0x3fd20000
 800aa74:	00000000 	.word	0x00000000

0800aa78 <__kernel_sin>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	ec55 4b10 	vmov	r4, r5, d0
 800aa80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aa84:	b085      	sub	sp, #20
 800aa86:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800aa8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800aa8e:	4680      	mov	r8, r0
 800aa90:	d205      	bcs.n	800aa9e <__kernel_sin+0x26>
 800aa92:	4620      	mov	r0, r4
 800aa94:	4629      	mov	r1, r5
 800aa96:	f7f6 f867 	bl	8000b68 <__aeabi_d2iz>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d052      	beq.n	800ab44 <__kernel_sin+0xcc>
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	462b      	mov	r3, r5
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	f7f5 fdaf 	bl	8000608 <__aeabi_dmul>
 800aaaa:	4682      	mov	sl, r0
 800aaac:	468b      	mov	fp, r1
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7f5 fda7 	bl	8000608 <__aeabi_dmul>
 800aaba:	a342      	add	r3, pc, #264	@ (adr r3, 800abc4 <__kernel_sin+0x14c>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	e9cd 0100 	strd	r0, r1, [sp]
 800aac4:	4650      	mov	r0, sl
 800aac6:	4659      	mov	r1, fp
 800aac8:	f7f5 fd9e 	bl	8000608 <__aeabi_dmul>
 800aacc:	a33f      	add	r3, pc, #252	@ (adr r3, 800abcc <__kernel_sin+0x154>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 fbe1 	bl	8000298 <__aeabi_dsub>
 800aad6:	4652      	mov	r2, sl
 800aad8:	465b      	mov	r3, fp
 800aada:	f7f5 fd95 	bl	8000608 <__aeabi_dmul>
 800aade:	a33d      	add	r3, pc, #244	@ (adr r3, 800abd4 <__kernel_sin+0x15c>)
 800aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae4:	f7f5 fbda 	bl	800029c <__adddf3>
 800aae8:	4652      	mov	r2, sl
 800aaea:	465b      	mov	r3, fp
 800aaec:	f7f5 fd8c 	bl	8000608 <__aeabi_dmul>
 800aaf0:	a33a      	add	r3, pc, #232	@ (adr r3, 800abdc <__kernel_sin+0x164>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fbcf 	bl	8000298 <__aeabi_dsub>
 800aafa:	4652      	mov	r2, sl
 800aafc:	465b      	mov	r3, fp
 800aafe:	f7f5 fd83 	bl	8000608 <__aeabi_dmul>
 800ab02:	a338      	add	r3, pc, #224	@ (adr r3, 800abe4 <__kernel_sin+0x16c>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fbc8 	bl	800029c <__adddf3>
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	f1b8 0f00 	cmp.w	r8, #0
 800ab14:	d11b      	bne.n	800ab4e <__kernel_sin+0xd6>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	4659      	mov	r1, fp
 800ab1e:	f7f5 fd73 	bl	8000608 <__aeabi_dmul>
 800ab22:	a325      	add	r3, pc, #148	@ (adr r3, 800abb8 <__kernel_sin+0x140>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fbb6 	bl	8000298 <__aeabi_dsub>
 800ab2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4620      	mov	r0, r4
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f7f5 fbae 	bl	800029c <__adddf3>
 800ab40:	4604      	mov	r4, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	ec45 4b10 	vmov	d0, r4, r5
 800ab48:	b005      	add	sp, #20
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab52:	4b1b      	ldr	r3, [pc, #108]	@ (800abc0 <__kernel_sin+0x148>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	f7f5 fd57 	bl	8000608 <__aeabi_dmul>
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	463b      	mov	r3, r7
 800ab62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab66:	f7f5 fd4f 	bl	8000608 <__aeabi_dmul>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4640      	mov	r0, r8
 800ab70:	4649      	mov	r1, r9
 800ab72:	f7f5 fb91 	bl	8000298 <__aeabi_dsub>
 800ab76:	4652      	mov	r2, sl
 800ab78:	465b      	mov	r3, fp
 800ab7a:	f7f5 fd45 	bl	8000608 <__aeabi_dmul>
 800ab7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab82:	f7f5 fb89 	bl	8000298 <__aeabi_dsub>
 800ab86:	a30c      	add	r3, pc, #48	@ (adr r3, 800abb8 <__kernel_sin+0x140>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab94:	f7f5 fd38 	bl	8000608 <__aeabi_dmul>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4639      	mov	r1, r7
 800aba0:	f7f5 fb7c 	bl	800029c <__adddf3>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4620      	mov	r0, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	f7f5 fb74 	bl	8000298 <__aeabi_dsub>
 800abb0:	e7c6      	b.n	800ab40 <__kernel_sin+0xc8>
 800abb2:	bf00      	nop
 800abb4:	f3af 8000 	nop.w
 800abb8:	55555549 	.word	0x55555549
 800abbc:	3fc55555 	.word	0x3fc55555
 800abc0:	3fe00000 	.word	0x3fe00000
 800abc4:	5acfd57c 	.word	0x5acfd57c
 800abc8:	3de5d93a 	.word	0x3de5d93a
 800abcc:	8a2b9ceb 	.word	0x8a2b9ceb
 800abd0:	3e5ae5e6 	.word	0x3e5ae5e6
 800abd4:	57b1fe7d 	.word	0x57b1fe7d
 800abd8:	3ec71de3 	.word	0x3ec71de3
 800abdc:	19c161d5 	.word	0x19c161d5
 800abe0:	3f2a01a0 	.word	0x3f2a01a0
 800abe4:	1110f8a6 	.word	0x1110f8a6
 800abe8:	3f811111 	.word	0x3f811111
 800abec:	00000000 	.word	0x00000000

0800abf0 <__ieee754_rem_pio2>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	ec57 6b10 	vmov	r6, r7, d0
 800abf8:	4bc5      	ldr	r3, [pc, #788]	@ (800af10 <__ieee754_rem_pio2+0x320>)
 800abfa:	b08d      	sub	sp, #52	@ 0x34
 800abfc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ac00:	4598      	cmp	r8, r3
 800ac02:	4604      	mov	r4, r0
 800ac04:	9704      	str	r7, [sp, #16]
 800ac06:	d807      	bhi.n	800ac18 <__ieee754_rem_pio2+0x28>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	ed80 0b00 	vstr	d0, [r0]
 800ac10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac14:	2500      	movs	r5, #0
 800ac16:	e028      	b.n	800ac6a <__ieee754_rem_pio2+0x7a>
 800ac18:	4bbe      	ldr	r3, [pc, #760]	@ (800af14 <__ieee754_rem_pio2+0x324>)
 800ac1a:	4598      	cmp	r8, r3
 800ac1c:	d878      	bhi.n	800ad10 <__ieee754_rem_pio2+0x120>
 800ac1e:	9b04      	ldr	r3, [sp, #16]
 800ac20:	4dbd      	ldr	r5, [pc, #756]	@ (800af18 <__ieee754_rem_pio2+0x328>)
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	4630      	mov	r0, r6
 800ac26:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aed8 <__ieee754_rem_pio2+0x2e8>)
 800ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	dd38      	ble.n	800aca2 <__ieee754_rem_pio2+0xb2>
 800ac30:	f7f5 fb32 	bl	8000298 <__aeabi_dsub>
 800ac34:	45a8      	cmp	r8, r5
 800ac36:	4606      	mov	r6, r0
 800ac38:	460f      	mov	r7, r1
 800ac3a:	d01a      	beq.n	800ac72 <__ieee754_rem_pio2+0x82>
 800ac3c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2f0>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f7f5 fb29 	bl	8000298 <__aeabi_dsub>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4680      	mov	r8, r0
 800ac4c:	4689      	mov	r9, r1
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fb21 	bl	8000298 <__aeabi_dsub>
 800ac56:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2f0>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 fb1c 	bl	8000298 <__aeabi_dsub>
 800ac60:	e9c4 8900 	strd	r8, r9, [r4]
 800ac64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac68:	2501      	movs	r5, #1
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	b00d      	add	sp, #52	@ 0x34
 800ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac72:	a39d      	add	r3, pc, #628	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f8>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fb0e 	bl	8000298 <__aeabi_dsub>
 800ac7c:	a39c      	add	r3, pc, #624	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x300>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	4606      	mov	r6, r0
 800ac84:	460f      	mov	r7, r1
 800ac86:	f7f5 fb07 	bl	8000298 <__aeabi_dsub>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4680      	mov	r8, r0
 800ac90:	4689      	mov	r9, r1
 800ac92:	4630      	mov	r0, r6
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 faff 	bl	8000298 <__aeabi_dsub>
 800ac9a:	a395      	add	r3, pc, #596	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x300>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	e7dc      	b.n	800ac5c <__ieee754_rem_pio2+0x6c>
 800aca2:	f7f5 fafb 	bl	800029c <__adddf3>
 800aca6:	45a8      	cmp	r8, r5
 800aca8:	4606      	mov	r6, r0
 800acaa:	460f      	mov	r7, r1
 800acac:	d018      	beq.n	800ace0 <__ieee754_rem_pio2+0xf0>
 800acae:	a38c      	add	r3, pc, #560	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2f0>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 faf2 	bl	800029c <__adddf3>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 fae8 	bl	8000298 <__aeabi_dsub>
 800acc8:	a385      	add	r3, pc, #532	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2f0>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f7f5 fae5 	bl	800029c <__adddf3>
 800acd2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800acd6:	e9c4 8900 	strd	r8, r9, [r4]
 800acda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acde:	e7c4      	b.n	800ac6a <__ieee754_rem_pio2+0x7a>
 800ace0:	a381      	add	r3, pc, #516	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f8>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 fad9 	bl	800029c <__adddf3>
 800acea:	a381      	add	r3, pc, #516	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x300>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	4606      	mov	r6, r0
 800acf2:	460f      	mov	r7, r1
 800acf4:	f7f5 fad2 	bl	800029c <__adddf3>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4680      	mov	r8, r0
 800acfe:	4689      	mov	r9, r1
 800ad00:	4630      	mov	r0, r6
 800ad02:	4639      	mov	r1, r7
 800ad04:	f7f5 fac8 	bl	8000298 <__aeabi_dsub>
 800ad08:	a379      	add	r3, pc, #484	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x300>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	e7de      	b.n	800acce <__ieee754_rem_pio2+0xde>
 800ad10:	4b82      	ldr	r3, [pc, #520]	@ (800af1c <__ieee754_rem_pio2+0x32c>)
 800ad12:	4598      	cmp	r8, r3
 800ad14:	f200 80d1 	bhi.w	800aeba <__ieee754_rem_pio2+0x2ca>
 800ad18:	f000 f966 	bl	800afe8 <fabs>
 800ad1c:	ec57 6b10 	vmov	r6, r7, d0
 800ad20:	a375      	add	r3, pc, #468	@ (adr r3, 800aef8 <__ieee754_rem_pio2+0x308>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 fc6d 	bl	8000608 <__aeabi_dmul>
 800ad2e:	4b7c      	ldr	r3, [pc, #496]	@ (800af20 <__ieee754_rem_pio2+0x330>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7f5 fab3 	bl	800029c <__adddf3>
 800ad36:	f7f5 ff17 	bl	8000b68 <__aeabi_d2iz>
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	f7f5 fbfa 	bl	8000534 <__aeabi_i2d>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad48:	a363      	add	r3, pc, #396	@ (adr r3, 800aed8 <__ieee754_rem_pio2+0x2e8>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	f7f5 fc5b 	bl	8000608 <__aeabi_dmul>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4630      	mov	r0, r6
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fa9d 	bl	8000298 <__aeabi_dsub>
 800ad5e:	a360      	add	r3, pc, #384	@ (adr r3, 800aee0 <__ieee754_rem_pio2+0x2f0>)
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	4682      	mov	sl, r0
 800ad66:	468b      	mov	fp, r1
 800ad68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad6c:	f7f5 fc4c 	bl	8000608 <__aeabi_dmul>
 800ad70:	2d1f      	cmp	r5, #31
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	dc0c      	bgt.n	800ad92 <__ieee754_rem_pio2+0x1a2>
 800ad78:	4b6a      	ldr	r3, [pc, #424]	@ (800af24 <__ieee754_rem_pio2+0x334>)
 800ad7a:	1e6a      	subs	r2, r5, #1
 800ad7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad80:	4543      	cmp	r3, r8
 800ad82:	d006      	beq.n	800ad92 <__ieee754_rem_pio2+0x1a2>
 800ad84:	4632      	mov	r2, r6
 800ad86:	463b      	mov	r3, r7
 800ad88:	4650      	mov	r0, sl
 800ad8a:	4659      	mov	r1, fp
 800ad8c:	f7f5 fa84 	bl	8000298 <__aeabi_dsub>
 800ad90:	e00e      	b.n	800adb0 <__ieee754_rem_pio2+0x1c0>
 800ad92:	463b      	mov	r3, r7
 800ad94:	4632      	mov	r2, r6
 800ad96:	4650      	mov	r0, sl
 800ad98:	4659      	mov	r1, fp
 800ad9a:	f7f5 fa7d 	bl	8000298 <__aeabi_dsub>
 800ad9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ada2:	9305      	str	r3, [sp, #20]
 800ada4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ada8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800adac:	2b10      	cmp	r3, #16
 800adae:	dc02      	bgt.n	800adb6 <__ieee754_rem_pio2+0x1c6>
 800adb0:	e9c4 0100 	strd	r0, r1, [r4]
 800adb4:	e039      	b.n	800ae2a <__ieee754_rem_pio2+0x23a>
 800adb6:	a34c      	add	r3, pc, #304	@ (adr r3, 800aee8 <__ieee754_rem_pio2+0x2f8>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc0:	f7f5 fc22 	bl	8000608 <__aeabi_dmul>
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4650      	mov	r0, sl
 800adce:	4659      	mov	r1, fp
 800add0:	f7f5 fa62 	bl	8000298 <__aeabi_dsub>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4680      	mov	r8, r0
 800adda:	4689      	mov	r9, r1
 800addc:	4650      	mov	r0, sl
 800adde:	4659      	mov	r1, fp
 800ade0:	f7f5 fa5a 	bl	8000298 <__aeabi_dsub>
 800ade4:	4632      	mov	r2, r6
 800ade6:	463b      	mov	r3, r7
 800ade8:	f7f5 fa56 	bl	8000298 <__aeabi_dsub>
 800adec:	a340      	add	r3, pc, #256	@ (adr r3, 800aef0 <__ieee754_rem_pio2+0x300>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	4606      	mov	r6, r0
 800adf4:	460f      	mov	r7, r1
 800adf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfa:	f7f5 fc05 	bl	8000608 <__aeabi_dmul>
 800adfe:	4632      	mov	r2, r6
 800ae00:	463b      	mov	r3, r7
 800ae02:	f7f5 fa49 	bl	8000298 <__aeabi_dsub>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	460f      	mov	r7, r1
 800ae0e:	4640      	mov	r0, r8
 800ae10:	4649      	mov	r1, r9
 800ae12:	f7f5 fa41 	bl	8000298 <__aeabi_dsub>
 800ae16:	9a05      	ldr	r2, [sp, #20]
 800ae18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	2b31      	cmp	r3, #49	@ 0x31
 800ae20:	dc20      	bgt.n	800ae64 <__ieee754_rem_pio2+0x274>
 800ae22:	e9c4 0100 	strd	r0, r1, [r4]
 800ae26:	46c2      	mov	sl, r8
 800ae28:	46cb      	mov	fp, r9
 800ae2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae2e:	4650      	mov	r0, sl
 800ae30:	4642      	mov	r2, r8
 800ae32:	464b      	mov	r3, r9
 800ae34:	4659      	mov	r1, fp
 800ae36:	f7f5 fa2f 	bl	8000298 <__aeabi_dsub>
 800ae3a:	463b      	mov	r3, r7
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	f7f5 fa2b 	bl	8000298 <__aeabi_dsub>
 800ae42:	9b04      	ldr	r3, [sp, #16]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae4a:	f6bf af0e 	bge.w	800ac6a <__ieee754_rem_pio2+0x7a>
 800ae4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ae52:	6063      	str	r3, [r4, #4]
 800ae54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae58:	f8c4 8000 	str.w	r8, [r4]
 800ae5c:	60a0      	str	r0, [r4, #8]
 800ae5e:	60e3      	str	r3, [r4, #12]
 800ae60:	426d      	negs	r5, r5
 800ae62:	e702      	b.n	800ac6a <__ieee754_rem_pio2+0x7a>
 800ae64:	a326      	add	r3, pc, #152	@ (adr r3, 800af00 <__ieee754_rem_pio2+0x310>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae6e:	f7f5 fbcb 	bl	8000608 <__aeabi_dmul>
 800ae72:	4606      	mov	r6, r0
 800ae74:	460f      	mov	r7, r1
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	f7f5 fa0b 	bl	8000298 <__aeabi_dsub>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	f7f5 fa03 	bl	8000298 <__aeabi_dsub>
 800ae92:	4632      	mov	r2, r6
 800ae94:	463b      	mov	r3, r7
 800ae96:	f7f5 f9ff 	bl	8000298 <__aeabi_dsub>
 800ae9a:	a31b      	add	r3, pc, #108	@ (adr r3, 800af08 <__ieee754_rem_pio2+0x318>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	4606      	mov	r6, r0
 800aea2:	460f      	mov	r7, r1
 800aea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aea8:	f7f5 fbae 	bl	8000608 <__aeabi_dmul>
 800aeac:	4632      	mov	r2, r6
 800aeae:	463b      	mov	r3, r7
 800aeb0:	f7f5 f9f2 	bl	8000298 <__aeabi_dsub>
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	460f      	mov	r7, r1
 800aeb8:	e764      	b.n	800ad84 <__ieee754_rem_pio2+0x194>
 800aeba:	4b1b      	ldr	r3, [pc, #108]	@ (800af28 <__ieee754_rem_pio2+0x338>)
 800aebc:	4598      	cmp	r8, r3
 800aebe:	d935      	bls.n	800af2c <__ieee754_rem_pio2+0x33c>
 800aec0:	4632      	mov	r2, r6
 800aec2:	463b      	mov	r3, r7
 800aec4:	4630      	mov	r0, r6
 800aec6:	4639      	mov	r1, r7
 800aec8:	f7f5 f9e6 	bl	8000298 <__aeabi_dsub>
 800aecc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aed0:	e9c4 0100 	strd	r0, r1, [r4]
 800aed4:	e69e      	b.n	800ac14 <__ieee754_rem_pio2+0x24>
 800aed6:	bf00      	nop
 800aed8:	54400000 	.word	0x54400000
 800aedc:	3ff921fb 	.word	0x3ff921fb
 800aee0:	1a626331 	.word	0x1a626331
 800aee4:	3dd0b461 	.word	0x3dd0b461
 800aee8:	1a600000 	.word	0x1a600000
 800aeec:	3dd0b461 	.word	0x3dd0b461
 800aef0:	2e037073 	.word	0x2e037073
 800aef4:	3ba3198a 	.word	0x3ba3198a
 800aef8:	6dc9c883 	.word	0x6dc9c883
 800aefc:	3fe45f30 	.word	0x3fe45f30
 800af00:	2e000000 	.word	0x2e000000
 800af04:	3ba3198a 	.word	0x3ba3198a
 800af08:	252049c1 	.word	0x252049c1
 800af0c:	397b839a 	.word	0x397b839a
 800af10:	3fe921fb 	.word	0x3fe921fb
 800af14:	4002d97b 	.word	0x4002d97b
 800af18:	3ff921fb 	.word	0x3ff921fb
 800af1c:	413921fb 	.word	0x413921fb
 800af20:	3fe00000 	.word	0x3fe00000
 800af24:	0800d878 	.word	0x0800d878
 800af28:	7fefffff 	.word	0x7fefffff
 800af2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800af30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800af34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800af38:	4630      	mov	r0, r6
 800af3a:	460f      	mov	r7, r1
 800af3c:	f7f5 fe14 	bl	8000b68 <__aeabi_d2iz>
 800af40:	f7f5 faf8 	bl	8000534 <__aeabi_i2d>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4630      	mov	r0, r6
 800af4a:	4639      	mov	r1, r7
 800af4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af50:	f7f5 f9a2 	bl	8000298 <__aeabi_dsub>
 800af54:	4b22      	ldr	r3, [pc, #136]	@ (800afe0 <__ieee754_rem_pio2+0x3f0>)
 800af56:	2200      	movs	r2, #0
 800af58:	f7f5 fb56 	bl	8000608 <__aeabi_dmul>
 800af5c:	460f      	mov	r7, r1
 800af5e:	4606      	mov	r6, r0
 800af60:	f7f5 fe02 	bl	8000b68 <__aeabi_d2iz>
 800af64:	f7f5 fae6 	bl	8000534 <__aeabi_i2d>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4630      	mov	r0, r6
 800af6e:	4639      	mov	r1, r7
 800af70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af74:	f7f5 f990 	bl	8000298 <__aeabi_dsub>
 800af78:	4b19      	ldr	r3, [pc, #100]	@ (800afe0 <__ieee754_rem_pio2+0x3f0>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	f7f5 fb44 	bl	8000608 <__aeabi_dmul>
 800af80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800af84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800af88:	f04f 0803 	mov.w	r8, #3
 800af8c:	2600      	movs	r6, #0
 800af8e:	2700      	movs	r7, #0
 800af90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800af94:	4632      	mov	r2, r6
 800af96:	463b      	mov	r3, r7
 800af98:	46c2      	mov	sl, r8
 800af9a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800af9e:	f7f5 fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1f4      	bne.n	800af90 <__ieee754_rem_pio2+0x3a0>
 800afa6:	4b0f      	ldr	r3, [pc, #60]	@ (800afe4 <__ieee754_rem_pio2+0x3f4>)
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	2302      	movs	r3, #2
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	462a      	mov	r2, r5
 800afb0:	4653      	mov	r3, sl
 800afb2:	4621      	mov	r1, r4
 800afb4:	a806      	add	r0, sp, #24
 800afb6:	f000 f81f 	bl	800aff8 <__kernel_rem_pio2>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	4605      	mov	r5, r0
 800afc0:	f6bf ae53 	bge.w	800ac6a <__ieee754_rem_pio2+0x7a>
 800afc4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800afc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afcc:	e9c4 2300 	strd	r2, r3, [r4]
 800afd0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800afd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afd8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800afdc:	e740      	b.n	800ae60 <__ieee754_rem_pio2+0x270>
 800afde:	bf00      	nop
 800afe0:	41700000 	.word	0x41700000
 800afe4:	0800d8f8 	.word	0x0800d8f8

0800afe8 <fabs>:
 800afe8:	ec51 0b10 	vmov	r0, r1, d0
 800afec:	4602      	mov	r2, r0
 800afee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aff2:	ec43 2b10 	vmov	d0, r2, r3
 800aff6:	4770      	bx	lr

0800aff8 <__kernel_rem_pio2>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ed2d 8b02 	vpush	{d8}
 800b000:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b004:	f112 0f14 	cmn.w	r2, #20
 800b008:	9306      	str	r3, [sp, #24]
 800b00a:	9104      	str	r1, [sp, #16]
 800b00c:	4bbe      	ldr	r3, [pc, #760]	@ (800b308 <__kernel_rem_pio2+0x310>)
 800b00e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b010:	9008      	str	r0, [sp, #32]
 800b012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	9b06      	ldr	r3, [sp, #24]
 800b01a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b01e:	bfa8      	it	ge
 800b020:	1ed4      	subge	r4, r2, #3
 800b022:	9305      	str	r3, [sp, #20]
 800b024:	bfb2      	itee	lt
 800b026:	2400      	movlt	r4, #0
 800b028:	2318      	movge	r3, #24
 800b02a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b02e:	f06f 0317 	mvn.w	r3, #23
 800b032:	fb04 3303 	mla	r3, r4, r3, r3
 800b036:	eb03 0b02 	add.w	fp, r3, r2
 800b03a:	9b00      	ldr	r3, [sp, #0]
 800b03c:	9a05      	ldr	r2, [sp, #20]
 800b03e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b2f8 <__kernel_rem_pio2+0x300>
 800b042:	eb03 0802 	add.w	r8, r3, r2
 800b046:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b048:	1aa7      	subs	r7, r4, r2
 800b04a:	ae20      	add	r6, sp, #128	@ 0x80
 800b04c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b050:	2500      	movs	r5, #0
 800b052:	4545      	cmp	r5, r8
 800b054:	dd13      	ble.n	800b07e <__kernel_rem_pio2+0x86>
 800b056:	9b06      	ldr	r3, [sp, #24]
 800b058:	aa20      	add	r2, sp, #128	@ 0x80
 800b05a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b05e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b062:	f04f 0800 	mov.w	r8, #0
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	4598      	cmp	r8, r3
 800b06a:	dc31      	bgt.n	800b0d0 <__kernel_rem_pio2+0xd8>
 800b06c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b2f8 <__kernel_rem_pio2+0x300>
 800b070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b074:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b078:	462f      	mov	r7, r5
 800b07a:	2600      	movs	r6, #0
 800b07c:	e01b      	b.n	800b0b6 <__kernel_rem_pio2+0xbe>
 800b07e:	42ef      	cmn	r7, r5
 800b080:	d407      	bmi.n	800b092 <__kernel_rem_pio2+0x9a>
 800b082:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b086:	f7f5 fa55 	bl	8000534 <__aeabi_i2d>
 800b08a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b08e:	3501      	adds	r5, #1
 800b090:	e7df      	b.n	800b052 <__kernel_rem_pio2+0x5a>
 800b092:	ec51 0b18 	vmov	r0, r1, d8
 800b096:	e7f8      	b.n	800b08a <__kernel_rem_pio2+0x92>
 800b098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b0a0:	f7f5 fab2 	bl	8000608 <__aeabi_dmul>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ac:	f7f5 f8f6 	bl	800029c <__adddf3>
 800b0b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b4:	3601      	adds	r6, #1
 800b0b6:	9b05      	ldr	r3, [sp, #20]
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	f1a7 0708 	sub.w	r7, r7, #8
 800b0be:	ddeb      	ble.n	800b098 <__kernel_rem_pio2+0xa0>
 800b0c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0c4:	f108 0801 	add.w	r8, r8, #1
 800b0c8:	ecaa 7b02 	vstmia	sl!, {d7}
 800b0cc:	3508      	adds	r5, #8
 800b0ce:	e7ca      	b.n	800b066 <__kernel_rem_pio2+0x6e>
 800b0d0:	9b00      	ldr	r3, [sp, #0]
 800b0d2:	f8dd 8000 	ldr.w	r8, [sp]
 800b0d6:	aa0c      	add	r2, sp, #48	@ 0x30
 800b0d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b0e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b0ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0ec:	ab98      	add	r3, sp, #608	@ 0x260
 800b0ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b0f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0fa:	ac0c      	add	r4, sp, #48	@ 0x30
 800b0fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b0fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b102:	46a1      	mov	r9, r4
 800b104:	46c2      	mov	sl, r8
 800b106:	f1ba 0f00 	cmp.w	sl, #0
 800b10a:	f1a5 0508 	sub.w	r5, r5, #8
 800b10e:	dc77      	bgt.n	800b200 <__kernel_rem_pio2+0x208>
 800b110:	4658      	mov	r0, fp
 800b112:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b116:	f000 fac7 	bl	800b6a8 <scalbn>
 800b11a:	ec57 6b10 	vmov	r6, r7, d0
 800b11e:	2200      	movs	r2, #0
 800b120:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 fa6e 	bl	8000608 <__aeabi_dmul>
 800b12c:	ec41 0b10 	vmov	d0, r0, r1
 800b130:	f000 fb3a 	bl	800b7a8 <floor>
 800b134:	4b75      	ldr	r3, [pc, #468]	@ (800b30c <__kernel_rem_pio2+0x314>)
 800b136:	ec51 0b10 	vmov	r0, r1, d0
 800b13a:	2200      	movs	r2, #0
 800b13c:	f7f5 fa64 	bl	8000608 <__aeabi_dmul>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4630      	mov	r0, r6
 800b146:	4639      	mov	r1, r7
 800b148:	f7f5 f8a6 	bl	8000298 <__aeabi_dsub>
 800b14c:	460f      	mov	r7, r1
 800b14e:	4606      	mov	r6, r0
 800b150:	f7f5 fd0a 	bl	8000b68 <__aeabi_d2iz>
 800b154:	9002      	str	r0, [sp, #8]
 800b156:	f7f5 f9ed 	bl	8000534 <__aeabi_i2d>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4630      	mov	r0, r6
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 f899 	bl	8000298 <__aeabi_dsub>
 800b166:	f1bb 0f00 	cmp.w	fp, #0
 800b16a:	4606      	mov	r6, r0
 800b16c:	460f      	mov	r7, r1
 800b16e:	dd6c      	ble.n	800b24a <__kernel_rem_pio2+0x252>
 800b170:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b174:	ab0c      	add	r3, sp, #48	@ 0x30
 800b176:	9d02      	ldr	r5, [sp, #8]
 800b178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b17c:	f1cb 0018 	rsb	r0, fp, #24
 800b180:	fa43 f200 	asr.w	r2, r3, r0
 800b184:	4415      	add	r5, r2
 800b186:	4082      	lsls	r2, r0
 800b188:	1a9b      	subs	r3, r3, r2
 800b18a:	aa0c      	add	r2, sp, #48	@ 0x30
 800b18c:	9502      	str	r5, [sp, #8]
 800b18e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b192:	f1cb 0217 	rsb	r2, fp, #23
 800b196:	fa43 f902 	asr.w	r9, r3, r2
 800b19a:	f1b9 0f00 	cmp.w	r9, #0
 800b19e:	dd64      	ble.n	800b26a <__kernel_rem_pio2+0x272>
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	9302      	str	r3, [sp, #8]
 800b1a8:	4615      	mov	r5, r2
 800b1aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b1ae:	4590      	cmp	r8, r2
 800b1b0:	f300 80b8 	bgt.w	800b324 <__kernel_rem_pio2+0x32c>
 800b1b4:	f1bb 0f00 	cmp.w	fp, #0
 800b1b8:	dd07      	ble.n	800b1ca <__kernel_rem_pio2+0x1d2>
 800b1ba:	f1bb 0f01 	cmp.w	fp, #1
 800b1be:	f000 80bf 	beq.w	800b340 <__kernel_rem_pio2+0x348>
 800b1c2:	f1bb 0f02 	cmp.w	fp, #2
 800b1c6:	f000 80c6 	beq.w	800b356 <__kernel_rem_pio2+0x35e>
 800b1ca:	f1b9 0f02 	cmp.w	r9, #2
 800b1ce:	d14c      	bne.n	800b26a <__kernel_rem_pio2+0x272>
 800b1d0:	4632      	mov	r2, r6
 800b1d2:	463b      	mov	r3, r7
 800b1d4:	494e      	ldr	r1, [pc, #312]	@ (800b310 <__kernel_rem_pio2+0x318>)
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	f7f5 f85e 	bl	8000298 <__aeabi_dsub>
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	d042      	beq.n	800b26a <__kernel_rem_pio2+0x272>
 800b1e4:	4658      	mov	r0, fp
 800b1e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b300 <__kernel_rem_pio2+0x308>
 800b1ea:	f000 fa5d 	bl	800b6a8 <scalbn>
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	ec53 2b10 	vmov	r2, r3, d0
 800b1f6:	f7f5 f84f 	bl	8000298 <__aeabi_dsub>
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	e034      	b.n	800b26a <__kernel_rem_pio2+0x272>
 800b200:	4b44      	ldr	r3, [pc, #272]	@ (800b314 <__kernel_rem_pio2+0x31c>)
 800b202:	2200      	movs	r2, #0
 800b204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b208:	f7f5 f9fe 	bl	8000608 <__aeabi_dmul>
 800b20c:	f7f5 fcac 	bl	8000b68 <__aeabi_d2iz>
 800b210:	f7f5 f990 	bl	8000534 <__aeabi_i2d>
 800b214:	4b40      	ldr	r3, [pc, #256]	@ (800b318 <__kernel_rem_pio2+0x320>)
 800b216:	2200      	movs	r2, #0
 800b218:	4606      	mov	r6, r0
 800b21a:	460f      	mov	r7, r1
 800b21c:	f7f5 f9f4 	bl	8000608 <__aeabi_dmul>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b228:	f7f5 f836 	bl	8000298 <__aeabi_dsub>
 800b22c:	f7f5 fc9c 	bl	8000b68 <__aeabi_d2iz>
 800b230:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b234:	f849 0b04 	str.w	r0, [r9], #4
 800b238:	4639      	mov	r1, r7
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7f5 f82e 	bl	800029c <__adddf3>
 800b240:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b248:	e75d      	b.n	800b106 <__kernel_rem_pio2+0x10e>
 800b24a:	d107      	bne.n	800b25c <__kernel_rem_pio2+0x264>
 800b24c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b250:	aa0c      	add	r2, sp, #48	@ 0x30
 800b252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b256:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b25a:	e79e      	b.n	800b19a <__kernel_rem_pio2+0x1a2>
 800b25c:	4b2f      	ldr	r3, [pc, #188]	@ (800b31c <__kernel_rem_pio2+0x324>)
 800b25e:	2200      	movs	r2, #0
 800b260:	f7f5 fc58 	bl	8000b14 <__aeabi_dcmpge>
 800b264:	2800      	cmp	r0, #0
 800b266:	d143      	bne.n	800b2f0 <__kernel_rem_pio2+0x2f8>
 800b268:	4681      	mov	r9, r0
 800b26a:	2200      	movs	r2, #0
 800b26c:	2300      	movs	r3, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 800b276:	2800      	cmp	r0, #0
 800b278:	f000 80bf 	beq.w	800b3fa <__kernel_rem_pio2+0x402>
 800b27c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b280:	2200      	movs	r2, #0
 800b282:	9900      	ldr	r1, [sp, #0]
 800b284:	428b      	cmp	r3, r1
 800b286:	da6e      	bge.n	800b366 <__kernel_rem_pio2+0x36e>
 800b288:	2a00      	cmp	r2, #0
 800b28a:	f000 8089 	beq.w	800b3a0 <__kernel_rem_pio2+0x3a8>
 800b28e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b292:	ab0c      	add	r3, sp, #48	@ 0x30
 800b294:	f1ab 0b18 	sub.w	fp, fp, #24
 800b298:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d0f6      	beq.n	800b28e <__kernel_rem_pio2+0x296>
 800b2a0:	4658      	mov	r0, fp
 800b2a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b300 <__kernel_rem_pio2+0x308>
 800b2a6:	f000 f9ff 	bl	800b6a8 <scalbn>
 800b2aa:	f108 0301 	add.w	r3, r8, #1
 800b2ae:	00da      	lsls	r2, r3, #3
 800b2b0:	9205      	str	r2, [sp, #20]
 800b2b2:	ec55 4b10 	vmov	r4, r5, d0
 800b2b6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b2b8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b314 <__kernel_rem_pio2+0x31c>
 800b2bc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b2c0:	4646      	mov	r6, r8
 800b2c2:	f04f 0a00 	mov.w	sl, #0
 800b2c6:	2e00      	cmp	r6, #0
 800b2c8:	f280 80cf 	bge.w	800b46a <__kernel_rem_pio2+0x472>
 800b2cc:	4644      	mov	r4, r8
 800b2ce:	2c00      	cmp	r4, #0
 800b2d0:	f2c0 80fd 	blt.w	800b4ce <__kernel_rem_pio2+0x4d6>
 800b2d4:	4b12      	ldr	r3, [pc, #72]	@ (800b320 <__kernel_rem_pio2+0x328>)
 800b2d6:	461f      	mov	r7, r3
 800b2d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b2da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2de:	9306      	str	r3, [sp, #24]
 800b2e0:	f04f 0a00 	mov.w	sl, #0
 800b2e4:	f04f 0b00 	mov.w	fp, #0
 800b2e8:	2600      	movs	r6, #0
 800b2ea:	eba8 0504 	sub.w	r5, r8, r4
 800b2ee:	e0e2      	b.n	800b4b6 <__kernel_rem_pio2+0x4be>
 800b2f0:	f04f 0902 	mov.w	r9, #2
 800b2f4:	e754      	b.n	800b1a0 <__kernel_rem_pio2+0x1a8>
 800b2f6:	bf00      	nop
	...
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	0800da40 	.word	0x0800da40
 800b30c:	40200000 	.word	0x40200000
 800b310:	3ff00000 	.word	0x3ff00000
 800b314:	3e700000 	.word	0x3e700000
 800b318:	41700000 	.word	0x41700000
 800b31c:	3fe00000 	.word	0x3fe00000
 800b320:	0800da00 	.word	0x0800da00
 800b324:	f854 3b04 	ldr.w	r3, [r4], #4
 800b328:	b945      	cbnz	r5, 800b33c <__kernel_rem_pio2+0x344>
 800b32a:	b123      	cbz	r3, 800b336 <__kernel_rem_pio2+0x33e>
 800b32c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b330:	f844 3c04 	str.w	r3, [r4, #-4]
 800b334:	2301      	movs	r3, #1
 800b336:	3201      	adds	r2, #1
 800b338:	461d      	mov	r5, r3
 800b33a:	e738      	b.n	800b1ae <__kernel_rem_pio2+0x1b6>
 800b33c:	1acb      	subs	r3, r1, r3
 800b33e:	e7f7      	b.n	800b330 <__kernel_rem_pio2+0x338>
 800b340:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b344:	ab0c      	add	r3, sp, #48	@ 0x30
 800b346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b34e:	a90c      	add	r1, sp, #48	@ 0x30
 800b350:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b354:	e739      	b.n	800b1ca <__kernel_rem_pio2+0x1d2>
 800b356:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800b35a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b360:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b364:	e7f3      	b.n	800b34e <__kernel_rem_pio2+0x356>
 800b366:	a90c      	add	r1, sp, #48	@ 0x30
 800b368:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	430a      	orrs	r2, r1
 800b370:	e787      	b.n	800b282 <__kernel_rem_pio2+0x28a>
 800b372:	3401      	adds	r4, #1
 800b374:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b378:	2a00      	cmp	r2, #0
 800b37a:	d0fa      	beq.n	800b372 <__kernel_rem_pio2+0x37a>
 800b37c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b37e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b382:	eb0d 0503 	add.w	r5, sp, r3
 800b386:	9b06      	ldr	r3, [sp, #24]
 800b388:	aa20      	add	r2, sp, #128	@ 0x80
 800b38a:	4443      	add	r3, r8
 800b38c:	f108 0701 	add.w	r7, r8, #1
 800b390:	3d98      	subs	r5, #152	@ 0x98
 800b392:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b396:	4444      	add	r4, r8
 800b398:	42bc      	cmp	r4, r7
 800b39a:	da04      	bge.n	800b3a6 <__kernel_rem_pio2+0x3ae>
 800b39c:	46a0      	mov	r8, r4
 800b39e:	e6a2      	b.n	800b0e6 <__kernel_rem_pio2+0xee>
 800b3a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a2:	2401      	movs	r4, #1
 800b3a4:	e7e6      	b.n	800b374 <__kernel_rem_pio2+0x37c>
 800b3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b3ac:	f7f5 f8c2 	bl	8000534 <__aeabi_i2d>
 800b3b0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b678 <__kernel_rem_pio2+0x680>
 800b3b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b3b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3c0:	46b2      	mov	sl, r6
 800b3c2:	f04f 0800 	mov.w	r8, #0
 800b3c6:	9b05      	ldr	r3, [sp, #20]
 800b3c8:	4598      	cmp	r8, r3
 800b3ca:	dd05      	ble.n	800b3d8 <__kernel_rem_pio2+0x3e0>
 800b3cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3d0:	3701      	adds	r7, #1
 800b3d2:	eca5 7b02 	vstmia	r5!, {d7}
 800b3d6:	e7df      	b.n	800b398 <__kernel_rem_pio2+0x3a0>
 800b3d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b3dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b3e0:	f7f5 f912 	bl	8000608 <__aeabi_dmul>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ec:	f7f4 ff56 	bl	800029c <__adddf3>
 800b3f0:	f108 0801 	add.w	r8, r8, #1
 800b3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3f8:	e7e5      	b.n	800b3c6 <__kernel_rem_pio2+0x3ce>
 800b3fa:	f1cb 0000 	rsb	r0, fp, #0
 800b3fe:	ec47 6b10 	vmov	d0, r6, r7
 800b402:	f000 f951 	bl	800b6a8 <scalbn>
 800b406:	ec55 4b10 	vmov	r4, r5, d0
 800b40a:	4b9d      	ldr	r3, [pc, #628]	@ (800b680 <__kernel_rem_pio2+0x688>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f5 fb7f 	bl	8000b14 <__aeabi_dcmpge>
 800b416:	b300      	cbz	r0, 800b45a <__kernel_rem_pio2+0x462>
 800b418:	4b9a      	ldr	r3, [pc, #616]	@ (800b684 <__kernel_rem_pio2+0x68c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	4620      	mov	r0, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	f7f5 fba0 	bl	8000b68 <__aeabi_d2iz>
 800b428:	4606      	mov	r6, r0
 800b42a:	f7f5 f883 	bl	8000534 <__aeabi_i2d>
 800b42e:	4b94      	ldr	r3, [pc, #592]	@ (800b680 <__kernel_rem_pio2+0x688>)
 800b430:	2200      	movs	r2, #0
 800b432:	f7f5 f8e9 	bl	8000608 <__aeabi_dmul>
 800b436:	460b      	mov	r3, r1
 800b438:	4602      	mov	r2, r0
 800b43a:	4629      	mov	r1, r5
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7f4 ff2b 	bl	8000298 <__aeabi_dsub>
 800b442:	f7f5 fb91 	bl	8000b68 <__aeabi_d2iz>
 800b446:	ab0c      	add	r3, sp, #48	@ 0x30
 800b448:	f10b 0b18 	add.w	fp, fp, #24
 800b44c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b450:	f108 0801 	add.w	r8, r8, #1
 800b454:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b458:	e722      	b.n	800b2a0 <__kernel_rem_pio2+0x2a8>
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	f7f5 fb83 	bl	8000b68 <__aeabi_d2iz>
 800b462:	ab0c      	add	r3, sp, #48	@ 0x30
 800b464:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b468:	e71a      	b.n	800b2a0 <__kernel_rem_pio2+0x2a8>
 800b46a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b46c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b470:	f7f5 f860 	bl	8000534 <__aeabi_i2d>
 800b474:	4622      	mov	r2, r4
 800b476:	462b      	mov	r3, r5
 800b478:	f7f5 f8c6 	bl	8000608 <__aeabi_dmul>
 800b47c:	4652      	mov	r2, sl
 800b47e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b482:	465b      	mov	r3, fp
 800b484:	4620      	mov	r0, r4
 800b486:	4629      	mov	r1, r5
 800b488:	f7f5 f8be 	bl	8000608 <__aeabi_dmul>
 800b48c:	3e01      	subs	r6, #1
 800b48e:	4604      	mov	r4, r0
 800b490:	460d      	mov	r5, r1
 800b492:	e718      	b.n	800b2c6 <__kernel_rem_pio2+0x2ce>
 800b494:	9906      	ldr	r1, [sp, #24]
 800b496:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b49a:	9106      	str	r1, [sp, #24]
 800b49c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b4a0:	f7f5 f8b2 	bl	8000608 <__aeabi_dmul>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4650      	mov	r0, sl
 800b4aa:	4659      	mov	r1, fp
 800b4ac:	f7f4 fef6 	bl	800029c <__adddf3>
 800b4b0:	3601      	adds	r6, #1
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	468b      	mov	fp, r1
 800b4b6:	9b00      	ldr	r3, [sp, #0]
 800b4b8:	429e      	cmp	r6, r3
 800b4ba:	dc01      	bgt.n	800b4c0 <__kernel_rem_pio2+0x4c8>
 800b4bc:	42b5      	cmp	r5, r6
 800b4be:	dae9      	bge.n	800b494 <__kernel_rem_pio2+0x49c>
 800b4c0:	ab48      	add	r3, sp, #288	@ 0x120
 800b4c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b4c6:	e9c5 ab00 	strd	sl, fp, [r5]
 800b4ca:	3c01      	subs	r4, #1
 800b4cc:	e6ff      	b.n	800b2ce <__kernel_rem_pio2+0x2d6>
 800b4ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	dc0b      	bgt.n	800b4ec <__kernel_rem_pio2+0x4f4>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	dc39      	bgt.n	800b54c <__kernel_rem_pio2+0x554>
 800b4d8:	d05d      	beq.n	800b596 <__kernel_rem_pio2+0x59e>
 800b4da:	9b02      	ldr	r3, [sp, #8]
 800b4dc:	f003 0007 	and.w	r0, r3, #7
 800b4e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b4e4:	ecbd 8b02 	vpop	{d8}
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d1f3      	bne.n	800b4da <__kernel_rem_pio2+0x4e2>
 800b4f2:	9b05      	ldr	r3, [sp, #20]
 800b4f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b4f8:	eb0d 0403 	add.w	r4, sp, r3
 800b4fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b500:	4625      	mov	r5, r4
 800b502:	46c2      	mov	sl, r8
 800b504:	f1ba 0f00 	cmp.w	sl, #0
 800b508:	f1a5 0508 	sub.w	r5, r5, #8
 800b50c:	dc6b      	bgt.n	800b5e6 <__kernel_rem_pio2+0x5ee>
 800b50e:	4645      	mov	r5, r8
 800b510:	2d01      	cmp	r5, #1
 800b512:	f1a4 0408 	sub.w	r4, r4, #8
 800b516:	f300 8087 	bgt.w	800b628 <__kernel_rem_pio2+0x630>
 800b51a:	9c05      	ldr	r4, [sp, #20]
 800b51c:	ab48      	add	r3, sp, #288	@ 0x120
 800b51e:	441c      	add	r4, r3
 800b520:	2000      	movs	r0, #0
 800b522:	2100      	movs	r1, #0
 800b524:	f1b8 0f01 	cmp.w	r8, #1
 800b528:	f300 809c 	bgt.w	800b664 <__kernel_rem_pio2+0x66c>
 800b52c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b530:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b534:	f1b9 0f00 	cmp.w	r9, #0
 800b538:	f040 80a6 	bne.w	800b688 <__kernel_rem_pio2+0x690>
 800b53c:	9b04      	ldr	r3, [sp, #16]
 800b53e:	e9c3 7800 	strd	r7, r8, [r3]
 800b542:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b546:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b54a:	e7c6      	b.n	800b4da <__kernel_rem_pio2+0x4e2>
 800b54c:	9d05      	ldr	r5, [sp, #20]
 800b54e:	ab48      	add	r3, sp, #288	@ 0x120
 800b550:	441d      	add	r5, r3
 800b552:	4644      	mov	r4, r8
 800b554:	2000      	movs	r0, #0
 800b556:	2100      	movs	r1, #0
 800b558:	2c00      	cmp	r4, #0
 800b55a:	da35      	bge.n	800b5c8 <__kernel_rem_pio2+0x5d0>
 800b55c:	f1b9 0f00 	cmp.w	r9, #0
 800b560:	d038      	beq.n	800b5d4 <__kernel_rem_pio2+0x5dc>
 800b562:	4602      	mov	r2, r0
 800b564:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b568:	9c04      	ldr	r4, [sp, #16]
 800b56a:	e9c4 2300 	strd	r2, r3, [r4]
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b576:	f7f4 fe8f 	bl	8000298 <__aeabi_dsub>
 800b57a:	ad4a      	add	r5, sp, #296	@ 0x128
 800b57c:	2401      	movs	r4, #1
 800b57e:	45a0      	cmp	r8, r4
 800b580:	da2b      	bge.n	800b5da <__kernel_rem_pio2+0x5e2>
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	d002      	beq.n	800b58e <__kernel_rem_pio2+0x596>
 800b588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b58c:	4619      	mov	r1, r3
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b594:	e7a1      	b.n	800b4da <__kernel_rem_pio2+0x4e2>
 800b596:	9c05      	ldr	r4, [sp, #20]
 800b598:	ab48      	add	r3, sp, #288	@ 0x120
 800b59a:	441c      	add	r4, r3
 800b59c:	2000      	movs	r0, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	da09      	bge.n	800b5ba <__kernel_rem_pio2+0x5c2>
 800b5a6:	f1b9 0f00 	cmp.w	r9, #0
 800b5aa:	d002      	beq.n	800b5b2 <__kernel_rem_pio2+0x5ba>
 800b5ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	e9c3 0100 	strd	r0, r1, [r3]
 800b5b8:	e78f      	b.n	800b4da <__kernel_rem_pio2+0x4e2>
 800b5ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5be:	f7f4 fe6d 	bl	800029c <__adddf3>
 800b5c2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b5c6:	e7eb      	b.n	800b5a0 <__kernel_rem_pio2+0x5a8>
 800b5c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b5cc:	f7f4 fe66 	bl	800029c <__adddf3>
 800b5d0:	3c01      	subs	r4, #1
 800b5d2:	e7c1      	b.n	800b558 <__kernel_rem_pio2+0x560>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	e7c6      	b.n	800b568 <__kernel_rem_pio2+0x570>
 800b5da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b5de:	f7f4 fe5d 	bl	800029c <__adddf3>
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	e7cb      	b.n	800b57e <__kernel_rem_pio2+0x586>
 800b5e6:	ed95 7b00 	vldr	d7, [r5]
 800b5ea:	ed8d 7b00 	vstr	d7, [sp]
 800b5ee:	ed95 7b02 	vldr	d7, [r5, #8]
 800b5f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f6:	ec53 2b17 	vmov	r2, r3, d7
 800b5fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5fe:	f7f4 fe4d 	bl	800029c <__adddf3>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4606      	mov	r6, r0
 800b608:	460f      	mov	r7, r1
 800b60a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b60e:	f7f4 fe43 	bl	8000298 <__aeabi_dsub>
 800b612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b616:	f7f4 fe41 	bl	800029c <__adddf3>
 800b61a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b61e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b622:	e9c5 6700 	strd	r6, r7, [r5]
 800b626:	e76d      	b.n	800b504 <__kernel_rem_pio2+0x50c>
 800b628:	ed94 7b00 	vldr	d7, [r4]
 800b62c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b630:	ec51 0b17 	vmov	r0, r1, d7
 800b634:	4652      	mov	r2, sl
 800b636:	465b      	mov	r3, fp
 800b638:	ed8d 7b00 	vstr	d7, [sp]
 800b63c:	f7f4 fe2e 	bl	800029c <__adddf3>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	4606      	mov	r6, r0
 800b646:	460f      	mov	r7, r1
 800b648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b64c:	f7f4 fe24 	bl	8000298 <__aeabi_dsub>
 800b650:	4652      	mov	r2, sl
 800b652:	465b      	mov	r3, fp
 800b654:	f7f4 fe22 	bl	800029c <__adddf3>
 800b658:	3d01      	subs	r5, #1
 800b65a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b65e:	e9c4 6700 	strd	r6, r7, [r4]
 800b662:	e755      	b.n	800b510 <__kernel_rem_pio2+0x518>
 800b664:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b668:	f7f4 fe18 	bl	800029c <__adddf3>
 800b66c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b670:	e758      	b.n	800b524 <__kernel_rem_pio2+0x52c>
 800b672:	bf00      	nop
 800b674:	f3af 8000 	nop.w
	...
 800b680:	41700000 	.word	0x41700000
 800b684:	3e700000 	.word	0x3e700000
 800b688:	9b04      	ldr	r3, [sp, #16]
 800b68a:	9a04      	ldr	r2, [sp, #16]
 800b68c:	601f      	str	r7, [r3, #0]
 800b68e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b692:	605c      	str	r4, [r3, #4]
 800b694:	609d      	str	r5, [r3, #8]
 800b696:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b69a:	60d3      	str	r3, [r2, #12]
 800b69c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6a0:	6110      	str	r0, [r2, #16]
 800b6a2:	6153      	str	r3, [r2, #20]
 800b6a4:	e719      	b.n	800b4da <__kernel_rem_pio2+0x4e2>
 800b6a6:	bf00      	nop

0800b6a8 <scalbn>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	ec55 4b10 	vmov	r4, r5, d0
 800b6ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	462b      	mov	r3, r5
 800b6b6:	b991      	cbnz	r1, 800b6de <scalbn+0x36>
 800b6b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b6bc:	4323      	orrs	r3, r4
 800b6be:	d03d      	beq.n	800b73c <scalbn+0x94>
 800b6c0:	4b35      	ldr	r3, [pc, #212]	@ (800b798 <scalbn+0xf0>)
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f7f4 ff9e 	bl	8000608 <__aeabi_dmul>
 800b6cc:	4b33      	ldr	r3, [pc, #204]	@ (800b79c <scalbn+0xf4>)
 800b6ce:	429e      	cmp	r6, r3
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	da0f      	bge.n	800b6f6 <scalbn+0x4e>
 800b6d6:	a328      	add	r3, pc, #160	@ (adr r3, 800b778 <scalbn+0xd0>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	e01e      	b.n	800b71c <scalbn+0x74>
 800b6de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b6e2:	4291      	cmp	r1, r2
 800b6e4:	d10b      	bne.n	800b6fe <scalbn+0x56>
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	f7f4 fdd6 	bl	800029c <__adddf3>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	e022      	b.n	800b73c <scalbn+0x94>
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b6fc:	3936      	subs	r1, #54	@ 0x36
 800b6fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b702:	4296      	cmp	r6, r2
 800b704:	dd0d      	ble.n	800b722 <scalbn+0x7a>
 800b706:	2d00      	cmp	r5, #0
 800b708:	a11d      	add	r1, pc, #116	@ (adr r1, 800b780 <scalbn+0xd8>)
 800b70a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b70e:	da02      	bge.n	800b716 <scalbn+0x6e>
 800b710:	a11d      	add	r1, pc, #116	@ (adr r1, 800b788 <scalbn+0xe0>)
 800b712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b716:	a31a      	add	r3, pc, #104	@ (adr r3, 800b780 <scalbn+0xd8>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 ff74 	bl	8000608 <__aeabi_dmul>
 800b720:	e7e6      	b.n	800b6f0 <scalbn+0x48>
 800b722:	1872      	adds	r2, r6, r1
 800b724:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b728:	428a      	cmp	r2, r1
 800b72a:	dcec      	bgt.n	800b706 <scalbn+0x5e>
 800b72c:	2a00      	cmp	r2, #0
 800b72e:	dd08      	ble.n	800b742 <scalbn+0x9a>
 800b730:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b734:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b738:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b73c:	ec45 4b10 	vmov	d0, r4, r5
 800b740:	bd70      	pop	{r4, r5, r6, pc}
 800b742:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b746:	da08      	bge.n	800b75a <scalbn+0xb2>
 800b748:	2d00      	cmp	r5, #0
 800b74a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b778 <scalbn+0xd0>)
 800b74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b750:	dac1      	bge.n	800b6d6 <scalbn+0x2e>
 800b752:	a10f      	add	r1, pc, #60	@ (adr r1, 800b790 <scalbn+0xe8>)
 800b754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b758:	e7bd      	b.n	800b6d6 <scalbn+0x2e>
 800b75a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b75e:	3236      	adds	r2, #54	@ 0x36
 800b760:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b764:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b768:	4620      	mov	r0, r4
 800b76a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a0 <scalbn+0xf8>)
 800b76c:	4629      	mov	r1, r5
 800b76e:	2200      	movs	r2, #0
 800b770:	e7d4      	b.n	800b71c <scalbn+0x74>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
 800b778:	c2f8f359 	.word	0xc2f8f359
 800b77c:	01a56e1f 	.word	0x01a56e1f
 800b780:	8800759c 	.word	0x8800759c
 800b784:	7e37e43c 	.word	0x7e37e43c
 800b788:	8800759c 	.word	0x8800759c
 800b78c:	fe37e43c 	.word	0xfe37e43c
 800b790:	c2f8f359 	.word	0xc2f8f359
 800b794:	81a56e1f 	.word	0x81a56e1f
 800b798:	43500000 	.word	0x43500000
 800b79c:	ffff3cb0 	.word	0xffff3cb0
 800b7a0:	3c900000 	.word	0x3c900000
 800b7a4:	00000000 	.word	0x00000000

0800b7a8 <floor>:
 800b7a8:	ec51 0b10 	vmov	r0, r1, d0
 800b7ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b7b8:	2e13      	cmp	r6, #19
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	4605      	mov	r5, r0
 800b7be:	4680      	mov	r8, r0
 800b7c0:	dc34      	bgt.n	800b82c <floor+0x84>
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	da17      	bge.n	800b7f6 <floor+0x4e>
 800b7c6:	a332      	add	r3, pc, #200	@ (adr r3, 800b890 <floor+0xe8>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 fd66 	bl	800029c <__adddf3>
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f7f5 f9a8 	bl	8000b28 <__aeabi_dcmpgt>
 800b7d8:	b150      	cbz	r0, 800b7f0 <floor+0x48>
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	da55      	bge.n	800b88a <floor+0xe2>
 800b7de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b7e2:	432c      	orrs	r4, r5
 800b7e4:	2500      	movs	r5, #0
 800b7e6:	42ac      	cmp	r4, r5
 800b7e8:	4c2b      	ldr	r4, [pc, #172]	@ (800b898 <floor+0xf0>)
 800b7ea:	bf08      	it	eq
 800b7ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	e023      	b.n	800b83e <floor+0x96>
 800b7f6:	4f29      	ldr	r7, [pc, #164]	@ (800b89c <floor+0xf4>)
 800b7f8:	4137      	asrs	r7, r6
 800b7fa:	ea01 0307 	and.w	r3, r1, r7
 800b7fe:	4303      	orrs	r3, r0
 800b800:	d01d      	beq.n	800b83e <floor+0x96>
 800b802:	a323      	add	r3, pc, #140	@ (adr r3, 800b890 <floor+0xe8>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fd48 	bl	800029c <__adddf3>
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	f7f5 f98a 	bl	8000b28 <__aeabi_dcmpgt>
 800b814:	2800      	cmp	r0, #0
 800b816:	d0eb      	beq.n	800b7f0 <floor+0x48>
 800b818:	2c00      	cmp	r4, #0
 800b81a:	bfbe      	ittt	lt
 800b81c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b820:	4133      	asrlt	r3, r6
 800b822:	18e4      	addlt	r4, r4, r3
 800b824:	ea24 0407 	bic.w	r4, r4, r7
 800b828:	2500      	movs	r5, #0
 800b82a:	e7e1      	b.n	800b7f0 <floor+0x48>
 800b82c:	2e33      	cmp	r6, #51	@ 0x33
 800b82e:	dd0a      	ble.n	800b846 <floor+0x9e>
 800b830:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b834:	d103      	bne.n	800b83e <floor+0x96>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	f7f4 fd2f 	bl	800029c <__adddf3>
 800b83e:	ec41 0b10 	vmov	d0, r0, r1
 800b842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b846:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b84a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b84e:	40df      	lsrs	r7, r3
 800b850:	4207      	tst	r7, r0
 800b852:	d0f4      	beq.n	800b83e <floor+0x96>
 800b854:	a30e      	add	r3, pc, #56	@ (adr r3, 800b890 <floor+0xe8>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7f4 fd1f 	bl	800029c <__adddf3>
 800b85e:	2200      	movs	r2, #0
 800b860:	2300      	movs	r3, #0
 800b862:	f7f5 f961 	bl	8000b28 <__aeabi_dcmpgt>
 800b866:	2800      	cmp	r0, #0
 800b868:	d0c2      	beq.n	800b7f0 <floor+0x48>
 800b86a:	2c00      	cmp	r4, #0
 800b86c:	da0a      	bge.n	800b884 <floor+0xdc>
 800b86e:	2e14      	cmp	r6, #20
 800b870:	d101      	bne.n	800b876 <floor+0xce>
 800b872:	3401      	adds	r4, #1
 800b874:	e006      	b.n	800b884 <floor+0xdc>
 800b876:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b87a:	2301      	movs	r3, #1
 800b87c:	40b3      	lsls	r3, r6
 800b87e:	441d      	add	r5, r3
 800b880:	4545      	cmp	r5, r8
 800b882:	d3f6      	bcc.n	800b872 <floor+0xca>
 800b884:	ea25 0507 	bic.w	r5, r5, r7
 800b888:	e7b2      	b.n	800b7f0 <floor+0x48>
 800b88a:	2500      	movs	r5, #0
 800b88c:	462c      	mov	r4, r5
 800b88e:	e7af      	b.n	800b7f0 <floor+0x48>
 800b890:	8800759c 	.word	0x8800759c
 800b894:	7e37e43c 	.word	0x7e37e43c
 800b898:	bff00000 	.word	0xbff00000
 800b89c:	000fffff 	.word	0x000fffff

0800b8a0 <_init>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	bf00      	nop
 800b8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a6:	bc08      	pop	{r3}
 800b8a8:	469e      	mov	lr, r3
 800b8aa:	4770      	bx	lr

0800b8ac <_fini>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr
